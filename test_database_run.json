[
{"keyword": "Feature", "name": "Demo HTML Report Testing", "tags": [], "location": "features/demo_report.feature:1", "status": "skipped", "description": ["As a test automation engineer", "I want to generate comprehensive HTML reports", "So that I can visualize test results effectively"], "elements": [{"type": "scenario", "keyword": "Scenario", "name": "Successful test scenario", "tags": ["demo", "reporting"], "location": "features/demo_report.feature:7", "steps": [{"keyword": "Given", "step_type": "given", "name": "I have a passing test step", "location": "features/demo_report.feature:8"}, {"keyword": "When", "step_type": "when", "name": "I execute the test step", "location": "features/demo_report.feature:9"}, {"keyword": "Then", "step_type": "then", "name": "the test should pass successfully", "location": "features/demo_report.feature:10"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Failed test scenario", "tags": ["demo", "reporting"], "location": "features/demo_report.feature:13", "steps": [{"keyword": "Given", "step_type": "given", "name": "I have a failing test step", "location": "features/demo_report.feature:14"}, {"keyword": "When", "step_type": "when", "name": "I execute the test step that will fail", "location": "features/demo_report.feature:15"}, {"keyword": "Then", "step_type": "then", "name": "the test should fail with an error message", "location": "features/demo_report.feature:16"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Mixed test scenario", "tags": ["demo", "reporting"], "location": "features/demo_report.feature:19", "steps": [{"keyword": "Given", "step_type": "given", "name": "I have multiple test steps", "location": "features/demo_report.feature:20"}, {"keyword": "When", "step_type": "when", "name": "I execute a passing step", "location": "features/demo_report.feature:21"}, {"keyword": "And", "step_type": "when", "name": "I execute another passing step", "location": "features/demo_report.feature:22"}, {"keyword": "Then", "step_type": "then", "name": "all steps should complete", "location": "features/demo_report.feature:23"}, {"keyword": "But", "step_type": "then", "name": "one step might have warnings", "location": "features/demo_report.feature:24"}], "status": "skipped"}]},

{"keyword": "Feature", "name": "Kafka Message-Style Operations", "tags": [], "location": "features/kafka_messaging.feature:1", "status": "skipped", "description": ["As a test automation engineer", "I want to use Apache Kafka for message-style operations", "So that I can send, consume, and process data as messages in Kafka topics"], "elements": [{"type": "background", "keyword": "Background", "name": "", "location": "features/kafka_messaging.feature:6", "steps": [{"keyword": "Given", "step_type": "given", "name": "Kafka connection is configured", "location": "features/kafka_messaging.feature:7"}]}, {"type": "scenario", "keyword": "Scenario", "name": "Send file to Kafka line by line and consume as messages", "tags": ["kafka", "messaging", "line_by_line"], "location": "features/kafka_messaging.feature:10", "steps": [{"keyword": "Given", "step_type": "given", "name": "Kafka connection is configured", "location": "features/kafka_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I send file \"test_data/sample_messages.txt\" to Kafka topic \"test-topic\" line by line", "location": "features/kafka_messaging.feature:11"}, {"keyword": "Then", "step_type": "then", "name": "Kafka file should be sent successfully with 5 messages", "location": "features/kafka_messaging.feature:12"}, {"keyword": "When", "step_type": "when", "name": "I consume messages from Kafka topics \"test-topic\" and write to file \"output/retrieved_kafka_messages.txt\" line by line", "location": "features/kafka_messaging.feature:13"}, {"keyword": "Then", "step_type": "then", "name": "Kafka message consumption should be successful", "location": "features/kafka_messaging.feature:14"}, {"keyword": "And", "step_type": "then", "name": "Kafka should consume 5 messages to file", "location": "features/kafka_messaging.feature:15"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Send file to Kafka as whole file and consume as single message", "tags": ["kafka", "messaging", "whole_file"], "location": "features/kafka_messaging.feature:18", "steps": [{"keyword": "Given", "step_type": "given", "name": "Kafka connection is configured", "location": "features/kafka_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I send file \"test_data/sample_document.txt\" to Kafka topic \"test-document\" as whole file", "location": "features/kafka_messaging.feature:19"}, {"keyword": "Then", "step_type": "then", "name": "Kafka file should be sent successfully with 1 messages", "location": "features/kafka_messaging.feature:20"}, {"keyword": "When", "step_type": "when", "name": "I consume messages from Kafka topics \"test-document\" and write to file \"output/retrieved_kafka_document.txt\" as whole file", "location": "features/kafka_messaging.feature:21"}, {"keyword": "Then", "step_type": "then", "name": "Kafka message consumption should be successful", "location": "features/kafka_messaging.feature:22"}, {"keyword": "And", "step_type": "then", "name": "Kafka should consume 1 messages to file", "location": "features/kafka_messaging.feature:23"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Send and consume single message to/from Kafka", "tags": ["kafka", "messaging", "single_message"], "location": "features/kafka_messaging.feature:26", "steps": [{"keyword": "Given", "step_type": "given", "name": "Kafka connection is configured", "location": "features/kafka_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I send Kafka message \"Hello Kafka Message World!\" to topic \"test-single\"", "location": "features/kafka_messaging.feature:27"}, {"keyword": "Then", "step_type": "then", "name": "Kafka message should be sent successfully", "location": "features/kafka_messaging.feature:28"}, {"keyword": "When", "step_type": "when", "name": "I consume messages from Kafka topics \"test-single\" and write to file \"output/single_kafka_message.txt\" line by line", "location": "features/kafka_messaging.feature:29"}, {"keyword": "Then", "step_type": "then", "name": "Kafka message consumption should be successful", "location": "features/kafka_messaging.feature:30"}, {"keyword": "And", "step_type": "then", "name": "Kafka should consume 1 messages to file", "location": "features/kafka_messaging.feature:31"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Consume limited number of Kafka messages", "tags": ["kafka", "messaging", "limited_consumption"], "location": "features/kafka_messaging.feature:34", "steps": [{"keyword": "Given", "step_type": "given", "name": "Kafka connection is configured", "location": "features/kafka_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I send Kafka message \"Message 1\" to topic \"test-limited\"", "location": "features/kafka_messaging.feature:36"}, {"keyword": "And", "step_type": "when", "name": "I send Kafka message \"Message 2\" to topic \"test-limited\"", "location": "features/kafka_messaging.feature:37"}, {"keyword": "And", "step_type": "when", "name": "I send Kafka message \"Message 3\" to topic \"test-limited\"", "location": "features/kafka_messaging.feature:38"}, {"keyword": "And", "step_type": "when", "name": "I send Kafka message \"Message 4\" to topic \"test-limited\"", "location": "features/kafka_messaging.feature:39"}, {"keyword": "And", "step_type": "when", "name": "I send Kafka message \"Message 5\" to topic \"test-limited\"", "location": "features/kafka_messaging.feature:40"}, {"keyword": "Then", "step_type": "then", "name": "Kafka message should be sent successfully", "location": "features/kafka_messaging.feature:41"}, {"keyword": "When", "step_type": "when", "name": "I consume 3 messages from Kafka topics \"test-limited\" and write to file \"output/limited_kafka_messages.txt\" line by line", "location": "features/kafka_messaging.feature:43"}, {"keyword": "Then", "step_type": "then", "name": "Kafka message consumption should be successful", "location": "features/kafka_messaging.feature:44"}, {"keyword": "And", "step_type": "then", "name": "Kafka should consume 3 messages to file", "location": "features/kafka_messaging.feature:45"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Export Kafka messages in different formats", "tags": ["kafka", "messaging", "export_formats"], "location": "features/kafka_messaging.feature:48", "steps": [{"keyword": "Given", "step_type": "given", "name": "Kafka connection is configured", "location": "features/kafka_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I send Kafka message \"Test message 1\" to topic \"test-export\"", "location": "features/kafka_messaging.feature:50"}, {"keyword": "And", "step_type": "when", "name": "I send Kafka message \"Test message 2\" to topic \"test-export\"", "location": "features/kafka_messaging.feature:51"}, {"keyword": "And", "step_type": "when", "name": "I send Kafka message \"Test message 3\" to topic \"test-export\"", "location": "features/kafka_messaging.feature:52"}, {"keyword": "When", "step_type": "when", "name": "I export Kafka messages from topics \"test-export\" to file \"output/kafka_messages.txt\" in \"txt\" format", "location": "features/kafka_messaging.feature:54"}, {"keyword": "Then", "step_type": "then", "name": "Kafka export should be successful with 3 messages", "location": "features/kafka_messaging.feature:55"}, {"keyword": "When", "step_type": "when", "name": "I export Kafka messages from topics \"test-export\" to file \"output/kafka_messages.csv\" in \"csv\" format", "location": "features/kafka_messaging.feature:56"}, {"keyword": "Then", "step_type": "then", "name": "Kafka export should be successful with 3 messages", "location": "features/kafka_messaging.feature:57"}, {"keyword": "When", "step_type": "when", "name": "I export Kafka messages from topics \"test-export\" to file \"output/kafka_messages.json\" in \"json\" format", "location": "features/kafka_messaging.feature:58"}, {"keyword": "Then", "step_type": "then", "name": "Kafka export should be successful with 3 messages", "location": "features/kafka_messaging.feature:59"}, {"keyword": "When", "step_type": "when", "name": "I export Kafka messages from topics \"test-export\" to file \"output/kafka_messages.xml\" in \"xml\" format", "location": "features/kafka_messaging.feature:60"}, {"keyword": "Then", "step_type": "then", "name": "Kafka export should be successful with 3 messages", "location": "features/kafka_messaging.feature:61"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Kafka topic metadata operations", "tags": ["kafka", "messaging", "topic_metadata"], "location": "features/kafka_messaging.feature:64", "steps": [{"keyword": "Given", "step_type": "given", "name": "Kafka connection is configured", "location": "features/kafka_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I send Kafka message \"Metadata test message 1\" to topic \"test-metadata\"", "location": "features/kafka_messaging.feature:66"}, {"keyword": "And", "step_type": "when", "name": "I send Kafka message \"Metadata test message 2\" to topic \"test-metadata\"", "location": "features/kafka_messaging.feature:67"}, {"keyword": "And", "step_type": "when", "name": "I send Kafka message \"Metadata test message 3\" to topic \"test-metadata\"", "location": "features/kafka_messaging.feature:68"}, {"keyword": "Then", "step_type": "then", "name": "Kafka message should be sent successfully", "location": "features/kafka_messaging.feature:69"}, {"keyword": "When", "step_type": "when", "name": "I get topic metadata for Kafka topics \"test-metadata\"", "location": "features/kafka_messaging.feature:71"}, {"keyword": "Then", "step_type": "then", "name": "Kafka topic \"test-metadata\" should have 1 partitions", "location": "features/kafka_messaging.feature:72"}, {"keyword": "And", "step_type": "then", "name": "Kafka topic \"test-metadata\" should have at least 3 messages", "location": "features/kafka_messaging.feature:73"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Multi-topic Kafka operations", "tags": ["kafka", "messaging", "multiple_topics"], "location": "features/kafka_messaging.feature:76", "steps": [{"keyword": "Given", "step_type": "given", "name": "Kafka connection is configured", "location": "features/kafka_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I send Kafka message \"Multi-topic message 1\" to topic \"topic-a\"", "location": "features/kafka_messaging.feature:78"}, {"keyword": "And", "step_type": "when", "name": "I send Kafka message \"Multi-topic message 2\" to topic \"topic-b\"", "location": "features/kafka_messaging.feature:79"}, {"keyword": "And", "step_type": "when", "name": "I send Kafka message \"Multi-topic message 3\" to topic \"topic-a\"", "location": "features/kafka_messaging.feature:80"}, {"keyword": "Then", "step_type": "then", "name": "Kafka message should be sent successfully", "location": "features/kafka_messaging.feature:81"}, {"keyword": "When", "step_type": "when", "name": "I consume messages from Kafka topics \"topic-a,topic-b\" and write to file \"output/multi_topic_messages.txt\" line by line", "location": "features/kafka_messaging.feature:83"}, {"keyword": "Then", "step_type": "then", "name": "Kafka message consumption should be successful", "location": "features/kafka_messaging.feature:84"}, {"keyword": "And", "step_type": "then", "name": "Kafka should consume 3 messages to file", "location": "features/kafka_messaging.feature:85"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Kafka batch message processing", "tags": ["kafka", "messaging", "batch_processing"], "location": "features/kafka_messaging.feature:88", "steps": [{"keyword": "Given", "step_type": "given", "name": "Kafka connection is configured", "location": "features/kafka_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I send batch Kafka messages to topic \"test-batch\"", "location": "features/kafka_messaging.feature:89", "table": {"headings": ["message"], "rows": [["Batch message 1"], ["Batch message 2"], ["Batch message 3"], ["Batch message 4"], ["Batch message 5"]]}}, {"keyword": "Then", "step_type": "then", "name": "Kafka batch should be sent successfully with 5 messages", "location": "features/kafka_messaging.feature:96"}, {"keyword": "When", "step_type": "when", "name": "I consume 2 messages from Kafka topics \"test-batch\" and write to file \"output/batch1_kafka_messages.txt\" line by line", "location": "features/kafka_messaging.feature:98"}, {"keyword": "Then", "step_type": "then", "name": "Kafka should consume 2 messages to file", "location": "features/kafka_messaging.feature:99"}, {"keyword": "When", "step_type": "when", "name": "I consume 3 messages from Kafka topics \"test-batch\" and write to file \"output/batch2_kafka_messages.txt\" line by line", "location": "features/kafka_messaging.feature:100"}, {"keyword": "Then", "step_type": "then", "name": "Kafka should consume 3 messages to file", "location": "features/kafka_messaging.feature:101"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Kafka JSON message processing", "tags": ["kafka", "messaging", "json_processing"], "location": "features/kafka_messaging.feature:104", "steps": [{"keyword": "Given", "step_type": "given", "name": "Kafka connection is configured", "location": "features/kafka_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I send JSON messages to Kafka topic \"test-json\"", "location": "features/kafka_messaging.feature:105", "table": {"headings": ["id", "name", "status"], "rows": [["1", "John", "active"], ["2", "Jane", "inactive"], ["3", "Bob", "active"]]}}, {"keyword": "Then", "step_type": "then", "name": "Kafka JSON messages should be sent successfully with 3 messages", "location": "features/kafka_messaging.feature:110"}, {"keyword": "When", "step_type": "when", "name": "I export Kafka messages from topics \"test-json\" to file \"output/json_kafka_messages.json\" in \"json\" format", "location": "features/kafka_messaging.feature:112"}, {"keyword": "Then", "step_type": "then", "name": "Kafka export should be successful with 3 messages", "location": "features/kafka_messaging.feature:113"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Performance test for Kafka message operations", "tags": ["kafka", "messaging", "performance"], "location": "features/kafka_messaging.feature:116", "steps": [{"keyword": "Given", "step_type": "given", "name": "Kafka connection is configured", "location": "features/kafka_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I send file \"test_data/large_message_file.txt\" to Kafka topic \"test-performance\" line by line", "location": "features/kafka_messaging.feature:117"}, {"keyword": "Then", "step_type": "then", "name": "Kafka file should be sent successfully with 100 messages", "location": "features/kafka_messaging.feature:118"}, {"keyword": "And", "step_type": "then", "name": "Kafka processing should complete within 30 seconds", "location": "features/kafka_messaging.feature:119"}, {"keyword": "When", "step_type": "when", "name": "I consume messages from Kafka topics \"test-performance\" and write to file \"output/performance_kafka_output.txt\" line by line", "location": "features/kafka_messaging.feature:120"}, {"keyword": "Then", "step_type": "then", "name": "Kafka message consumption should be successful", "location": "features/kafka_messaging.feature:121"}, {"keyword": "And", "step_type": "then", "name": "Kafka should consume 100 messages to file", "location": "features/kafka_messaging.feature:122"}, {"keyword": "And", "step_type": "then", "name": "Kafka processing should complete within 20 seconds", "location": "features/kafka_messaging.feature:123"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Kafka seek operations", "tags": ["kafka", "messaging", "seek_operations"], "location": "features/kafka_messaging.feature:126", "steps": [{"keyword": "Given", "step_type": "given", "name": "Kafka connection is configured", "location": "features/kafka_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I send Kafka message \"Seek test message 1\" to topic \"test-seek\"", "location": "features/kafka_messaging.feature:128"}, {"keyword": "And", "step_type": "when", "name": "I send Kafka message \"Seek test message 2\" to topic \"test-seek\"", "location": "features/kafka_messaging.feature:129"}, {"keyword": "And", "step_type": "when", "name": "I send Kafka message \"Seek test message 3\" to topic \"test-seek\"", "location": "features/kafka_messaging.feature:130"}, {"keyword": "Then", "step_type": "then", "name": "Kafka message should be sent successfully", "location": "features/kafka_messaging.feature:131"}, {"keyword": "When", "step_type": "when", "name": "I seek to beginning of Kafka topics \"test-seek\"", "location": "features/kafka_messaging.feature:134"}, {"keyword": "And", "step_type": "when", "name": "I consume messages from Kafka topics \"test-seek\" and write to file \"output/seek_beginning_messages.txt\" line by line", "location": "features/kafka_messaging.feature:135"}, {"keyword": "Then", "step_type": "then", "name": "Kafka message consumption should be successful", "location": "features/kafka_messaging.feature:136"}, {"keyword": "And", "step_type": "then", "name": "Kafka should consume 3 messages to file", "location": "features/kafka_messaging.feature:137"}, {"keyword": "When", "step_type": "when", "name": "I seek to end of Kafka topics \"test-seek\"", "location": "features/kafka_messaging.feature:140"}, {"keyword": "And", "step_type": "when", "name": "I consume 1 messages from Kafka topics \"test-seek\" and write to file \"output/seek_end_messages.txt\" line by line", "location": "features/kafka_messaging.feature:141"}, {"keyword": "Then", "step_type": "then", "name": "Kafka message consumption should be successful", "location": "features/kafka_messaging.feature:142"}, {"keyword": "And", "step_type": "then", "name": "Kafka should consume 0 messages to file", "location": "features/kafka_messaging.feature:143"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Mixed Kafka message operations workflow", "tags": ["kafka", "messaging", "mixed_operations"], "location": "features/kafka_messaging.feature:146", "steps": [{"keyword": "Given", "step_type": "given", "name": "Kafka connection is configured", "location": "features/kafka_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I send file \"test_data/json_messages.txt\" to Kafka topic \"mixed-topic\" line by line", "location": "features/kafka_messaging.feature:148"}, {"keyword": "Then", "step_type": "then", "name": "Kafka file should be sent successfully with 10 messages", "location": "features/kafka_messaging.feature:149"}, {"keyword": "When", "step_type": "when", "name": "I send file \"test_data/xml_document.xml\" to Kafka topic \"mixed-topic\" as whole file", "location": "features/kafka_messaging.feature:152"}, {"keyword": "Then", "step_type": "then", "name": "Kafka file should be sent successfully with 1 messages", "location": "features/kafka_messaging.feature:153"}, {"keyword": "When", "step_type": "when", "name": "I send Kafka message \"Individual message 1\" to topic \"mixed-topic\"", "location": "features/kafka_messaging.feature:156"}, {"keyword": "And", "step_type": "when", "name": "I send Kafka message \"Individual message 2\" to topic \"mixed-topic\"", "location": "features/kafka_messaging.feature:157"}, {"keyword": "Then", "step_type": "then", "name": "Kafka message should be sent successfully", "location": "features/kafka_messaging.feature:158"}, {"keyword": "When", "step_type": "when", "name": "I get topic metadata for Kafka topics \"mixed-topic\"", "location": "features/kafka_messaging.feature:161"}, {"keyword": "Then", "step_type": "then", "name": "Kafka topic \"mixed-topic\" should have at least 13 messages", "location": "features/kafka_messaging.feature:162"}, {"keyword": "When", "step_type": "when", "name": "I export Kafka messages from topics \"mixed-topic\" to file \"output/all_kafka_messages.json\" in \"json\" format", "location": "features/kafka_messaging.feature:165"}, {"keyword": "Then", "step_type": "then", "name": "Kafka export should be successful with 13 messages", "location": "features/kafka_messaging.feature:166"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Error handling for Kafka message operations", "tags": ["kafka", "messaging", "error_handling"], "location": "features/kafka_messaging.feature:169", "steps": [{"keyword": "Given", "step_type": "given", "name": "Kafka connection is configured", "location": "features/kafka_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I consume 1 messages from Kafka topics \"non-existent-topic\" and write to file \"output/empty_kafka_result.txt\" line by line", "location": "features/kafka_messaging.feature:171"}, {"keyword": "Then", "step_type": "then", "name": "Kafka message consumption should be successful", "location": "features/kafka_messaging.feature:172"}, {"keyword": "And", "step_type": "then", "name": "Kafka should consume 0 messages to file", "location": "features/kafka_messaging.feature:173"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Validate Kafka message content integrity", "tags": ["kafka", "messaging", "content_validation"], "location": "features/kafka_messaging.feature:176", "steps": [{"keyword": "Given", "step_type": "given", "name": "Kafka connection is configured", "location": "features/kafka_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I send Kafka message \"Line 1: Important Kafka data\" to topic \"test-validation\"", "location": "features/kafka_messaging.feature:178"}, {"keyword": "And", "step_type": "when", "name": "I send Kafka message \"Line 2: More important Kafka data\" to topic \"test-validation\"", "location": "features/kafka_messaging.feature:179"}, {"keyword": "And", "step_type": "when", "name": "I send Kafka message \"Line 3: Final Kafka data\" to topic \"test-validation\"", "location": "features/kafka_messaging.feature:180"}, {"keyword": "Then", "step_type": "then", "name": "Kafka message should be sent successfully", "location": "features/kafka_messaging.feature:181"}, {"keyword": "When", "step_type": "when", "name": "I consume messages from Kafka topics \"test-validation\" and write to file \"output/validated_kafka_messages.txt\" line by line", "location": "features/kafka_messaging.feature:184"}, {"keyword": "Then", "step_type": "then", "name": "Kafka message consumption should be successful", "location": "features/kafka_messaging.feature:185"}, {"keyword": "And", "step_type": "then", "name": "Kafka should consume 3 messages to file", "location": "features/kafka_messaging.feature:186"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Comprehensive Kafka operations test", "tags": ["kafka", "messaging", "comprehensive"], "location": "features/kafka_messaging.feature:189", "steps": [{"keyword": "Given", "step_type": "given", "name": "Kafka connection is configured", "location": "features/kafka_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I send Kafka message \"Comprehensive test start\" to topic \"comprehensive-test\"", "location": "features/kafka_messaging.feature:193"}, {"keyword": "Then", "step_type": "then", "name": "Kafka message should be sent successfully", "location": "features/kafka_messaging.feature:194"}, {"keyword": "When", "step_type": "when", "name": "I send file \"test_data/comprehensive_test.txt\" to Kafka topic \"comprehensive-test\" line by line", "location": "features/kafka_messaging.feature:197"}, {"keyword": "Then", "step_type": "then", "name": "Kafka file should be sent successfully with 20 messages", "location": "features/kafka_messaging.feature:198"}, {"keyword": "When", "step_type": "when", "name": "I send file \"test_data/summary.txt\" to Kafka topic \"comprehensive-test\" as whole file", "location": "features/kafka_messaging.feature:200"}, {"keyword": "Then", "step_type": "then", "name": "Kafka file should be sent successfully with 1 messages", "location": "features/kafka_messaging.feature:201"}, {"keyword": "When", "step_type": "when", "name": "I get topic metadata for Kafka topics \"comprehensive-test\"", "location": "features/kafka_messaging.feature:204"}, {"keyword": "Then", "step_type": "then", "name": "Kafka topic \"comprehensive-test\" should have at least 22 messages", "location": "features/kafka_messaging.feature:205"}, {"keyword": "When", "step_type": "when", "name": "I consume 5 messages from Kafka topics \"comprehensive-test\" and write to file \"output/comp_first_batch.txt\" line by line", "location": "features/kafka_messaging.feature:208"}, {"keyword": "Then", "step_type": "then", "name": "Kafka should consume 5 messages to file", "location": "features/kafka_messaging.feature:209"}, {"keyword": "When", "step_type": "when", "name": "I export Kafka messages from topics \"comprehensive-test\" to file \"output/comp_remaining.csv\" in \"csv\" format", "location": "features/kafka_messaging.feature:212"}, {"keyword": "Then", "step_type": "then", "name": "Kafka export should be successful with 17 messages", "location": "features/kafka_messaging.feature:213"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Cross-format Kafka message operations", "tags": ["kafka", "messaging", "cross_format"], "location": "features/kafka_messaging.feature:216", "steps": [{"keyword": "Given", "step_type": "given", "name": "Kafka connection is configured", "location": "features/kafka_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I send Kafka message '{\"type\": \"json\", \"content\": \"JSON message\"}' to topic \"cross-format\"", "location": "features/kafka_messaging.feature:218"}, {"keyword": "And", "step_type": "when", "name": "I send Kafka message \"<xml><type>xml</type><content>XML message</content></xml>\" to topic \"cross-format\"", "location": "features/kafka_messaging.feature:219"}, {"keyword": "And", "step_type": "when", "name": "I send Kafka message \"Plain text message\" to topic \"cross-format\"", "location": "features/kafka_messaging.feature:220"}, {"keyword": "Then", "step_type": "then", "name": "Kafka message should be sent successfully", "location": "features/kafka_messaging.feature:221"}, {"keyword": "When", "step_type": "when", "name": "I export Kafka messages from topics \"cross-format\" to file \"output/cross_format.txt\" in \"txt\" format", "location": "features/kafka_messaging.feature:224"}, {"keyword": "Then", "step_type": "then", "name": "Kafka export should be successful with 3 messages", "location": "features/kafka_messaging.feature:225"}, {"keyword": "When", "step_type": "when", "name": "I export Kafka messages from topics \"cross-format\" to file \"output/cross_format.json\" in \"json\" format", "location": "features/kafka_messaging.feature:227"}, {"keyword": "Then", "step_type": "then", "name": "Kafka export should be successful with 3 messages", "location": "features/kafka_messaging.feature:228"}, {"keyword": "When", "step_type": "when", "name": "I export Kafka messages from topics \"cross-format\" to file \"output/cross_format.xml\" in \"xml\" format", "location": "features/kafka_messaging.feature:230"}, {"keyword": "Then", "step_type": "then", "name": "Kafka export should be successful with 3 messages", "location": "features/kafka_messaging.feature:231"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "High throughput Kafka operations", "tags": ["kafka", "messaging", "high_throughput"], "location": "features/kafka_messaging.feature:234", "steps": [{"keyword": "Given", "step_type": "given", "name": "Kafka connection is configured", "location": "features/kafka_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I send file \"test_data/high_throughput_data.txt\" to Kafka topic \"high-throughput\" line by line", "location": "features/kafka_messaging.feature:236"}, {"keyword": "Then", "step_type": "then", "name": "Kafka file should be sent successfully with 1000 messages", "location": "features/kafka_messaging.feature:237"}, {"keyword": "And", "step_type": "then", "name": "Kafka processing should complete within 60 seconds", "location": "features/kafka_messaging.feature:238"}, {"keyword": "When", "step_type": "when", "name": "I consume 100 messages from Kafka topics \"high-throughput\" and write to file \"output/throughput_chunk1.txt\" line by line", "location": "features/kafka_messaging.feature:241"}, {"keyword": "Then", "step_type": "then", "name": "Kafka should consume 100 messages to file", "location": "features/kafka_messaging.feature:242"}, {"keyword": "And", "step_type": "then", "name": "Kafka processing should complete within 10 seconds", "location": "features/kafka_messaging.feature:243"}, {"keyword": "When", "step_type": "when", "name": "I consume 200 messages from Kafka topics \"high-throughput\" and write to file \"output/throughput_chunk2.txt\" line by line", "location": "features/kafka_messaging.feature:245"}, {"keyword": "Then", "step_type": "then", "name": "Kafka should consume 200 messages to file", "location": "features/kafka_messaging.feature:246"}, {"keyword": "And", "step_type": "then", "name": "Kafka processing should complete within 15 seconds", "location": "features/kafka_messaging.feature:247"}, {"keyword": "When", "step_type": "when", "name": "I export Kafka messages from topics \"high-throughput\" to file \"output/throughput_remaining.json\" in \"json\" format", "location": "features/kafka_messaging.feature:250"}, {"keyword": "Then", "step_type": "then", "name": "Kafka export should be successful with 700 messages", "location": "features/kafka_messaging.feature:251"}, {"keyword": "And", "step_type": "then", "name": "Kafka processing should complete within 30 seconds", "location": "features/kafka_messaging.feature:252"}], "status": "skipped"}]},

{"keyword": "Feature", "name": "MongoDB Database Operations", "tags": [], "location": "features/mongodb.feature:1", "status": "skipped", "description": ["As a test automation engineer", "I want to test MongoDB database operations", "So that I can validate MongoDB connectivity, document operations, and data integrity"], "elements": [{"type": "background", "keyword": "Background", "name": "", "location": "features/mongodb.feature:6", "steps": [{"keyword": "Given", "step_type": "given", "name": "I set the MongoDB configuration section to \"S101_MONGODB\"", "location": "features/mongodb.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I initialize the MongoDB connection", "location": "features/mongodb.feature:8"}]}, {"type": "scenario", "keyword": "Scenario", "name": "Test MongoDB connection and list collections", "tags": ["mongodb", "smoke"], "location": "features/mongodb.feature:11", "steps": [{"keyword": "Given", "step_type": "given", "name": "I set the MongoDB configuration section to \"S101_MONGODB\"", "location": "features/mongodb.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I initialize the MongoDB connection", "location": "features/mongodb.feature:8"}, {"keyword": "When", "step_type": "when", "name": "I list all collections in the database", "location": "features/mongodb.feature:12"}, {"keyword": "Then", "step_type": "then", "name": "the connection should be successful", "location": "features/mongodb.feature:13"}, {"keyword": "And", "step_type": "then", "name": "the collections should include \"test_collection\"", "location": "features/mongodb.feature:14"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Count documents in MongoDB collection", "tags": ["mongodb", "document_count"], "location": "features/mongodb.feature:17", "steps": [{"keyword": "Given", "step_type": "given", "name": "I set the MongoDB configuration section to \"S101_MONGODB\"", "location": "features/mongodb.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I initialize the MongoDB connection", "location": "features/mongodb.feature:8"}, {"keyword": "When", "step_type": "when", "name": "I count documents in collection \"users\"", "location": "features/mongodb.feature:18"}, {"keyword": "Then", "step_type": "then", "name": "the connection should be successful", "location": "features/mongodb.feature:19"}, {"keyword": "And", "step_type": "then", "name": "the \"count\" should be greater than 0", "location": "features/mongodb.feature:20"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Count documents with query filter", "tags": ["mongodb", "document_count", "query"], "location": "features/mongodb.feature:23", "steps": [{"keyword": "Given", "step_type": "given", "name": "I set the MongoDB configuration section to \"S101_MONGODB\"", "location": "features/mongodb.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I initialize the MongoDB connection", "location": "features/mongodb.feature:8"}, {"keyword": "When", "step_type": "when", "name": "I count documents in collection \"users\" with query \"{\"status\": \"active\"}\"", "location": "features/mongodb.feature:24"}, {"keyword": "Then", "step_type": "then", "name": "the connection should be successful", "location": "features/mongodb.feature:25"}, {"keyword": "And", "step_type": "then", "name": "the \"count\" should be greater than 0", "location": "features/mongodb.feature:26"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Query MongoDB collection for specific fields", "tags": ["mongodb", "document_query"], "location": "features/mongodb.feature:29", "steps": [{"keyword": "Given", "step_type": "given", "name": "I set the MongoDB configuration section to \"S101_MONGODB\"", "location": "features/mongodb.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I initialize the MongoDB connection", "location": "features/mongodb.feature:8"}, {"keyword": "When", "step_type": "when", "name": "I query collection \"users\" for all documents with fields \"name, email, status\"", "location": "features/mongodb.feature:30"}, {"keyword": "Then", "step_type": "then", "name": "the connection should be successful", "location": "features/mongodb.feature:31"}, {"keyword": "And", "step_type": "then", "name": "the document should be found", "location": "features/mongodb.feature:32"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Find documents by field value", "tags": ["mongodb", "document_search"], "location": "features/mongodb.feature:35", "steps": [{"keyword": "Given", "step_type": "given", "name": "I set the MongoDB configuration section to \"S101_MONGODB\"", "location": "features/mongodb.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I initialize the MongoDB connection", "location": "features/mongodb.feature:8"}, {"keyword": "When", "step_type": "when", "name": "I find documents in collection \"users\" where \"status\" equals \"active\"", "location": "features/mongodb.feature:36"}, {"keyword": "Then", "step_type": "then", "name": "the connection should be successful", "location": "features/mongodb.feature:37"}, {"keyword": "And", "step_type": "then", "name": "the document should be found", "location": "features/mongodb.feature:38"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Insert test document into MongoDB collection", "tags": ["mongodb", "document_insert"], "location": "features/mongodb.feature:41", "steps": [{"keyword": "Given", "step_type": "given", "name": "I set the MongoDB configuration section to \"S101_MONGODB\"", "location": "features/mongodb.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I initialize the MongoDB connection", "location": "features/mongodb.feature:8"}, {"keyword": "When", "step_type": "when", "name": "I insert a test document in collection \"test_data\"", "location": "features/mongodb.feature:42"}, {"keyword": "Then", "step_type": "then", "name": "the connection should be successful", "location": "features/mongodb.feature:43"}, {"keyword": "And", "step_type": "then", "name": "I retrieve the most recently inserted document", "location": "features/mongodb.feature:44"}, {"keyword": "And", "step_type": "then", "name": "the document should be found", "location": "features/mongodb.feature:45"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Complete document lifecycle - insert, update, retrieve", "tags": ["mongodb", "document_operations"], "location": "features/mongodb.feature:48", "steps": [{"keyword": "Given", "step_type": "given", "name": "I set the MongoDB configuration section to \"S101_MONGODB\"", "location": "features/mongodb.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I initialize the MongoDB connection", "location": "features/mongodb.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "I have a test document in collection \"test_data\"", "location": "features/mongodb.feature:49"}, {"keyword": "When", "step_type": "when", "name": "I update the document with new data", "location": "features/mongodb.feature:50"}, {"keyword": "And", "step_type": "when", "name": "I fetch the previously updated document", "location": "features/mongodb.feature:51"}, {"keyword": "Then", "step_type": "then", "name": "the document should be found", "location": "features/mongodb.feature:52"}, {"keyword": "And", "step_type": "then", "name": "the document should contain the updated data", "location": "features/mongodb.feature:53"}, {"keyword": "When", "step_type": "when", "name": "I perform cleanup of test documents", "location": "features/mongodb.feature:54"}, {"keyword": "Then", "step_type": "then", "name": "I should cleanup the test document successfully", "location": "features/mongodb.feature:55"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Run aggregation pipeline on collection", "tags": ["mongodb", "aggregation"], "location": "features/mongodb.feature:58", "steps": [{"keyword": "Given", "step_type": "given", "name": "I set the MongoDB configuration section to \"S101_MONGODB\"", "location": "features/mongodb.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I initialize the MongoDB connection", "location": "features/mongodb.feature:8"}, {"keyword": "When", "step_type": "when", "name": "I run aggregation pipeline on collection \"users\"", "location": "features/mongodb.feature:59"}, {"keyword": "Then", "step_type": "then", "name": "the connection should be successful", "location": "features/mongodb.feature:60"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Create index on MongoDB collection", "tags": ["mongodb", "index_management"], "location": "features/mongodb.feature:63", "steps": [{"keyword": "Given", "step_type": "given", "name": "I set the MongoDB configuration section to \"S101_MONGODB\"", "location": "features/mongodb.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I initialize the MongoDB connection", "location": "features/mongodb.feature:8"}, {"keyword": "When", "step_type": "when", "name": "I create index on collection \"test_data\" for field \"status\"", "location": "features/mongodb.feature:64"}, {"keyword": "Then", "step_type": "then", "name": "the connection should be successful", "location": "features/mongodb.feature:65"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Collection management operations", "tags": ["mongodb", "collection_management"], "location": "features/mongodb.feature:68", "steps": [{"keyword": "Given", "step_type": "given", "name": "I set the MongoDB configuration section to \"S101_MONGODB\"", "location": "features/mongodb.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I initialize the MongoDB connection", "location": "features/mongodb.feature:8"}, {"keyword": "When", "step_type": "when", "name": "I drop collection \"temp_test_collection\"", "location": "features/mongodb.feature:69"}, {"keyword": "Then", "step_type": "then", "name": "the connection should be successful", "location": "features/mongodb.feature:70"}, {"keyword": "And", "step_type": "then", "name": "the collection \"temp_test_collection\" should be empty", "location": "features/mongodb.feature:71"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Validate document count in collection", "tags": ["mongodb", "document_validation"], "location": "features/mongodb.feature:74", "steps": [{"keyword": "Given", "step_type": "given", "name": "I set the MongoDB configuration section to \"S101_MONGODB\"", "location": "features/mongodb.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I initialize the MongoDB connection", "location": "features/mongodb.feature:8"}, {"keyword": "When", "step_type": "when", "name": "I count documents in collection \"users\"", "location": "features/mongodb.feature:75"}, {"keyword": "Then", "step_type": "then", "name": "the collection \"users\" should have 5 documents", "location": "features/mongodb.feature:76"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Performance test - bulk document operations", "tags": ["mongodb", "performance"], "location": "features/mongodb.feature:79", "steps": [{"keyword": "Given", "step_type": "given", "name": "I set the MongoDB configuration section to \"S101_MONGODB\"", "location": "features/mongodb.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I initialize the MongoDB connection", "location": "features/mongodb.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "I have a test document in collection \"performance_test\"", "location": "features/mongodb.feature:80"}, {"keyword": "When", "step_type": "when", "name": "I insert a test document in collection \"performance_test\"", "location": "features/mongodb.feature:81"}, {"keyword": "And", "step_type": "when", "name": "I insert a test document in collection \"performance_test\"", "location": "features/mongodb.feature:82"}, {"keyword": "And", "step_type": "when", "name": "I count documents in collection \"performance_test\"", "location": "features/mongodb.feature:83"}, {"keyword": "Then", "step_type": "then", "name": "the collection \"performance_test\" should have 3 documents", "location": "features/mongodb.feature:84"}, {"keyword": "When", "step_type": "when", "name": "I perform cleanup of test documents", "location": "features/mongodb.feature:85"}, {"keyword": "Then", "step_type": "then", "name": "I should cleanup the test document successfully", "location": "features/mongodb.feature:86"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test data migration cleanup", "tags": ["mongodb", "data_migration"], "location": "features/mongodb.feature:89", "steps": [{"keyword": "Given", "step_type": "given", "name": "I set the MongoDB configuration section to \"S101_MONGODB\"", "location": "features/mongodb.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I initialize the MongoDB connection", "location": "features/mongodb.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "I have a test document in collection \"migration_test\"", "location": "features/mongodb.feature:90"}, {"keyword": "When", "step_type": "when", "name": "I update the document with new data", "location": "features/mongodb.feature:91"}, {"keyword": "And", "step_type": "when", "name": "I retrieve the most recently inserted document", "location": "features/mongodb.feature:92"}, {"keyword": "Then", "step_type": "then", "name": "the document should be found", "location": "features/mongodb.feature:93"}, {"keyword": "And", "step_type": "then", "name": "I should cleanup the migrated test data successfully", "location": "features/mongodb.feature:94"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test legacy step definitions (backward compatibility)", "tags": ["mongodb", "legacy_support"], "location": "features/mongodb.feature:97", "steps": [{"keyword": "Given", "step_type": "given", "name": "I set the MongoDB configuration section to \"S101_MONGODB\"", "location": "features/mongodb.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I initialize the MongoDB connection", "location": "features/mongodb.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "I have a test document in collection \"legacy_test\"", "location": "features/mongodb.feature:98"}, {"keyword": "When", "step_type": "when", "name": "I query for the inserted document", "location": "features/mongodb.feature:99"}, {"keyword": "And", "step_type": "when", "name": "I update the document with new data", "location": "features/mongodb.feature:100"}, {"keyword": "And", "step_type": "when", "name": "I query for the updated document", "location": "features/mongodb.feature:101"}, {"keyword": "Then", "step_type": "then", "name": "the document should be found", "location": "features/mongodb.feature:102"}, {"keyword": "And", "step_type": "then", "name": "the document should contain the updated data", "location": "features/mongodb.feature:103"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test error handling with invalid collection", "tags": ["mongodb", "error_handling"], "location": "features/mongodb.feature:106", "steps": [{"keyword": "Given", "step_type": "given", "name": "I set the MongoDB configuration section to \"S101_MONGODB\"", "location": "features/mongodb.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I initialize the MongoDB connection", "location": "features/mongodb.feature:8"}, {"keyword": "When", "step_type": "when", "name": "I count documents in collection \"non_existent_collection\"", "location": "features/mongodb.feature:107"}, {"keyword": "Then", "step_type": "then", "name": "the connection should be successful", "location": "features/mongodb.feature:108"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test different field value types", "tags": ["mongodb", "field_types"], "location": "features/mongodb.feature:111", "steps": [{"keyword": "Given", "step_type": "given", "name": "I set the MongoDB configuration section to \"S101_MONGODB\"", "location": "features/mongodb.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I initialize the MongoDB connection", "location": "features/mongodb.feature:8"}, {"keyword": "When", "step_type": "when", "name": "I find documents in collection \"users\" where \"age\" equals \"25\"", "location": "features/mongodb.feature:112"}, {"keyword": "And", "step_type": "when", "name": "I find documents in collection \"users\" where \"active\" equals \"true\"", "location": "features/mongodb.feature:113"}, {"keyword": "And", "step_type": "when", "name": "I find documents in collection \"users\" where \"score\" equals \"85.5\"", "location": "features/mongodb.feature:114"}, {"keyword": "Then", "step_type": "then", "name": "the connection should be successful", "location": "features/mongodb.feature:115"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Comprehensive MongoDB operations test", "tags": ["mongodb", "comprehensive"], "location": "features/mongodb.feature:118", "steps": [{"keyword": "Given", "step_type": "given", "name": "I set the MongoDB configuration section to \"S101_MONGODB\"", "location": "features/mongodb.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I initialize the MongoDB connection", "location": "features/mongodb.feature:8"}, {"keyword": "When", "step_type": "when", "name": "I list all collections in the database", "location": "features/mongodb.feature:120"}, {"keyword": "Then", "step_type": "then", "name": "the connection should be successful", "location": "features/mongodb.feature:121"}, {"keyword": "When", "step_type": "when", "name": "I insert a test document in collection \"comprehensive_test\"", "location": "features/mongodb.feature:124"}, {"keyword": "And", "step_type": "when", "name": "I retrieve the most recently inserted document", "location": "features/mongodb.feature:125"}, {"keyword": "Then", "step_type": "then", "name": "the document should be found", "location": "features/mongodb.feature:126"}, {"keyword": "When", "step_type": "when", "name": "I count documents in collection \"comprehensive_test\"", "location": "features/mongodb.feature:129"}, {"keyword": "Then", "step_type": "then", "name": "the \"count\" should be greater than 0", "location": "features/mongodb.feature:130"}, {"keyword": "When", "step_type": "when", "name": "I query collection \"comprehensive_test\" for all documents with fields \"name, status\"", "location": "features/mongodb.feature:133"}, {"keyword": "Then", "step_type": "then", "name": "the document should be found", "location": "features/mongodb.feature:134"}, {"keyword": "When", "step_type": "when", "name": "I run aggregation pipeline on collection \"comprehensive_test\"", "location": "features/mongodb.feature:137"}, {"keyword": "Then", "step_type": "then", "name": "the connection should be successful", "location": "features/mongodb.feature:138"}, {"keyword": "When", "step_type": "when", "name": "I create index on collection \"comprehensive_test\" for field \"name\"", "location": "features/mongodb.feature:141"}, {"keyword": "Then", "step_type": "then", "name": "the connection should be successful", "location": "features/mongodb.feature:142"}, {"keyword": "When", "step_type": "when", "name": "I perform cleanup of test documents", "location": "features/mongodb.feature:145"}, {"keyword": "Then", "step_type": "then", "name": "I should cleanup the test document successfully", "location": "features/mongodb.feature:146"}], "status": "skipped"}]},

{"keyword": "Feature", "name": "MQ Message-Style Operations", "tags": [], "location": "features/mq_messaging.feature:1", "status": "skipped", "description": ["As a test automation engineer", "I want to use IBM MQ for message-style operations", "So that I can send, retrieve, and process data as messages in MQ queues"], "elements": [{"type": "background", "keyword": "Background", "name": "", "location": "features/mq_messaging.feature:6", "steps": [{"keyword": "Given", "step_type": "given", "name": "MQ connection is configured", "location": "features/mq_messaging.feature:7"}]}, {"type": "scenario", "keyword": "Scenario", "name": "Send file to MQ line by line and retrieve as messages", "tags": ["mq", "messaging", "line_by_line"], "location": "features/mq_messaging.feature:10", "steps": [{"keyword": "Given", "step_type": "given", "name": "MQ connection is configured", "location": "features/mq_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I send file \"test_data/sample_messages.txt\" to MQ line by line", "location": "features/mq_messaging.feature:11"}, {"keyword": "Then", "step_type": "then", "name": "MQ file should be sent successfully with 5 messages", "location": "features/mq_messaging.feature:12"}, {"keyword": "When", "step_type": "when", "name": "I retrieve MQ messages and write to file \"output/retrieved_mq_messages.txt\" line by line", "location": "features/mq_messaging.feature:13"}, {"keyword": "Then", "step_type": "then", "name": "MQ message retrieval should be successful", "location": "features/mq_messaging.feature:14"}, {"keyword": "And", "step_type": "then", "name": "MQ should retrieve 5 messages to file", "location": "features/mq_messaging.feature:15"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Send file to MQ as whole file and retrieve as single message", "tags": ["mq", "messaging", "whole_file"], "location": "features/mq_messaging.feature:18", "steps": [{"keyword": "Given", "step_type": "given", "name": "MQ connection is configured", "location": "features/mq_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I send file \"test_data/sample_document.txt\" to MQ as whole file", "location": "features/mq_messaging.feature:19"}, {"keyword": "Then", "step_type": "then", "name": "MQ file should be sent successfully with 1 messages", "location": "features/mq_messaging.feature:20"}, {"keyword": "When", "step_type": "when", "name": "I retrieve MQ messages and write to file \"output/retrieved_mq_document.txt\" as whole file", "location": "features/mq_messaging.feature:21"}, {"keyword": "Then", "step_type": "then", "name": "MQ message retrieval should be successful", "location": "features/mq_messaging.feature:22"}, {"keyword": "And", "step_type": "then", "name": "MQ should retrieve 1 messages to file", "location": "features/mq_messaging.feature:23"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Post and retrieve single message to/from MQ", "tags": ["mq", "messaging", "single_message"], "location": "features/mq_messaging.feature:26", "steps": [{"keyword": "Given", "step_type": "given", "name": "MQ connection is configured", "location": "features/mq_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I post custom MQ message \"Hello MQ Message World!\"", "location": "features/mq_messaging.feature:27"}, {"keyword": "Then", "step_type": "then", "name": "MQ custom message should be posted successfully", "location": "features/mq_messaging.feature:28"}, {"keyword": "When", "step_type": "when", "name": "I retrieve MQ messages and write to file \"output/single_mq_message.txt\" line by line", "location": "features/mq_messaging.feature:29"}, {"keyword": "Then", "step_type": "then", "name": "MQ message retrieval should be successful", "location": "features/mq_messaging.feature:30"}, {"keyword": "And", "step_type": "then", "name": "MQ should retrieve 1 messages to file", "location": "features/mq_messaging.feature:31"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Retrieve limited number of MQ messages", "tags": ["mq", "messaging", "limited_retrieval"], "location": "features/mq_messaging.feature:34", "steps": [{"keyword": "Given", "step_type": "given", "name": "MQ connection is configured", "location": "features/mq_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I post custom MQ message \"Message 1\"", "location": "features/mq_messaging.feature:36"}, {"keyword": "And", "step_type": "when", "name": "I post custom MQ message \"Message 2\"", "location": "features/mq_messaging.feature:37"}, {"keyword": "And", "step_type": "when", "name": "I post custom MQ message \"Message 3\"", "location": "features/mq_messaging.feature:38"}, {"keyword": "And", "step_type": "when", "name": "I post custom MQ message \"Message 4\"", "location": "features/mq_messaging.feature:39"}, {"keyword": "And", "step_type": "when", "name": "I post custom MQ message \"Message 5\"", "location": "features/mq_messaging.feature:40"}, {"keyword": "Then", "step_type": "then", "name": "MQ custom message should be posted successfully", "location": "features/mq_messaging.feature:41"}, {"keyword": "When", "step_type": "when", "name": "I retrieve 3 MQ messages and write to file \"output/limited_mq_messages.txt\" line by line", "location": "features/mq_messaging.feature:43"}, {"keyword": "Then", "step_type": "then", "name": "MQ message retrieval should be successful", "location": "features/mq_messaging.feature:44"}, {"keyword": "And", "step_type": "then", "name": "MQ should retrieve 3 messages to file", "location": "features/mq_messaging.feature:45"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Export MQ messages in different formats", "tags": ["mq", "messaging", "export_formats"], "location": "features/mq_messaging.feature:48", "steps": [{"keyword": "Given", "step_type": "given", "name": "MQ connection is configured", "location": "features/mq_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I post custom MQ message \"Test message 1\"", "location": "features/mq_messaging.feature:50"}, {"keyword": "And", "step_type": "when", "name": "I post custom MQ message \"Test message 2\"", "location": "features/mq_messaging.feature:51"}, {"keyword": "And", "step_type": "when", "name": "I post custom MQ message \"Test message 3\"", "location": "features/mq_messaging.feature:52"}, {"keyword": "When", "step_type": "when", "name": "I export MQ messages to file \"output/mq_messages.txt\" in \"txt\" format", "location": "features/mq_messaging.feature:54"}, {"keyword": "Then", "step_type": "then", "name": "MQ export should be successful with 3 messages", "location": "features/mq_messaging.feature:55"}, {"keyword": "When", "step_type": "when", "name": "I export MQ messages to file \"output/mq_messages.csv\" in \"csv\" format", "location": "features/mq_messaging.feature:56"}, {"keyword": "Then", "step_type": "then", "name": "MQ export should be successful with 3 messages", "location": "features/mq_messaging.feature:57"}, {"keyword": "When", "step_type": "when", "name": "I export MQ messages to file \"output/mq_messages.json\" in \"json\" format", "location": "features/mq_messaging.feature:58"}, {"keyword": "Then", "step_type": "then", "name": "MQ export should be successful with 3 messages", "location": "features/mq_messaging.feature:59"}, {"keyword": "When", "step_type": "when", "name": "I export MQ messages to file \"output/mq_messages.xml\" in \"xml\" format", "location": "features/mq_messaging.feature:60"}, {"keyword": "Then", "step_type": "then", "name": "MQ export should be successful with 3 messages", "location": "features/mq_messaging.feature:61"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "MQ queue management operations", "tags": ["mq", "messaging", "queue_management"], "location": "features/mq_messaging.feature:64", "steps": [{"keyword": "Given", "step_type": "given", "name": "MQ connection is configured", "location": "features/mq_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I get MQ queue depth", "location": "features/mq_messaging.feature:66"}, {"keyword": "Then", "step_type": "then", "name": "MQ queue depth should be 0", "location": "features/mq_messaging.feature:67"}, {"keyword": "When", "step_type": "when", "name": "I post custom MQ message \"Queue management test 1\"", "location": "features/mq_messaging.feature:69"}, {"keyword": "And", "step_type": "when", "name": "I post custom MQ message \"Queue management test 2\"", "location": "features/mq_messaging.feature:70"}, {"keyword": "And", "step_type": "when", "name": "I post custom MQ message \"Queue management test 3\"", "location": "features/mq_messaging.feature:71"}, {"keyword": "When", "step_type": "when", "name": "I get MQ queue depth", "location": "features/mq_messaging.feature:73"}, {"keyword": "Then", "step_type": "then", "name": "MQ queue depth should be 3", "location": "features/mq_messaging.feature:74"}, {"keyword": "When", "step_type": "when", "name": "I drain MQ queue to file \"output/drained_mq_messages.txt\"", "location": "features/mq_messaging.feature:76"}, {"keyword": "Then", "step_type": "then", "name": "MQ queue should be drained successfully", "location": "features/mq_messaging.feature:77"}, {"keyword": "When", "step_type": "when", "name": "I get MQ queue depth", "location": "features/mq_messaging.feature:79"}, {"keyword": "Then", "step_type": "then", "name": "MQ queue depth should be 0", "location": "features/mq_messaging.feature:80"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Performance test for MQ message operations", "tags": ["mq", "messaging", "performance"], "location": "features/mq_messaging.feature:83", "steps": [{"keyword": "Given", "step_type": "given", "name": "MQ connection is configured", "location": "features/mq_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I send file \"test_data/large_message_file.txt\" to MQ line by line", "location": "features/mq_messaging.feature:84"}, {"keyword": "Then", "step_type": "then", "name": "MQ file should be sent successfully with 100 messages", "location": "features/mq_messaging.feature:85"}, {"keyword": "And", "step_type": "then", "name": "MQ processing should complete within 30 seconds", "location": "features/mq_messaging.feature:86"}, {"keyword": "When", "step_type": "when", "name": "I retrieve MQ messages and write to file \"output/performance_mq_output.txt\" line by line", "location": "features/mq_messaging.feature:87"}, {"keyword": "Then", "step_type": "then", "name": "MQ message retrieval should be successful", "location": "features/mq_messaging.feature:88"}, {"keyword": "And", "step_type": "then", "name": "MQ should retrieve 100 messages to file", "location": "features/mq_messaging.feature:89"}, {"keyword": "And", "step_type": "then", "name": "MQ processing should complete within 20 seconds", "location": "features/mq_messaging.feature:90"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Mixed MQ message operations workflow", "tags": ["mq", "messaging", "mixed_operations"], "location": "features/mq_messaging.feature:93", "steps": [{"keyword": "Given", "step_type": "given", "name": "MQ connection is configured", "location": "features/mq_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I send file \"test_data/json_messages.txt\" to MQ line by line", "location": "features/mq_messaging.feature:95"}, {"keyword": "Then", "step_type": "then", "name": "MQ file should be sent successfully with 10 messages", "location": "features/mq_messaging.feature:96"}, {"keyword": "When", "step_type": "when", "name": "I send file \"test_data/xml_document.xml\" to MQ as whole file", "location": "features/mq_messaging.feature:99"}, {"keyword": "Then", "step_type": "then", "name": "MQ file should be sent successfully with 1 messages", "location": "features/mq_messaging.feature:100"}, {"keyword": "When", "step_type": "when", "name": "I post custom MQ message \"Individual message 1\"", "location": "features/mq_messaging.feature:103"}, {"keyword": "And", "step_type": "when", "name": "I post custom MQ message \"Individual message 2\"", "location": "features/mq_messaging.feature:104"}, {"keyword": "Then", "step_type": "then", "name": "MQ custom message should be posted successfully", "location": "features/mq_messaging.feature:105"}, {"keyword": "When", "step_type": "when", "name": "I get MQ queue depth", "location": "features/mq_messaging.feature:108"}, {"keyword": "Then", "step_type": "then", "name": "MQ queue depth should be 13", "location": "features/mq_messaging.feature:109"}, {"keyword": "When", "step_type": "when", "name": "I export MQ messages to file \"output/all_mq_messages.json\" in \"json\" format", "location": "features/mq_messaging.feature:112"}, {"keyword": "Then", "step_type": "then", "name": "MQ export should be successful with 13 messages", "location": "features/mq_messaging.feature:113"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Error handling for MQ message operations", "tags": ["mq", "messaging", "error_handling"], "location": "features/mq_messaging.feature:116", "steps": [{"keyword": "Given", "step_type": "given", "name": "MQ connection is configured", "location": "features/mq_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I retrieve MQ messages and write to file \"output/empty_mq_result.txt\" line by line", "location": "features/mq_messaging.feature:118"}, {"keyword": "Then", "step_type": "then", "name": "MQ message retrieval should be successful", "location": "features/mq_messaging.feature:119"}, {"keyword": "And", "step_type": "then", "name": "MQ should retrieve 0 messages to file", "location": "features/mq_messaging.feature:120"}, {"keyword": "When", "step_type": "when", "name": "I get MQ queue depth", "location": "features/mq_messaging.feature:123"}, {"keyword": "Then", "step_type": "then", "name": "MQ queue depth should be 0", "location": "features/mq_messaging.feature:124"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Validate MQ message content integrity", "tags": ["mq", "messaging", "content_validation"], "location": "features/mq_messaging.feature:127", "steps": [{"keyword": "Given", "step_type": "given", "name": "MQ connection is configured", "location": "features/mq_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I post custom MQ message \"Line 1: Important MQ data\"", "location": "features/mq_messaging.feature:129"}, {"keyword": "And", "step_type": "when", "name": "I post custom MQ message \"Line 2: More important MQ data\"", "location": "features/mq_messaging.feature:130"}, {"keyword": "And", "step_type": "when", "name": "I post custom MQ message \"Line 3: Final MQ data\"", "location": "features/mq_messaging.feature:131"}, {"keyword": "Then", "step_type": "then", "name": "MQ custom message should be posted successfully", "location": "features/mq_messaging.feature:132"}, {"keyword": "When", "step_type": "when", "name": "I retrieve MQ messages and write to file \"output/validated_mq_messages.txt\" line by line", "location": "features/mq_messaging.feature:135"}, {"keyword": "Then", "step_type": "then", "name": "MQ message retrieval should be successful", "location": "features/mq_messaging.feature:136"}, {"keyword": "And", "step_type": "then", "name": "MQ should retrieve 3 messages to file", "location": "features/mq_messaging.feature:137"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "MQ batch message processing", "tags": ["mq", "messaging", "batch_processing"], "location": "features/mq_messaging.feature:140", "steps": [{"keyword": "Given", "step_type": "given", "name": "MQ connection is configured", "location": "features/mq_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I send file \"test_data/batch_messages.txt\" to MQ line by line", "location": "features/mq_messaging.feature:142"}, {"keyword": "Then", "step_type": "then", "name": "MQ file should be sent successfully with 50 messages", "location": "features/mq_messaging.feature:143"}, {"keyword": "When", "step_type": "when", "name": "I retrieve 10 MQ messages and write to file \"output/batch1_mq_messages.txt\" line by line", "location": "features/mq_messaging.feature:146"}, {"keyword": "Then", "step_type": "then", "name": "MQ should retrieve 10 messages to file", "location": "features/mq_messaging.feature:147"}, {"keyword": "When", "step_type": "when", "name": "I retrieve 15 MQ messages and write to file \"output/batch2_mq_messages.txt\" line by line", "location": "features/mq_messaging.feature:149"}, {"keyword": "Then", "step_type": "then", "name": "MQ should retrieve 15 messages to file", "location": "features/mq_messaging.feature:150"}, {"keyword": "When", "step_type": "when", "name": "I get MQ queue depth", "location": "features/mq_messaging.feature:153"}, {"keyword": "Then", "step_type": "then", "name": "MQ queue depth should be 25", "location": "features/mq_messaging.feature:154"}, {"keyword": "When", "step_type": "when", "name": "I drain MQ queue to file \"output/remaining_mq_messages.txt\"", "location": "features/mq_messaging.feature:157"}, {"keyword": "Then", "step_type": "then", "name": "MQ queue should be drained successfully", "location": "features/mq_messaging.feature:158"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test legacy MQ step compatibility", "tags": ["mq", "messaging", "legacy_compatibility"], "location": "features/mq_messaging.feature:161", "steps": [{"keyword": "Given", "step_type": "given", "name": "MQ connection is configured", "location": "features/mq_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I post message from \"test_data/sample_file.txt\" as single message", "location": "features/mq_messaging.feature:163"}, {"keyword": "Then", "step_type": "then", "name": "message should be posted successfully", "location": "features/mq_messaging.feature:164"}, {"keyword": "When", "step_type": "when", "name": "I post message from \"test_data/multiline_file.txt\" line by line", "location": "features/mq_messaging.feature:166"}, {"keyword": "Then", "step_type": "then", "name": "all lines should be posted successfully", "location": "features/mq_messaging.feature:167"}, {"keyword": "When", "step_type": "when", "name": "I get MQ queue depth", "location": "features/mq_messaging.feature:170"}, {"keyword": "Then", "step_type": "then", "name": "MQ queue depth should be 6", "location": "features/mq_messaging.feature:171"}, {"keyword": "When", "step_type": "when", "name": "I export MQ messages to file \"output/legacy_compatibility.json\" in \"json\" format", "location": "features/mq_messaging.feature:174"}, {"keyword": "Then", "step_type": "then", "name": "MQ export should be successful with 6 messages", "location": "features/mq_messaging.feature:175"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Comprehensive MQ operations test", "tags": ["mq", "messaging", "comprehensive"], "location": "features/mq_messaging.feature:178", "steps": [{"keyword": "Given", "step_type": "given", "name": "MQ connection is configured", "location": "features/mq_messaging.feature:7"}, {"keyword": "When", "step_type": "when", "name": "I post custom MQ message \"Comprehensive test start\"", "location": "features/mq_messaging.feature:182"}, {"keyword": "Then", "step_type": "then", "name": "MQ custom message should be posted successfully", "location": "features/mq_messaging.feature:183"}, {"keyword": "When", "step_type": "when", "name": "I send file \"test_data/comprehensive_test.txt\" to MQ line by line", "location": "features/mq_messaging.feature:186"}, {"keyword": "Then", "step_type": "then", "name": "MQ file should be sent successfully with 20 messages", "location": "features/mq_messaging.feature:187"}, {"keyword": "When", "step_type": "when", "name": "I send file \"test_data/summary.txt\" to MQ as whole file", "location": "features/mq_messaging.feature:189"}, {"keyword": "Then", "step_type": "then", "name": "MQ file should be sent successfully with 1 messages", "location": "features/mq_messaging.feature:190"}, {"keyword": "When", "step_type": "when", "name": "I get MQ queue depth", "location": "features/mq_messaging.feature:193"}, {"keyword": "Then", "step_type": "then", "name": "MQ queue depth should be 22", "location": "features/mq_messaging.feature:194"}, {"keyword": "When", "step_type": "when", "name": "I retrieve 5 MQ messages and write to file \"output/comp_first_batch.txt\" line by line", "location": "features/mq_messaging.feature:197"}, {"keyword": "Then", "step_type": "then", "name": "MQ should retrieve 5 messages to file", "location": "features/mq_messaging.feature:198"}, {"keyword": "When", "step_type": "when", "name": "I export MQ messages to file \"output/comp_remaining.csv\" in \"csv\" format", "location": "features/mq_messaging.feature:201"}, {"keyword": "Then", "step_type": "then", "name": "MQ export should be successful with 17 messages", "location": "features/mq_messaging.feature:202"}, {"keyword": "When", "step_type": "when", "name": "I drain MQ queue to file \"output/comp_final_drain.txt\"", "location": "features/mq_messaging.feature:205"}, {"keyword": "Then", "step_type": "then", "name": "MQ queue should be drained successfully", "location": "features/mq_messaging.feature:206"}, {"keyword": "When", "step_type": "when", "name": "I get MQ queue depth", "location": "features/mq_messaging.feature:209"}, {"keyword": "Then", "step_type": "then", "name": "MQ queue depth should be 0", "location": "features/mq_messaging.feature:210"}], "status": "skipped"}]},

{"keyword": "Feature", "name": "S3 Message-Style Operations", "tags": [], "location": "features/s3_messaging.feature:1", "status": "skipped", "description": ["As a test automation engineer", "I want to use S3 for message-style operations", "So that I can store, retrieve, and process data as messages in S3 objects"], "elements": [{"type": "background", "keyword": "Background", "name": "", "location": "features/s3_messaging.feature:6", "steps": [{"keyword": "Given", "step_type": "given", "name": "AWS S3 connection is configured", "location": "features/s3_messaging.feature:7"}, {"keyword": "And", "step_type": "given", "name": "S3 bucket is set to \"test-messaging-bucket\"", "location": "features/s3_messaging.feature:8"}, {"keyword": "And", "step_type": "given", "name": "S3 prefix is set to \"messages/test\"", "location": "features/s3_messaging.feature:9"}]}, {"type": "scenario", "keyword": "Scenario", "name": "Send file to S3 line by line and retrieve as messages", "tags": ["s3", "messaging", "line_by_line"], "location": "features/s3_messaging.feature:12", "steps": [{"keyword": "Given", "step_type": "given", "name": "AWS S3 connection is configured", "location": "features/s3_messaging.feature:7"}, {"keyword": "And", "step_type": "given", "name": "S3 bucket is set to \"test-messaging-bucket\"", "location": "features/s3_messaging.feature:8"}, {"keyword": "And", "step_type": "given", "name": "S3 prefix is set to \"messages/test\"", "location": "features/s3_messaging.feature:9"}, {"keyword": "When", "step_type": "when", "name": "I send file \"test_data/sample_messages.txt\" to S3 prefix \"messages/upload\" line by line", "location": "features/s3_messaging.feature:13"}, {"keyword": "Then", "step_type": "then", "name": "S3 file upload should be successful with 5 objects", "location": "features/s3_messaging.feature:14"}, {"keyword": "When", "step_type": "when", "name": "I retrieve S3 objects from prefix \"messages/upload\" and write to file \"output/retrieved_messages.txt\" line by line", "location": "features/s3_messaging.feature:15"}, {"keyword": "Then", "step_type": "then", "name": "S3 message retrieval should be successful", "location": "features/s3_messaging.feature:16"}, {"keyword": "And", "step_type": "then", "name": "S3 should retrieve 5 messages to file", "location": "features/s3_messaging.feature:17"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Send file to S3 as whole file and retrieve as single message", "tags": ["s3", "messaging", "whole_file"], "location": "features/s3_messaging.feature:20", "steps": [{"keyword": "Given", "step_type": "given", "name": "AWS S3 connection is configured", "location": "features/s3_messaging.feature:7"}, {"keyword": "And", "step_type": "given", "name": "S3 bucket is set to \"test-messaging-bucket\"", "location": "features/s3_messaging.feature:8"}, {"keyword": "And", "step_type": "given", "name": "S3 prefix is set to \"messages/test\"", "location": "features/s3_messaging.feature:9"}, {"keyword": "When", "step_type": "when", "name": "I send file \"test_data/sample_document.txt\" to S3 prefix \"messages/documents\" as whole file", "location": "features/s3_messaging.feature:21"}, {"keyword": "Then", "step_type": "then", "name": "S3 file upload should be successful with 1 objects", "location": "features/s3_messaging.feature:22"}, {"keyword": "When", "step_type": "when", "name": "I retrieve S3 objects from prefix \"messages/documents\" and write to file \"output/retrieved_document.txt\" as whole file", "location": "features/s3_messaging.feature:23"}, {"keyword": "Then", "step_type": "then", "name": "S3 message retrieval should be successful", "location": "features/s3_messaging.feature:24"}, {"keyword": "And", "step_type": "then", "name": "S3 should retrieve 1 messages to file", "location": "features/s3_messaging.feature:25"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Post and retrieve single message to/from S3", "tags": ["s3", "messaging", "single_message"], "location": "features/s3_messaging.feature:28", "steps": [{"keyword": "Given", "step_type": "given", "name": "AWS S3 connection is configured", "location": "features/s3_messaging.feature:7"}, {"keyword": "And", "step_type": "given", "name": "S3 bucket is set to \"test-messaging-bucket\"", "location": "features/s3_messaging.feature:8"}, {"keyword": "And", "step_type": "given", "name": "S3 prefix is set to \"messages/test\"", "location": "features/s3_messaging.feature:9"}, {"keyword": "When", "step_type": "when", "name": "I post message \"Hello S3 Message World!\" to S3 as \"test_message.txt\"", "location": "features/s3_messaging.feature:29"}, {"keyword": "Then", "step_type": "then", "name": "S3 message should be posted successfully", "location": "features/s3_messaging.feature:30"}, {"keyword": "When", "step_type": "when", "name": "I get S3 object content from \"test_message.txt\"", "location": "features/s3_messaging.feature:31"}, {"keyword": "Then", "step_type": "then", "name": "S3 object content should be retrieved successfully", "location": "features/s3_messaging.feature:32"}, {"keyword": "And", "step_type": "then", "name": "S3 object content should contain \"Hello S3 Message World!\"", "location": "features/s3_messaging.feature:33"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Retrieve limited number of S3 objects as messages", "tags": ["s3", "messaging", "limited_retrieval"], "location": "features/s3_messaging.feature:36", "steps": [{"keyword": "Given", "step_type": "given", "name": "AWS S3 connection is configured", "location": "features/s3_messaging.feature:7"}, {"keyword": "And", "step_type": "given", "name": "S3 bucket is set to \"test-messaging-bucket\"", "location": "features/s3_messaging.feature:8"}, {"keyword": "And", "step_type": "given", "name": "S3 prefix is set to \"messages/test\"", "location": "features/s3_messaging.feature:9"}, {"keyword": "When", "step_type": "when", "name": "I post message \"Message 1\" to S3 as \"batch/msg_001.txt\"", "location": "features/s3_messaging.feature:38"}, {"keyword": "And", "step_type": "when", "name": "I post message \"Message 2\" to S3 as \"batch/msg_002.txt\"", "location": "features/s3_messaging.feature:39"}, {"keyword": "And", "step_type": "when", "name": "I post message \"Message 3\" to S3 as \"batch/msg_003.txt\"", "location": "features/s3_messaging.feature:40"}, {"keyword": "And", "step_type": "when", "name": "I post message \"Message 4\" to S3 as \"batch/msg_004.txt\"", "location": "features/s3_messaging.feature:41"}, {"keyword": "And", "step_type": "when", "name": "I post message \"Message 5\" to S3 as \"batch/msg_005.txt\"", "location": "features/s3_messaging.feature:42"}, {"keyword": "When", "step_type": "when", "name": "I retrieve 3 S3 objects from prefix \"batch\" and write to file \"output/limited_messages.txt\" line by line", "location": "features/s3_messaging.feature:44"}, {"keyword": "Then", "step_type": "then", "name": "S3 message retrieval should be successful", "location": "features/s3_messaging.feature:45"}, {"keyword": "And", "step_type": "then", "name": "S3 should retrieve 3 messages to file", "location": "features/s3_messaging.feature:46"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Performance test for S3 message operations", "tags": ["s3", "messaging", "performance"], "location": "features/s3_messaging.feature:49", "steps": [{"keyword": "Given", "step_type": "given", "name": "AWS S3 connection is configured", "location": "features/s3_messaging.feature:7"}, {"keyword": "And", "step_type": "given", "name": "S3 bucket is set to \"test-messaging-bucket\"", "location": "features/s3_messaging.feature:8"}, {"keyword": "And", "step_type": "given", "name": "S3 prefix is set to \"messages/test\"", "location": "features/s3_messaging.feature:9"}, {"keyword": "When", "step_type": "when", "name": "I send file \"test_data/large_message_file.txt\" to S3 prefix \"performance/test\" line by line", "location": "features/s3_messaging.feature:50"}, {"keyword": "Then", "step_type": "then", "name": "S3 file upload should be successful with 100 objects", "location": "features/s3_messaging.feature:51"}, {"keyword": "And", "step_type": "then", "name": "S3 message processing should complete within 30 seconds", "location": "features/s3_messaging.feature:52"}, {"keyword": "When", "step_type": "when", "name": "I retrieve S3 objects from prefix \"performance/test\" and write to file \"output/performance_output.txt\" line by line", "location": "features/s3_messaging.feature:53"}, {"keyword": "Then", "step_type": "then", "name": "S3 message retrieval should be successful", "location": "features/s3_messaging.feature:54"}, {"keyword": "And", "step_type": "then", "name": "S3 should retrieve 100 messages to file", "location": "features/s3_messaging.feature:55"}, {"keyword": "And", "step_type": "then", "name": "S3 message processing should complete within 20 seconds", "location": "features/s3_messaging.feature:56"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Mixed S3 message operations workflow", "tags": ["s3", "messaging", "mixed_operations"], "location": "features/s3_messaging.feature:59", "steps": [{"keyword": "Given", "step_type": "given", "name": "AWS S3 connection is configured", "location": "features/s3_messaging.feature:7"}, {"keyword": "And", "step_type": "given", "name": "S3 bucket is set to \"test-messaging-bucket\"", "location": "features/s3_messaging.feature:8"}, {"keyword": "And", "step_type": "given", "name": "S3 prefix is set to \"messages/test\"", "location": "features/s3_messaging.feature:9"}, {"keyword": "When", "step_type": "when", "name": "I send file \"test_data/json_messages.txt\" to S3 prefix \"workflow/json\" line by line", "location": "features/s3_messaging.feature:61"}, {"keyword": "Then", "step_type": "then", "name": "S3 file upload should be successful with 10 objects", "location": "features/s3_messaging.feature:62"}, {"keyword": "When", "step_type": "when", "name": "I send file \"test_data/xml_document.xml\" to S3 prefix \"workflow/xml\" as whole file", "location": "features/s3_messaging.feature:65"}, {"keyword": "Then", "step_type": "then", "name": "S3 file upload should be successful with 1 objects", "location": "features/s3_messaging.feature:66"}, {"keyword": "When", "step_type": "when", "name": "I post message \"{\"type\": \"notification\", \"message\": \"Process completed\"}\" to S3 as \"workflow/status/notification.json\"", "location": "features/s3_messaging.feature:69"}, {"keyword": "Then", "step_type": "then", "name": "S3 message should be posted successfully", "location": "features/s3_messaging.feature:70"}, {"keyword": "When", "step_type": "when", "name": "I retrieve S3 objects from prefix \"workflow\" and write to file \"output/all_workflow_messages.txt\" line by line", "location": "features/s3_messaging.feature:73"}, {"keyword": "Then", "step_type": "then", "name": "S3 message retrieval should be successful", "location": "features/s3_messaging.feature:74"}, {"keyword": "When", "step_type": "when", "name": "I get S3 object content from \"workflow/status/notification.json\"", "location": "features/s3_messaging.feature:77"}, {"keyword": "Then", "step_type": "then", "name": "S3 object content should contain \"Process completed\"", "location": "features/s3_messaging.feature:78"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Error handling for S3 message operations", "tags": ["s3", "messaging", "error_handling"], "location": "features/s3_messaging.feature:81", "steps": [{"keyword": "Given", "step_type": "given", "name": "AWS S3 connection is configured", "location": "features/s3_messaging.feature:7"}, {"keyword": "And", "step_type": "given", "name": "S3 bucket is set to \"test-messaging-bucket\"", "location": "features/s3_messaging.feature:8"}, {"keyword": "And", "step_type": "given", "name": "S3 prefix is set to \"messages/test\"", "location": "features/s3_messaging.feature:9"}, {"keyword": "When", "step_type": "when", "name": "I retrieve S3 objects from prefix \"non/existent/prefix\" and write to file \"output/empty_result.txt\" line by line", "location": "features/s3_messaging.feature:83"}, {"keyword": "Then", "step_type": "then", "name": "S3 message retrieval should be successful", "location": "features/s3_messaging.feature:84"}, {"keyword": "And", "step_type": "then", "name": "S3 should retrieve 0 messages to file", "location": "features/s3_messaging.feature:85"}, {"keyword": "When", "step_type": "when", "name": "I get S3 object content from \"non_existent_object.txt\"", "location": "features/s3_messaging.feature:88"}, {"keyword": "Then", "step_type": "then", "name": "S3 object content should be retrieved successfully", "location": "features/s3_messaging.feature:89"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Validate S3 message content integrity", "tags": ["s3", "messaging", "content_validation"], "location": "features/s3_messaging.feature:92", "steps": [{"keyword": "Given", "step_type": "given", "name": "AWS S3 connection is configured", "location": "features/s3_messaging.feature:7"}, {"keyword": "And", "step_type": "given", "name": "S3 bucket is set to \"test-messaging-bucket\"", "location": "features/s3_messaging.feature:8"}, {"keyword": "And", "step_type": "given", "name": "S3 prefix is set to \"messages/test\"", "location": "features/s3_messaging.feature:9"}, {"keyword": "When", "step_type": "when", "name": "I post message \"Line 1: Important data\" to S3 as \"validation/line1.txt\"", "location": "features/s3_messaging.feature:94"}, {"keyword": "And", "step_type": "when", "name": "I post message \"Line 2: More important data\" to S3 as \"validation/line2.txt\"", "location": "features/s3_messaging.feature:95"}, {"keyword": "And", "step_type": "when", "name": "I post message \"Line 3: Final data\" to S3 as \"validation/line3.txt\"", "location": "features/s3_messaging.feature:96"}, {"keyword": "When", "step_type": "when", "name": "I retrieve S3 objects from prefix \"validation\" and write to file \"output/validated_messages.txt\" line by line", "location": "features/s3_messaging.feature:99"}, {"keyword": "Then", "step_type": "then", "name": "S3 message retrieval should be successful", "location": "features/s3_messaging.feature:100"}, {"keyword": "And", "step_type": "then", "name": "S3 should retrieve 3 messages to file", "location": "features/s3_messaging.feature:101"}, {"keyword": "When", "step_type": "when", "name": "I get S3 object content from \"validation/line2.txt\"", "location": "features/s3_messaging.feature:104"}, {"keyword": "Then", "step_type": "then", "name": "S3 object content should contain \"More important data\"", "location": "features/s3_messaging.feature:105"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "S3 message cleanup operations", "tags": ["s3", "messaging", "cleanup"], "location": "features/s3_messaging.feature:108", "steps": [{"keyword": "Given", "step_type": "given", "name": "AWS S3 connection is configured", "location": "features/s3_messaging.feature:7"}, {"keyword": "And", "step_type": "given", "name": "S3 bucket is set to \"test-messaging-bucket\"", "location": "features/s3_messaging.feature:8"}, {"keyword": "And", "step_type": "given", "name": "S3 prefix is set to \"messages/test\"", "location": "features/s3_messaging.feature:9"}, {"keyword": "When", "step_type": "when", "name": "I post message \"Temporary message 1\" to S3 as \"cleanup/temp1.txt\"", "location": "features/s3_messaging.feature:110"}, {"keyword": "And", "step_type": "when", "name": "I post message \"Temporary message 2\" to S3 as \"cleanup/temp2.txt\"", "location": "features/s3_messaging.feature:111"}, {"keyword": "Then", "step_type": "then", "name": "S3 message should be posted successfully", "location": "features/s3_messaging.feature:112"}, {"keyword": "When", "step_type": "when", "name": "I retrieve S3 objects from prefix \"cleanup\" and write to file \"output/cleanup_before.txt\" line by line", "location": "features/s3_messaging.feature:115"}, {"keyword": "Then", "step_type": "then", "name": "S3 should retrieve 2 messages to file", "location": "features/s3_messaging.feature:116"}], "status": "skipped"}]},

{"keyword": "Feature", "name": "Sample Tagged Tests", "tags": [], "location": "features/sample_tagged_tests.feature:1", "status": "passed", "description": ["Demonstrating multiple tag usage for command line execution"], "elements": [{"type": "scenario", "keyword": "Scenario", "name": "ABC critical smoke test", "tags": ["abctest", "smoke", "critical"], "location": "features/sample_tagged_tests.feature:5", "steps": [{"keyword": "Given", "step_type": "given", "name": "I have a test system configured", "location": "features/sample_tagged_tests.feature:6"}, {"keyword": "When", "step_type": "when", "name": "I execute ABC smoke tests", "location": "features/sample_tagged_tests.feature:7"}, {"keyword": "Then", "step_type": "then", "name": "all critical functions should work", "location": "features/sample_tagged_tests.feature:8"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "ABC database regression test", "tags": ["abctest", "regression", "database"], "location": "features/sample_tagged_tests.feature:11", "steps": [{"keyword": "Given", "step_type": "given", "name": "I have ABC database configured", "location": "features/sample_tagged_tests.feature:12", "match": {"location": "features/steps/sample_tagged_steps.py:19", "arguments": []}, "result": {"status": "passed", "duration": 0.029220104217529297}}, {"keyword": "When", "step_type": "when", "name": "I run ABC database regression tests", "location": "features/sample_tagged_tests.feature:13", "match": {"location": "features/steps/sample_tagged_steps.py:43", "arguments": []}, "result": {"status": "passed", "duration": 0.31357574462890625}}, {"keyword": "Then", "step_type": "then", "name": "all database operations should pass", "location": "features/sample_tagged_tests.feature:14", "match": {"location": "features/steps/sample_tagged_steps.py:71", "arguments": []}, "result": {"status": "passed", "duration": 0.000576019287109375}}], "status": "passed"}, {"type": "scenario", "keyword": "Scenario", "name": "ABC performance test", "tags": ["abctest", "performance", "slow"], "location": "features/sample_tagged_tests.feature:17", "steps": [{"keyword": "Given", "step_type": "given", "name": "I have ABC system under load", "location": "features/sample_tagged_tests.feature:18"}, {"keyword": "When", "step_type": "when", "name": "I measure ABC performance metrics", "location": "features/sample_tagged_tests.feature:19"}, {"keyword": "Then", "step_type": "then", "name": "performance should meet requirements", "location": "features/sample_tagged_tests.feature:20"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "XYZ quick smoke test", "tags": ["xyztest", "smoke", "fast"], "location": "features/sample_tagged_tests.feature:23", "steps": [{"keyword": "Given", "step_type": "given", "name": "I have XYZ system ready", "location": "features/sample_tagged_tests.feature:24"}, {"keyword": "When", "step_type": "when", "name": "I run XYZ smoke tests", "location": "features/sample_tagged_tests.feature:25"}, {"keyword": "Then", "step_type": "then", "name": "XYZ should respond correctly", "location": "features/sample_tagged_tests.feature:26"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "XYZ API regression test", "tags": ["xyztest", "regression", "api"], "location": "features/sample_tagged_tests.feature:29", "steps": [{"keyword": "Given", "step_type": "given", "name": "I have XYZ API configured", "location": "features/sample_tagged_tests.feature:30"}, {"keyword": "When", "step_type": "when", "name": "I test XYZ API endpoints", "location": "features/sample_tagged_tests.feature:31"}, {"keyword": "Then", "step_type": "then", "name": "all XYZ APIs should work properly", "location": "features/sample_tagged_tests.feature:32"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "ABC and XYZ integration test", "tags": ["integration", "abctest", "xyztest"], "location": "features/sample_tagged_tests.feature:35", "steps": [{"keyword": "Given", "step_type": "given", "name": "I have both ABC and XYZ systems", "location": "features/sample_tagged_tests.feature:36"}, {"keyword": "When", "step_type": "when", "name": "I test ABC-XYZ integration", "location": "features/sample_tagged_tests.feature:37"}, {"keyword": "Then", "step_type": "then", "name": "integration should work seamlessly", "location": "features/sample_tagged_tests.feature:38"}], "status": "skipped"}]},

{"keyword": "Feature", "name": "Test My Test Tag", "tags": [], "location": "features/test_my_test_tag.feature:1", "status": "skipped", "description": ["Testing that @my_test tag works with optimized configuration loading"], "elements": [{"type": "scenario", "keyword": "Scenario", "name": "Simple test that should not require API configuration", "tags": ["my_test"], "location": "features/test_my_test_tag.feature:5", "steps": [{"keyword": "Given", "step_type": "given", "name": "I have a simple test setup", "location": "features/test_my_test_tag.feature:6"}, {"keyword": "When", "step_type": "when", "name": "I run my test logic", "location": "features/test_my_test_tag.feature:7"}, {"keyword": "Then", "step_type": "then", "name": "the test should pass without API_TOKEN validation", "location": "features/test_my_test_tag.feature:8"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Smoke test with my_test tag", "tags": ["my_test", "smoke"], "location": "features/test_my_test_tag.feature:11", "steps": [{"keyword": "Given", "step_type": "given", "name": "I have a basic test environment", "location": "features/test_my_test_tag.feature:12"}, {"keyword": "When", "step_type": "when", "name": "I perform basic operations", "location": "features/test_my_test_tag.feature:13"}, {"keyword": "Then", "step_type": "then", "name": "everything should work correctly", "location": "features/test_my_test_tag.feature:14"}], "status": "skipped"}]},

{"keyword": "Feature", "name": "REST API Testing", "tags": [], "location": "features/api/rest_api.feature:1", "status": "skipped", "description": ["As a QA engineer", "I want to test REST API endpoints", "So that I can validate API functionality and performance"], "elements": [{"type": "background", "keyword": "Background", "name": "", "location": "features/api/rest_api.feature:6", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}]}, {"type": "scenario", "keyword": "Scenario", "name": "Test GET endpoint - Retrieve all customers", "tags": ["smoke", "api", "get"], "location": "features/api/rest_api.feature:11", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "When", "step_type": "when", "name": "I send GET request to \"/customers\" endpoint", "location": "features/api/rest_api.feature:12"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 200", "location": "features/api/rest_api.feature:13"}, {"keyword": "And", "step_type": "then", "name": "response should contain valid JSON", "location": "features/api/rest_api.feature:14"}, {"keyword": "And", "step_type": "then", "name": "response time should be less than 2000 milliseconds", "location": "features/api/rest_api.feature:15"}, {"keyword": "And", "step_type": "then", "name": "response header \"Content-Type\" should contain \"application/json\"", "location": "features/api/rest_api.feature:16"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test GET endpoint with ID - Retrieve specific customer", "tags": ["smoke", "api", "get"], "location": "features/api/rest_api.feature:19", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "When", "step_type": "when", "name": "I send GET request to \"/customers/123\" endpoint", "location": "features/api/rest_api.feature:20"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 200", "location": "features/api/rest_api.feature:21"}, {"keyword": "And", "step_type": "then", "name": "response should contain valid JSON", "location": "features/api/rest_api.feature:22"}, {"keyword": "And", "step_type": "then", "name": "response should have required fields", "location": "features/api/rest_api.feature:23", "table": {"headings": ["field_name"], "rows": [["id"], ["name"], ["email"], ["status"]]}}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test POST endpoint - Create new customer", "tags": ["regression", "api", "post"], "location": "features/api/rest_api.feature:31", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "request headers", "location": "features/api/rest_api.feature:32", "table": {"headings": ["header_name", "header_value"], "rows": [["Content-Type", "application/json"], ["Accept", "application/json"]]}}, {"keyword": "And", "step_type": "given", "name": "request payload is loaded from \"customer.json\"", "location": "features/api/rest_api.feature:36"}, {"keyword": "When", "step_type": "when", "name": "I send POST request to \"/customers\" endpoint", "location": "features/api/rest_api.feature:37"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 201", "location": "features/api/rest_api.feature:38"}, {"keyword": "And", "step_type": "then", "name": "response should match expected schema", "location": "features/api/rest_api.feature:39"}, {"keyword": "And", "step_type": "then", "name": "response should contain field \"id\" with type \"string\"", "location": "features/api/rest_api.feature:40"}, {"keyword": "And", "step_type": "then", "name": "response header \"Location\" should be present", "location": "features/api/rest_api.feature:41"}, {"keyword": "And", "step_type": "then", "name": "I store response field \"id\" as \"created_customer_id\"", "location": "features/api/rest_api.feature:42"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test PUT endpoint - Update existing customer", "tags": ["regression", "api", "put"], "location": "features/api/rest_api.feature:45", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "request payload", "location": "features/api/rest_api.feature:46", "text": ["{", "  \"name\": \"Updated Customer Name\",", "  \"email\": \"updated@example.com\",", "  \"phone\": \"+1234567890\",", "  \"status\": \"active\"", "}"]}, {"keyword": "When", "step_type": "when", "name": "I send PUT request to \"/customers/{created_customer_id}\" endpoint", "location": "features/api/rest_api.feature:55"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 200", "location": "features/api/rest_api.feature:56"}, {"keyword": "And", "step_type": "then", "name": "response field \"name\" should equal \"Updated Customer Name\"", "location": "features/api/rest_api.feature:57"}, {"keyword": "And", "step_type": "then", "name": "response field \"email\" should equal \"updated@example.com\"", "location": "features/api/rest_api.feature:58"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test PATCH endpoint - Partial update", "tags": ["regression", "api", "patch"], "location": "features/api/rest_api.feature:61", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "request payload", "location": "features/api/rest_api.feature:62", "text": ["{", "  \"status\": \"inactive\"", "}"]}, {"keyword": "When", "step_type": "when", "name": "I send PATCH request to \"/customers/{created_customer_id}\" endpoint", "location": "features/api/rest_api.feature:68"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 200", "location": "features/api/rest_api.feature:69"}, {"keyword": "And", "step_type": "then", "name": "response field \"status\" should equal \"inactive\"", "location": "features/api/rest_api.feature:70"}, {"keyword": "And", "step_type": "then", "name": "response field \"name\" should equal \"Updated Customer Name\"", "location": "features/api/rest_api.feature:71"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test DELETE endpoint - Remove customer", "tags": ["regression", "api", "delete"], "location": "features/api/rest_api.feature:74", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "When", "step_type": "when", "name": "I send DELETE request to \"/customers/{created_customer_id}\" endpoint", "location": "features/api/rest_api.feature:75"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 204", "location": "features/api/rest_api.feature:76"}, {"keyword": "And", "step_type": "then", "name": "response body should be empty", "location": "features/api/rest_api.feature:77"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test GET non-existent resource", "tags": ["regression", "api", "get", "negative"], "location": "features/api/rest_api.feature:80", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "When", "step_type": "when", "name": "I send GET request to \"/customers/99999999\" endpoint", "location": "features/api/rest_api.feature:81"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 404", "location": "features/api/rest_api.feature:82"}, {"keyword": "And", "step_type": "then", "name": "response should contain field \"error\" with value \"Customer not found\"", "location": "features/api/rest_api.feature:83"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test POST with invalid payload", "tags": ["regression", "api", "post", "negative"], "location": "features/api/rest_api.feature:86", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "request payload", "location": "features/api/rest_api.feature:87", "text": ["{", "  \"email\": \"invalid-email-format\"", "}"]}, {"keyword": "When", "step_type": "when", "name": "I send POST request to \"/customers\" endpoint", "location": "features/api/rest_api.feature:93"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 400", "location": "features/api/rest_api.feature:94"}, {"keyword": "And", "step_type": "then", "name": "response should contain field \"error\"", "location": "features/api/rest_api.feature:95"}, {"keyword": "And", "step_type": "then", "name": "response field \"error\" should contain \"validation failed\"", "location": "features/api/rest_api.feature:96"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test endpoint with authentication", "tags": ["regression", "api", "auth"], "location": "features/api/rest_api.feature:99", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "API authentication token \"Bearer test-token-12345\"", "location": "features/api/rest_api.feature:100"}, {"keyword": "When", "step_type": "when", "name": "I send GET request to \"/customers/profile\" endpoint", "location": "features/api/rest_api.feature:101"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 200", "location": "features/api/rest_api.feature:102"}, {"keyword": "And", "step_type": "then", "name": "request should have header \"Authorization\" with value \"Bearer test-token-12345\"", "location": "features/api/rest_api.feature:103"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test GET with query parameters", "tags": ["regression", "api", "query"], "location": "features/api/rest_api.feature:106", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "query parameters", "location": "features/api/rest_api.feature:107", "table": {"headings": ["param_name", "param_value"], "rows": [["status", "active"], ["limit", "10"], ["offset", "0"]]}}, {"keyword": "When", "step_type": "when", "name": "I send GET request to \"/customers\" endpoint", "location": "features/api/rest_api.feature:112"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 200", "location": "features/api/rest_api.feature:113"}, {"keyword": "And", "step_type": "then", "name": "response should be JSON array", "location": "features/api/rest_api.feature:114"}, {"keyword": "And", "step_type": "then", "name": "response array should have maximum 10 items", "location": "features/api/rest_api.feature:115"}, {"keyword": "And", "step_type": "then", "name": "each item in response should have field \"status\" with value \"active\"", "location": "features/api/rest_api.feature:116"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario Outline", "name": "Test pagination -- @1.1 ", "tags": ["regression", "api", "pagination"], "location": "features/api/rest_api.feature:132", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "query parameters", "location": "features/api/rest_api.feature:120", "table": {"headings": ["param_name", "param_value"], "rows": [["page", "1"], ["size", "20"]]}}, {"keyword": "When", "step_type": "when", "name": "I send GET request to \"/customers\" endpoint", "location": "features/api/rest_api.feature:124"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 200", "location": "features/api/rest_api.feature:125"}, {"keyword": "And", "step_type": "then", "name": "response should have pagination metadata", "location": "features/api/rest_api.feature:126"}, {"keyword": "And", "step_type": "then", "name": "response field \"page\" should equal 1", "location": "features/api/rest_api.feature:127"}, {"keyword": "And", "step_type": "then", "name": "response field \"size\" should equal 20", "location": "features/api/rest_api.feature:128"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario Outline", "name": "Test pagination -- @1.2 ", "tags": ["regression", "api", "pagination"], "location": "features/api/rest_api.feature:133", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "query parameters", "location": "features/api/rest_api.feature:120", "table": {"headings": ["param_name", "param_value"], "rows": [["page", "2"], ["size", "50"]]}}, {"keyword": "When", "step_type": "when", "name": "I send GET request to \"/customers\" endpoint", "location": "features/api/rest_api.feature:124"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 200", "location": "features/api/rest_api.feature:125"}, {"keyword": "And", "step_type": "then", "name": "response should have pagination metadata", "location": "features/api/rest_api.feature:126"}, {"keyword": "And", "step_type": "then", "name": "response field \"page\" should equal 2", "location": "features/api/rest_api.feature:127"}, {"keyword": "And", "step_type": "then", "name": "response field \"size\" should equal 50", "location": "features/api/rest_api.feature:128"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario Outline", "name": "Test pagination -- @1.3 ", "tags": ["regression", "api", "pagination"], "location": "features/api/rest_api.feature:134", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "query parameters", "location": "features/api/rest_api.feature:120", "table": {"headings": ["param_name", "param_value"], "rows": [["page", "3"], ["size", "100"]]}}, {"keyword": "When", "step_type": "when", "name": "I send GET request to \"/customers\" endpoint", "location": "features/api/rest_api.feature:124"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 200", "location": "features/api/rest_api.feature:125"}, {"keyword": "And", "step_type": "then", "name": "response should have pagination metadata", "location": "features/api/rest_api.feature:126"}, {"keyword": "And", "step_type": "then", "name": "response field \"page\" should equal 3", "location": "features/api/rest_api.feature:127"}, {"keyword": "And", "step_type": "then", "name": "response field \"size\" should equal 100", "location": "features/api/rest_api.feature:128"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test custom headers", "tags": ["regression", "api", "headers"], "location": "features/api/rest_api.feature:137", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "request headers", "location": "features/api/rest_api.feature:138", "table": {"headings": ["header_name", "header_value"], "rows": [["X-API-Version", "v2"], ["X-Client-ID", "test-client"], ["Accept-Language", "en-US"]]}}, {"keyword": "When", "step_type": "when", "name": "I send GET request to \"/customers\" endpoint", "location": "features/api/rest_api.feature:143"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 200", "location": "features/api/rest_api.feature:144"}, {"keyword": "And", "step_type": "then", "name": "response header \"X-API-Version\" should equal \"v2\"", "location": "features/api/rest_api.feature:145"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test API performance under load", "tags": ["performance", "api", "load"], "location": "features/api/rest_api.feature:148", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "concurrent users count is 10", "location": "features/api/rest_api.feature:149"}, {"keyword": "When", "step_type": "when", "name": "I send 100 GET requests to \"/customers\" endpoint", "location": "features/api/rest_api.feature:150"}, {"keyword": "Then", "step_type": "then", "name": "average response time should be less than 500 milliseconds", "location": "features/api/rest_api.feature:151"}, {"keyword": "And", "step_type": "then", "name": "95th percentile response time should be less than 1000 milliseconds", "location": "features/api/rest_api.feature:152"}, {"keyword": "And", "step_type": "then", "name": "all responses should have status code 200", "location": "features/api/rest_api.feature:153"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test API request chaining", "tags": ["integration", "api", "chain"], "location": "features/api/rest_api.feature:156", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "request payload is loaded from \"customer.json\"", "location": "features/api/rest_api.feature:158"}, {"keyword": "When", "step_type": "when", "name": "I send POST request to \"/customers\" endpoint", "location": "features/api/rest_api.feature:159"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 201", "location": "features/api/rest_api.feature:160"}, {"keyword": "And", "step_type": "then", "name": "I store response field \"id\" as \"customer_id\"", "location": "features/api/rest_api.feature:161"}, {"keyword": "Given", "step_type": "given", "name": "request payload", "location": "features/api/rest_api.feature:164", "text": ["{", "  \"customer_id\": \"{customer_id}\",", "  \"items\": [", "    {\"product_id\": \"prod-123\", \"quantity\": 2},", "    {\"product_id\": \"prod-456\", \"quantity\": 1}", "  ],", "  \"total_amount\": 150.00", "}"]}, {"keyword": "When", "step_type": "when", "name": "I send POST request to \"/orders\" endpoint", "location": "features/api/rest_api.feature:175"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 201", "location": "features/api/rest_api.feature:176"}, {"keyword": "And", "step_type": "then", "name": "I store response field \"order_id\" as \"order_id\"", "location": "features/api/rest_api.feature:177"}, {"keyword": "When", "step_type": "when", "name": "I send GET request to \"/orders/{order_id}\" endpoint", "location": "features/api/rest_api.feature:180"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 200", "location": "features/api/rest_api.feature:181"}, {"keyword": "And", "step_type": "then", "name": "response field \"customer_id\" should equal stored value \"customer_id\"", "location": "features/api/rest_api.feature:182"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test file upload endpoint", "tags": ["regression", "api", "file"], "location": "features/api/rest_api.feature:185", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "request headers", "location": "features/api/rest_api.feature:186", "table": {"headings": ["header_name", "header_value"], "rows": [["Accept", "application/json"]]}}, {"keyword": "When", "step_type": "when", "name": "I upload file \"test_data/photo.jpg\" to \"/customers/{created_customer_id}/photo\" with form data", "location": "features/api/rest_api.feature:189", "table": {"headings": ["field_name", "field_value"], "rows": [["title", "Profile Photo"]]}}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 200", "location": "features/api/rest_api.feature:192"}, {"keyword": "And", "step_type": "then", "name": "response should contain field \"file_url\"", "location": "features/api/rest_api.feature:193"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test asynchronous API endpoint", "tags": ["regression", "api", "async"], "location": "features/api/rest_api.feature:197", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "request payload is loaded from \"large_import.json\"", "location": "features/api/rest_api.feature:198"}, {"keyword": "When", "step_type": "when", "name": "I send POST request to \"/customers/import\" endpoint", "location": "features/api/rest_api.feature:199"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 202", "location": "features/api/rest_api.feature:200"}, {"keyword": "And", "step_type": "then", "name": "response should contain field \"job_id\"", "location": "features/api/rest_api.feature:201"}, {"keyword": "And", "step_type": "then", "name": "I store response field \"job_id\" as \"import_job_id\"", "location": "features/api/rest_api.feature:202"}, {"keyword": "When", "step_type": "when", "name": "I poll GET request to \"/jobs/{import_job_id}\" until status is \"completed\" with timeout 60 seconds", "location": "features/api/rest_api.feature:203"}, {"keyword": "Then", "step_type": "then", "name": "response field \"status\" should equal \"completed\"", "location": "features/api/rest_api.feature:204"}, {"keyword": "And", "step_type": "then", "name": "response field \"processed_count\" should be greater than 0", "location": "features/api/rest_api.feature:205"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test SQL injection prevention", "tags": ["security", "api", "injection"], "location": "features/api/rest_api.feature:208", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "request payload", "location": "features/api/rest_api.feature:209", "text": ["{", "  \"name\": \"Test'; DROP TABLE customers; --\",", "  \"email\": \"test@example.com\"", "}"]}, {"keyword": "When", "step_type": "when", "name": "I send POST request to \"/customers\" endpoint", "location": "features/api/rest_api.feature:216"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 201", "location": "features/api/rest_api.feature:217"}, {"keyword": "And", "step_type": "then", "name": "response field \"name\" should equal \"Test'; DROP TABLE customers; --\"", "location": "features/api/rest_api.feature:218"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test API contract with detailed schema validation", "tags": ["contract", "api", "schema"], "location": "features/api/rest_api.feature:221", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "When", "step_type": "when", "name": "I send GET request to \"/customers/123\" endpoint", "location": "features/api/rest_api.feature:222"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 200", "location": "features/api/rest_api.feature:223"}, {"keyword": "And", "step_type": "then", "name": "response should match JSON schema", "location": "features/api/rest_api.feature:224", "text": ["{", "  \"type\": \"object\",", "  \"required\": [\"id\", \"name\", \"email\", \"created_at\"],", "  \"properties\": {", "    \"id\": {\"type\": \"string\", \"pattern\": \"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\"},", "    \"name\": {\"type\": \"string\", \"minLength\": 1, \"maxLength\": 100},", "    \"email\": {\"type\": \"string\", \"format\": \"email\"},", "    \"phone\": {\"type\": [\"string\", \"null\"]},", "    \"status\": {\"type\": \"string\", \"enum\": [\"active\", \"inactive\", \"pending\"]},", "    \"created_at\": {\"type\": \"string\", \"format\": \"date-time\"},", "    \"updated_at\": {\"type\": \"string\", \"format\": \"date-time\"}", "  }", "}"]}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test API retry mechanism", "tags": ["regression", "api", "retry"], "location": "features/api/rest_api.feature:242", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "API retry configuration", "location": "features/api/rest_api.feature:243", "table": {"headings": ["max_retries", "retry_delay", "retry_status_codes"], "rows": [["3", "2", "502,503,504"]]}}, {"keyword": "When", "step_type": "when", "name": "I send GET request to \"/unstable-endpoint\" endpoint", "location": "features/api/rest_api.feature:246"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 200", "location": "features/api/rest_api.feature:247"}, {"keyword": "And", "step_type": "then", "name": "request should have been retried if needed", "location": "features/api/rest_api.feature:248"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test GraphQL endpoint", "tags": ["regression", "api", "graphql"], "location": "features/api/rest_api.feature:251", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "GraphQL query", "location": "features/api/rest_api.feature:252", "text": ["query GetCustomer($id: ID!) {", "  customer(id: $id) {", "    id", "    name", "    email", "    orders {", "      id", "      total_amount", "      status", "    }", "  }", "}"]}, {"keyword": "And", "step_type": "given", "name": "GraphQL variables", "location": "features/api/rest_api.feature:267", "text": ["{", "  \"id\": \"123\"", "}"]}, {"keyword": "When", "step_type": "when", "name": "I send GraphQL request to \"/graphql\" endpoint", "location": "features/api/rest_api.feature:273"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 200", "location": "features/api/rest_api.feature:274"}, {"keyword": "And", "step_type": "then", "name": "response field \"data.customer.id\" should equal \"123\"", "location": "features/api/rest_api.feature:275"}, {"keyword": "And", "step_type": "then", "name": "response should not contain field \"errors\"", "location": "features/api/rest_api.feature:276"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test API endpoint with different authentication types", "tags": ["regression", "api", "security", "auth"], "location": "features/api/rest_api.feature:279", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "API authentication token \"Bearer valid-token-123\"", "location": "features/api/rest_api.feature:281"}, {"keyword": "When", "step_type": "when", "name": "I send GET request to \"/protected/profile\" endpoint", "location": "features/api/rest_api.feature:282"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 200", "location": "features/api/rest_api.feature:283"}, {"keyword": "And", "step_type": "then", "name": "request should have header \"Authorization\" with value \"Bearer valid-token-123\"", "location": "features/api/rest_api.feature:284"}, {"keyword": "Given", "step_type": "given", "name": "request headers", "location": "features/api/rest_api.feature:287", "table": {"headings": ["header_name", "header_value"], "rows": [["X-API-Key", "test-api-key"]]}}, {"keyword": "When", "step_type": "when", "name": "I send GET request to \"/protected/data\" endpoint", "location": "features/api/rest_api.feature:290"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 200", "location": "features/api/rest_api.feature:291"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test comprehensive error handling", "tags": ["regression", "api", "error"], "location": "features/api/rest_api.feature:294", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "request payload", "location": "features/api/rest_api.feature:296", "text": ["{", "  \"invalid_field\": \"test\"", "}"]}, {"keyword": "When", "step_type": "when", "name": "I send POST request to \"/customers\" endpoint", "location": "features/api/rest_api.feature:302"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 400", "location": "features/api/rest_api.feature:303"}, {"keyword": "And", "step_type": "then", "name": "response should contain field \"error\"", "location": "features/api/rest_api.feature:304"}, {"keyword": "And", "step_type": "then", "name": "response field \"error\" should contain \"validation\"", "location": "features/api/rest_api.feature:305"}, {"keyword": "When", "step_type": "when", "name": "I send GET request to \"/protected/admin\" endpoint", "location": "features/api/rest_api.feature:308"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 401", "location": "features/api/rest_api.feature:309"}, {"keyword": "And", "step_type": "then", "name": "response should contain field \"error\"", "location": "features/api/rest_api.feature:310"}, {"keyword": "Given", "step_type": "given", "name": "API authentication token \"Bearer limited-token\"", "location": "features/api/rest_api.feature:313"}, {"keyword": "When", "step_type": "when", "name": "I send DELETE request to \"/admin/users/123\" endpoint", "location": "features/api/rest_api.feature:314"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 403", "location": "features/api/rest_api.feature:315"}, {"keyword": "When", "step_type": "when", "name": "I send GET request to \"/nonexistent/endpoint\" endpoint", "location": "features/api/rest_api.feature:318"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 404", "location": "features/api/rest_api.feature:319"}, {"keyword": "When", "step_type": "when", "name": "I send 50 GET requests to \"/rate-limited\" endpoint", "location": "features/api/rest_api.feature:322"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 429", "location": "features/api/rest_api.feature:323"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test comprehensive input validation", "tags": ["regression", "api", "validation"], "location": "features/api/rest_api.feature:326", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "request payload", "location": "features/api/rest_api.feature:328", "text": ["{", "  \"name\": \"\",", "  \"email\": \"test@example.com\"", "}"]}, {"keyword": "When", "step_type": "when", "name": "I send POST request to \"/customers\" endpoint", "location": "features/api/rest_api.feature:335"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 400", "location": "features/api/rest_api.feature:336"}, {"keyword": "And", "step_type": "then", "name": "response field \"error\" should contain \"name\"", "location": "features/api/rest_api.feature:337"}, {"keyword": "Given", "step_type": "given", "name": "request payload", "location": "features/api/rest_api.feature:340", "text": ["{", "  \"name\": \"Valid Name\",", "  \"email\": \"invalid-email\"", "}"]}, {"keyword": "When", "step_type": "when", "name": "I send POST request to \"/customers\" endpoint", "location": "features/api/rest_api.feature:347"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 400", "location": "features/api/rest_api.feature:348"}, {"keyword": "And", "step_type": "then", "name": "response field \"error\" should contain \"email\"", "location": "features/api/rest_api.feature:349"}, {"keyword": "Given", "step_type": "given", "name": "request payload", "location": "features/api/rest_api.feature:352", "text": ["{", "  \"name\": \"Valid Name\"", "}"]}, {"keyword": "When", "step_type": "when", "name": "I send POST request to \"/customers\" endpoint", "location": "features/api/rest_api.feature:358"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 400", "location": "features/api/rest_api.feature:359"}, {"keyword": "And", "step_type": "then", "name": "response field \"error\" should contain \"required\"", "location": "features/api/rest_api.feature:360"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test API under stress conditions", "tags": ["performance", "api", "stress"], "location": "features/api/rest_api.feature:363", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "concurrent users count is 20", "location": "features/api/rest_api.feature:364"}, {"keyword": "When", "step_type": "when", "name": "I send 200 GET requests to \"/customers\" endpoint", "location": "features/api/rest_api.feature:365"}, {"keyword": "Then", "step_type": "then", "name": "average response time should be less than 1000 milliseconds", "location": "features/api/rest_api.feature:366"}, {"keyword": "And", "step_type": "then", "name": "95th percentile response time should be less than 2000 milliseconds", "location": "features/api/rest_api.feature:367"}, {"keyword": "And", "step_type": "then", "name": "all responses should have status code 200", "location": "features/api/rest_api.feature:368"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test complete data flow through API", "tags": ["integration", "api", "data_flow"], "location": "features/api/rest_api.feature:371", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "request payload is loaded from \"customer.json\"", "location": "features/api/rest_api.feature:373"}, {"keyword": "When", "step_type": "when", "name": "I send POST request to \"/customers\" endpoint", "location": "features/api/rest_api.feature:374"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 201", "location": "features/api/rest_api.feature:375"}, {"keyword": "And", "step_type": "then", "name": "I store response field \"id\" as \"customer_id\"", "location": "features/api/rest_api.feature:376"}, {"keyword": "Given", "step_type": "given", "name": "request payload", "location": "features/api/rest_api.feature:379", "text": ["{", "  \"name\": \"Updated Name\",", "  \"status\": \"premium\"", "}"]}, {"keyword": "When", "step_type": "when", "name": "I send PATCH request to \"/customers/{customer_id}\" endpoint", "location": "features/api/rest_api.feature:386"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 200", "location": "features/api/rest_api.feature:387"}, {"keyword": "And", "step_type": "then", "name": "response field \"name\" should equal \"Updated Name\"", "location": "features/api/rest_api.feature:388"}, {"keyword": "And", "step_type": "then", "name": "response field \"status\" should equal \"premium\"", "location": "features/api/rest_api.feature:389"}, {"keyword": "Given", "step_type": "given", "name": "request payload", "location": "features/api/rest_api.feature:392", "text": ["{", "  \"customer_id\": \"{customer_id}\",", "  \"items\": [", "    {\"product_id\": \"prod-001\", \"quantity\": 2, \"price\": 25.99},", "    {\"product_id\": \"prod-002\", \"quantity\": 1, \"price\": 49.99}", "  ],", "  \"total\": 101.97", "}"]}, {"keyword": "When", "step_type": "when", "name": "I send POST request to \"/orders\" endpoint", "location": "features/api/rest_api.feature:403"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 201", "location": "features/api/rest_api.feature:404"}, {"keyword": "And", "step_type": "then", "name": "I store response field \"id\" as \"order_id\"", "location": "features/api/rest_api.feature:405"}, {"keyword": "And", "step_type": "then", "name": "response field \"customer_id\" should equal stored value \"customer_id\"", "location": "features/api/rest_api.feature:406"}, {"keyword": "When", "step_type": "when", "name": "I send GET request to \"/customers/{customer_id}/orders\" endpoint", "location": "features/api/rest_api.feature:409"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 200", "location": "features/api/rest_api.feature:410"}, {"keyword": "And", "step_type": "then", "name": "response should be JSON array", "location": "features/api/rest_api.feature:411"}, {"keyword": "And", "step_type": "then", "name": "response array should have maximum 10 items", "location": "features/api/rest_api.feature:412"}, {"keyword": "When", "step_type": "when", "name": "I send DELETE request to \"/orders/{order_id}\" endpoint", "location": "features/api/rest_api.feature:415"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 204", "location": "features/api/rest_api.feature:416"}, {"keyword": "When", "step_type": "when", "name": "I send DELETE request to \"/customers/{customer_id}\" endpoint", "location": "features/api/rest_api.feature:419"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 204", "location": "features/api/rest_api.feature:420"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test different content types", "tags": ["regression", "api", "content_types"], "location": "features/api/rest_api.feature:423", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "request headers", "location": "features/api/rest_api.feature:425", "table": {"headings": ["header_name", "header_value"], "rows": [["Content-Type", "application/json"]]}}, {"keyword": "And", "step_type": "given", "name": "request payload", "location": "features/api/rest_api.feature:428", "text": ["{", "  \"name\": \"JSON Customer\",", "  \"email\": \"json@example.com\"", "}"]}, {"keyword": "When", "step_type": "when", "name": "I send POST request to \"/customers\" endpoint", "location": "features/api/rest_api.feature:435"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 201", "location": "features/api/rest_api.feature:436"}, {"keyword": "And", "step_type": "then", "name": "response header \"Content-Type\" should contain \"application/json\"", "location": "features/api/rest_api.feature:437"}, {"keyword": "Given", "step_type": "given", "name": "request headers", "location": "features/api/rest_api.feature:440", "table": {"headings": ["header_name", "header_value"], "rows": [["Content-Type", "application/xml"], ["Accept", "application/xml"]]}}, {"keyword": "When", "step_type": "when", "name": "I send GET request to \"/customers\" endpoint", "location": "features/api/rest_api.feature:444"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 200", "location": "features/api/rest_api.feature:445"}, {"keyword": "And", "step_type": "then", "name": "response header \"Content-Type\" should contain \"xml\"", "location": "features/api/rest_api.feature:446"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test API caching behavior", "tags": ["regression", "api", "caching"], "location": "features/api/rest_api.feature:449", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "When", "step_type": "when", "name": "I send GET request to \"/customers/cached-data\" endpoint", "location": "features/api/rest_api.feature:451"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 200", "location": "features/api/rest_api.feature:452"}, {"keyword": "And", "step_type": "then", "name": "response header \"X-Cache-Status\" should equal \"MISS\"", "location": "features/api/rest_api.feature:453"}, {"keyword": "When", "step_type": "when", "name": "I send GET request to \"/customers/cached-data\" endpoint", "location": "features/api/rest_api.feature:456"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 200", "location": "features/api/rest_api.feature:457"}, {"keyword": "And", "step_type": "then", "name": "response header \"X-Cache-Status\" should equal \"HIT\"", "location": "features/api/rest_api.feature:458"}, {"keyword": "And", "step_type": "then", "name": "response time should be less than 100 milliseconds", "location": "features/api/rest_api.feature:459"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test API versioning", "tags": ["regression", "api", "versioning"], "location": "features/api/rest_api.feature:462", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "request headers", "location": "features/api/rest_api.feature:464", "table": {"headings": ["header_name", "header_value"], "rows": [["Accept", "application/json"], ["API-Version", "v1"]]}}, {"keyword": "When", "step_type": "when", "name": "I send GET request to \"/customers\" endpoint", "location": "features/api/rest_api.feature:468"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 200", "location": "features/api/rest_api.feature:469"}, {"keyword": "And", "step_type": "then", "name": "response header \"API-Version\" should equal \"v1\"", "location": "features/api/rest_api.feature:470"}, {"keyword": "Given", "step_type": "given", "name": "request headers", "location": "features/api/rest_api.feature:473", "table": {"headings": ["header_name", "header_value"], "rows": [["Accept", "application/json"], ["API-Version", "v2"]]}}, {"keyword": "When", "step_type": "when", "name": "I send GET request to \"/customers\" endpoint", "location": "features/api/rest_api.feature:477"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 200", "location": "features/api/rest_api.feature:478"}, {"keyword": "And", "step_type": "then", "name": "response header \"API-Version\" should equal \"v2\"", "location": "features/api/rest_api.feature:479"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test API filtering and sorting", "tags": ["regression", "api", "filtering_sorting"], "location": "features/api/rest_api.feature:482", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "query parameters", "location": "features/api/rest_api.feature:484", "table": {"headings": ["param_name", "param_value"], "rows": [["status", "active"], ["country", "USA"], ["limit", "5"]]}}, {"keyword": "When", "step_type": "when", "name": "I send GET request to \"/customers\" endpoint", "location": "features/api/rest_api.feature:489"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 200", "location": "features/api/rest_api.feature:490"}, {"keyword": "And", "step_type": "then", "name": "response should be JSON array", "location": "features/api/rest_api.feature:491"}, {"keyword": "And", "step_type": "then", "name": "response array should have maximum 5 items", "location": "features/api/rest_api.feature:492"}, {"keyword": "And", "step_type": "then", "name": "each item in response should have field \"status\" with value \"active\"", "location": "features/api/rest_api.feature:493"}, {"keyword": "Given", "step_type": "given", "name": "query parameters", "location": "features/api/rest_api.feature:496", "table": {"headings": ["param_name", "param_value"], "rows": [["sort", "name"], ["order", "desc"], ["limit", "10"]]}}, {"keyword": "When", "step_type": "when", "name": "I send GET request to \"/customers\" endpoint", "location": "features/api/rest_api.feature:501"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 200", "location": "features/api/rest_api.feature:502"}, {"keyword": "And", "step_type": "then", "name": "response should be JSON array", "location": "features/api/rest_api.feature:503"}, {"keyword": "And", "step_type": "then", "name": "response array should have maximum 10 items", "location": "features/api/rest_api.feature:504"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test XSS prevention", "tags": ["security", "api", "xss_prevention"], "location": "features/api/rest_api.feature:507", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "request payload", "location": "features/api/rest_api.feature:508", "text": ["{", "  \"name\": \"<script>alert('xss')</script>\",", "  \"email\": \"xss@example.com\"", "}"]}, {"keyword": "When", "step_type": "when", "name": "I send POST request to \"/customers\" endpoint", "location": "features/api/rest_api.feature:515"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 201", "location": "features/api/rest_api.feature:516"}, {"keyword": "And", "step_type": "then", "name": "response field \"name\" should not contain \"<script>\"", "location": "features/api/rest_api.feature:517"}, {"keyword": "And", "step_type": "then", "name": "response field \"name\" should not contain \"alert\"", "location": "features/api/rest_api.feature:518"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test bulk operations", "tags": ["regression", "api", "bulk_operations"], "location": "features/api/rest_api.feature:521", "steps": [{"keyword": "Given", "step_type": "given", "name": "API base URL is configured", "location": "features/api/rest_api.feature:7"}, {"keyword": "And", "step_type": "given", "name": "API timeout is set to 30 seconds", "location": "features/api/rest_api.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "request payload", "location": "features/api/rest_api.feature:523", "text": ["{", "  \"customers\": [", "    {\"name\": \"Bulk Customer 1\", \"email\": \"bulk1@example.com\"},", "    {\"name\": \"Bulk Customer 2\", \"email\": \"bulk2@example.com\"},", "    {\"name\": \"Bulk Customer 3\", \"email\": \"bulk3@example.com\"}", "  ]", "}"]}, {"keyword": "When", "step_type": "when", "name": "I send POST request to \"/customers/bulk\" endpoint", "location": "features/api/rest_api.feature:533"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 201", "location": "features/api/rest_api.feature:534"}, {"keyword": "And", "step_type": "then", "name": "response field \"created_count\" should equal \"3\"", "location": "features/api/rest_api.feature:535"}, {"keyword": "And", "step_type": "then", "name": "response should contain field \"customer_ids\"", "location": "features/api/rest_api.feature:536"}, {"keyword": "Given", "step_type": "given", "name": "request payload", "location": "features/api/rest_api.feature:539", "text": ["{", "  \"filter\": {\"status\": \"pending\"},", "  \"update\": {\"status\": \"active\"}", "}"]}, {"keyword": "When", "step_type": "when", "name": "I send PATCH request to \"/customers/bulk\" endpoint", "location": "features/api/rest_api.feature:546"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 200", "location": "features/api/rest_api.feature:547"}, {"keyword": "And", "step_type": "then", "name": "response should contain field \"updated_count\"", "location": "features/api/rest_api.feature:548"}, {"keyword": "Given", "step_type": "given", "name": "request payload", "location": "features/api/rest_api.feature:551", "text": ["{", "  \"filter\": {\"email\": {\"contains\": \"@example.com\"}}", "}"]}, {"keyword": "When", "step_type": "when", "name": "I send DELETE request to \"/customers/bulk\" endpoint", "location": "features/api/rest_api.feature:557"}, {"keyword": "Then", "step_type": "then", "name": "response status code should be 200", "location": "features/api/rest_api.feature:558"}, {"keyword": "And", "step_type": "then", "name": "response should contain field \"deleted_count\"", "location": "features/api/rest_api.feature:559"}], "status": "skipped"}]},

{"keyword": "Feature", "name": "AWS Integration Testing", "tags": [], "location": "features/aws/aws_integration.feature:1", "status": "skipped", "description": ["As a QA engineer", "I want to test AWS SQS and S3 integration", "So that I can validate cloud messaging and file operations"], "elements": [{"type": "background", "keyword": "Background", "name": "", "location": "features/aws/aws_integration.feature:6", "steps": [{"keyword": "Given", "step_type": "given", "name": "AWS SQS connection is configured", "location": "features/aws/aws_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "AWS S3 connection is configured", "location": "features/aws/aws_integration.feature:8"}]}, {"type": "scenario", "keyword": "Scenario", "name": "Test AWS SQS connection", "tags": ["smoke", "aws", "sqs"], "location": "features/aws/aws_integration.feature:11", "steps": [{"keyword": "Given", "step_type": "given", "name": "AWS SQS connection is configured", "location": "features/aws/aws_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "AWS S3 connection is configured", "location": "features/aws/aws_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "SQS queue URL is set to \"https://sqs.us-east-1.amazonaws.com/123456789/test-queue\"", "location": "features/aws/aws_integration.feature:12"}, {"keyword": "Then", "step_type": "then", "name": "AWS SQS connection should be successful", "location": "features/aws/aws_integration.feature:13"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Test AWS S3 connection", "tags": ["smoke", "aws", "s3"], "location": "features/aws/aws_integration.feature:16", "steps": [{"keyword": "Given", "step_type": "given", "name": "AWS SQS connection is configured", "location": "features/aws/aws_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "AWS S3 connection is configured", "location": "features/aws/aws_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "S3 bucket is set to \"test-automation-bucket\"", "location": "features/aws/aws_integration.feature:17"}, {"keyword": "Then", "step_type": "then", "name": "AWS S3 connection should be successful", "location": "features/aws/aws_integration.feature:18"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Send message to SQS queue", "tags": ["regression", "aws", "sqs"], "location": "features/aws/aws_integration.feature:21", "steps": [{"keyword": "Given", "step_type": "given", "name": "AWS SQS connection is configured", "location": "features/aws/aws_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "AWS S3 connection is configured", "location": "features/aws/aws_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "SQS queue URL is set to \"https://sqs.us-east-1.amazonaws.com/123456789/test-queue\"", "location": "features/aws/aws_integration.feature:22"}, {"keyword": "When", "step_type": "when", "name": "I send message \"Test message from automation framework\" to SQS queue", "location": "features/aws/aws_integration.feature:23"}, {"keyword": "Then", "step_type": "then", "name": "SQS message should be sent successfully", "location": "features/aws/aws_integration.feature:24"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Send file to SQS line by line", "tags": ["regression", "aws", "sqs", "file"], "location": "features/aws/aws_integration.feature:27", "steps": [{"keyword": "Given", "step_type": "given", "name": "AWS SQS connection is configured", "location": "features/aws/aws_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "AWS S3 connection is configured", "location": "features/aws/aws_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "SQS queue URL is set to \"https://sqs.us-east-1.amazonaws.com/123456789/test-queue\"", "location": "features/aws/aws_integration.feature:28"}, {"keyword": "When", "step_type": "when", "name": "I send file \"test_data.txt\" to SQS queue line by line", "location": "features/aws/aws_integration.feature:29"}, {"keyword": "Then", "step_type": "then", "name": "SQS file should be sent with 10 successful messages", "location": "features/aws/aws_integration.feature:30"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Send entire file as single SQS message", "tags": ["regression", "aws", "sqs", "file"], "location": "features/aws/aws_integration.feature:33", "steps": [{"keyword": "Given", "step_type": "given", "name": "AWS SQS connection is configured", "location": "features/aws/aws_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "AWS S3 connection is configured", "location": "features/aws/aws_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "SQS queue URL is set to \"https://sqs.us-east-1.amazonaws.com/123456789/test-queue\"", "location": "features/aws/aws_integration.feature:34"}, {"keyword": "When", "step_type": "when", "name": "I send file \"test_message.txt\" to SQS queue as single message", "location": "features/aws/aws_integration.feature:35"}, {"keyword": "Then", "step_type": "then", "name": "SQS file should be sent with 1 successful messages", "location": "features/aws/aws_integration.feature:36"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Send message to FIFO queue with deduplication", "tags": ["regression", "aws", "sqs", "fifo"], "location": "features/aws/aws_integration.feature:39", "steps": [{"keyword": "Given", "step_type": "given", "name": "AWS SQS connection is configured", "location": "features/aws/aws_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "AWS S3 connection is configured", "location": "features/aws/aws_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "SQS queue URL is set to \"https://sqs.us-east-1.amazonaws.com/123456789/test-queue.fifo\"", "location": "features/aws/aws_integration.feature:40"}, {"keyword": "When", "step_type": "when", "name": "I send message \"FIFO test message with unique group ID\" to SQS queue", "location": "features/aws/aws_integration.feature:41"}, {"keyword": "Then", "step_type": "then", "name": "SQS message should be sent successfully", "location": "features/aws/aws_integration.feature:42"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Receive messages from SQS queue", "tags": ["regression", "aws", "sqs", "receive"], "location": "features/aws/aws_integration.feature:45", "steps": [{"keyword": "Given", "step_type": "given", "name": "AWS SQS connection is configured", "location": "features/aws/aws_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "AWS S3 connection is configured", "location": "features/aws/aws_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "SQS queue URL is set to \"https://sqs.us-east-1.amazonaws.com/123456789/test-queue\"", "location": "features/aws/aws_integration.feature:46"}, {"keyword": "When", "step_type": "when", "name": "I receive 5 messages from SQS queue", "location": "features/aws/aws_integration.feature:47"}, {"keyword": "Then", "step_type": "then", "name": "SQS should receive 5 messages", "location": "features/aws/aws_integration.feature:48"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Download single file from S3", "tags": ["integration", "aws", "s3", "download"], "location": "features/aws/aws_integration.feature:51", "steps": [{"keyword": "Given", "step_type": "given", "name": "AWS SQS connection is configured", "location": "features/aws/aws_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "AWS S3 connection is configured", "location": "features/aws/aws_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "S3 bucket is set to \"test-automation-bucket\"", "location": "features/aws/aws_integration.feature:52"}, {"keyword": "When", "step_type": "when", "name": "I download file \"test-files/sample.txt\" from S3 to \"data/s3_downloads/sample.txt\"", "location": "features/aws/aws_integration.feature:53"}, {"keyword": "Then", "step_type": "then", "name": "S3 file download should be successful", "location": "features/aws/aws_integration.feature:54"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Download S3 directory to local directory", "tags": ["integration", "aws", "s3", "download", "directory"], "location": "features/aws/aws_integration.feature:57", "steps": [{"keyword": "Given", "step_type": "given", "name": "AWS SQS connection is configured", "location": "features/aws/aws_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "AWS S3 connection is configured", "location": "features/aws/aws_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "S3 bucket is set to \"test-automation-bucket\"", "location": "features/aws/aws_integration.feature:58"}, {"keyword": "And", "step_type": "given", "name": "S3 prefix is set to \"incoming/\"", "location": "features/aws/aws_integration.feature:59"}, {"keyword": "And", "step_type": "given", "name": "local download directory is set to \"data/s3_downloads/\"", "location": "features/aws/aws_integration.feature:60"}, {"keyword": "When", "step_type": "when", "name": "I download S3 directory to local directory", "location": "features/aws/aws_integration.feature:61"}, {"keyword": "Then", "step_type": "then", "name": "S3 directory download should complete with 3 files", "location": "features/aws/aws_integration.feature:62"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Upload file to S3", "tags": ["integration", "aws", "s3", "upload"], "location": "features/aws/aws_integration.feature:65", "steps": [{"keyword": "Given", "step_type": "given", "name": "AWS SQS connection is configured", "location": "features/aws/aws_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "AWS S3 connection is configured", "location": "features/aws/aws_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "S3 bucket is set to \"test-automation-bucket\"", "location": "features/aws/aws_integration.feature:66"}, {"keyword": "When", "step_type": "when", "name": "I upload file \"data/test_data/customer.json\" to S3 as \"processed/customer_data.json\"", "location": "features/aws/aws_integration.feature:67"}, {"keyword": "Then", "step_type": "then", "name": "S3 upload should be successful", "location": "features/aws/aws_integration.feature:68"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Process SQS messages to SQL database", "tags": ["integration", "aws", "sql", "sqs"], "location": "features/aws/aws_integration.feature:71", "steps": [{"keyword": "Given", "step_type": "given", "name": "AWS SQS connection is configured", "location": "features/aws/aws_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "AWS S3 connection is configured", "location": "features/aws/aws_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "AWS-SQL integration is configured", "location": "features/aws/aws_integration.feature:72"}, {"keyword": "And", "step_type": "given", "name": "SQS queue URL is set to \"https://sqs.us-east-1.amazonaws.com/123456789/test-queue\"", "location": "features/aws/aws_integration.feature:73"}, {"keyword": "And", "step_type": "given", "name": "message table \"aws_sqs_messages\" exists in \"DEV\" \"POSTGRES\" database", "location": "features/aws/aws_integration.feature:74"}, {"keyword": "When", "step_type": "when", "name": "I process SQS queue to SQL database", "location": "features/aws/aws_integration.feature:75"}, {"keyword": "Then", "step_type": "then", "name": "SQS messages should be saved to SQL successfully", "location": "features/aws/aws_integration.feature:76"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Export messages from SQL to file", "tags": ["integration", "aws", "sql", "export"], "location": "features/aws/aws_integration.feature:79", "steps": [{"keyword": "Given", "step_type": "given", "name": "AWS SQS connection is configured", "location": "features/aws/aws_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "AWS S3 connection is configured", "location": "features/aws/aws_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "AWS-SQL integration is configured", "location": "features/aws/aws_integration.feature:80"}, {"keyword": "And", "step_type": "given", "name": "message table \"aws_sqs_messages\" exists in \"DEV\" \"POSTGRES\" database", "location": "features/aws/aws_integration.feature:81"}, {"keyword": "When", "step_type": "when", "name": "I export messages from SQL to file \"output/exported_messages.txt\"", "location": "features/aws/aws_integration.feature:82"}, {"keyword": "Then", "step_type": "then", "name": "SQL message export should be successful", "location": "features/aws/aws_integration.feature:83"}, {"keyword": "And", "step_type": "then", "name": "exported file should contain 5 messages", "location": "features/aws/aws_integration.feature:84"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Complete SQS to SQL to File workflow", "tags": ["e2e", "aws", "sqs", "sql", "complete"], "location": "features/aws/aws_integration.feature:87", "steps": [{"keyword": "Given", "step_type": "given", "name": "AWS SQS connection is configured", "location": "features/aws/aws_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "AWS S3 connection is configured", "location": "features/aws/aws_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "AWS-SQL integration is configured", "location": "features/aws/aws_integration.feature:88"}, {"keyword": "And", "step_type": "given", "name": "SQS queue URL is set to \"https://sqs.us-east-1.amazonaws.com/123456789/test-queue\"", "location": "features/aws/aws_integration.feature:89"}, {"keyword": "And", "step_type": "given", "name": "message table \"aws_sqs_messages\" exists in \"DEV\" \"POSTGRES\" database", "location": "features/aws/aws_integration.feature:90"}, {"keyword": "When", "step_type": "when", "name": "I send file \"test_data.txt\" to SQS queue line by line", "location": "features/aws/aws_integration.feature:91"}, {"keyword": "And", "step_type": "when", "name": "I process SQS queue to SQL database", "location": "features/aws/aws_integration.feature:92"}, {"keyword": "And", "step_type": "when", "name": "I export messages from SQL to file \"output/complete_workflow.txt\"", "location": "features/aws/aws_integration.feature:93"}, {"keyword": "Then", "step_type": "then", "name": "SQS file should be sent with 10 successful messages", "location": "features/aws/aws_integration.feature:94"}, {"keyword": "And", "step_type": "then", "name": "SQS messages should be saved to SQL successfully", "location": "features/aws/aws_integration.feature:95"}, {"keyword": "And", "step_type": "then", "name": "SQL message export should be successful", "location": "features/aws/aws_integration.feature:96"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "S3 download and SQL processing workflow", "tags": ["e2e", "aws", "s3", "sql", "integration"], "location": "features/aws/aws_integration.feature:99", "steps": [{"keyword": "Given", "step_type": "given", "name": "AWS SQS connection is configured", "location": "features/aws/aws_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "AWS S3 connection is configured", "location": "features/aws/aws_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "AWS-SQL integration is configured", "location": "features/aws/aws_integration.feature:100"}, {"keyword": "And", "step_type": "given", "name": "S3 bucket is set to \"test-automation-bucket\"", "location": "features/aws/aws_integration.feature:101"}, {"keyword": "And", "step_type": "given", "name": "S3 prefix is set to \"incoming/\"", "location": "features/aws/aws_integration.feature:102"}, {"keyword": "And", "step_type": "given", "name": "local download directory is set to \"data/s3_downloads/\"", "location": "features/aws/aws_integration.feature:103"}, {"keyword": "And", "step_type": "given", "name": "SQS queue URL is set to \"https://sqs.us-east-1.amazonaws.com/123456789/test-queue\"", "location": "features/aws/aws_integration.feature:104"}, {"keyword": "And", "step_type": "given", "name": "message table \"aws_sqs_messages\" exists in \"DEV\" \"POSTGRES\" database", "location": "features/aws/aws_integration.feature:105"}, {"keyword": "When", "step_type": "when", "name": "I download S3 directory to local directory", "location": "features/aws/aws_integration.feature:106"}, {"keyword": "And", "step_type": "when", "name": "I send file \"data/s3_downloads/messages.txt\" to SQS queue line by line", "location": "features/aws/aws_integration.feature:107"}, {"keyword": "And", "step_type": "when", "name": "I process SQS queue to SQL database", "location": "features/aws/aws_integration.feature:108"}, {"keyword": "Then", "step_type": "then", "name": "S3 directory download should complete with 3 files", "location": "features/aws/aws_integration.feature:109"}, {"keyword": "And", "step_type": "then", "name": "SQS messages should be saved to SQL successfully", "location": "features/aws/aws_integration.feature:110"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario Outline", "name": "Bulk message processing performance -- @1.1 ", "tags": ["performance", "aws", "sqs", "bulk"], "location": "features/aws/aws_integration.feature:123", "steps": [{"keyword": "Given", "step_type": "given", "name": "AWS SQS connection is configured", "location": "features/aws/aws_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "AWS S3 connection is configured", "location": "features/aws/aws_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "SQS queue URL is set to \"https://sqs.us-east-1.amazonaws.com/123456789/test-queue\"", "location": "features/aws/aws_integration.feature:114"}, {"keyword": "And", "step_type": "given", "name": "message table \"aws_sqs_messages\" exists in \"DEV\" \"POSTGRES\" database", "location": "features/aws/aws_integration.feature:115"}, {"keyword": "When", "step_type": "when", "name": "I receive 10 messages from SQS queue", "location": "features/aws/aws_integration.feature:116"}, {"keyword": "And", "step_type": "when", "name": "I save SQS messages to SQL database", "location": "features/aws/aws_integration.feature:117"}, {"keyword": "Then", "step_type": "then", "name": "SQS should receive 10 messages", "location": "features/aws/aws_integration.feature:118"}, {"keyword": "And", "step_type": "then", "name": "SQS messages should be saved to SQL successfully", "location": "features/aws/aws_integration.feature:119"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario Outline", "name": "Bulk message processing performance -- @1.2 ", "tags": ["performance", "aws", "sqs", "bulk"], "location": "features/aws/aws_integration.feature:124", "steps": [{"keyword": "Given", "step_type": "given", "name": "AWS SQS connection is configured", "location": "features/aws/aws_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "AWS S3 connection is configured", "location": "features/aws/aws_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "SQS queue URL is set to \"https://sqs.us-east-1.amazonaws.com/123456789/high-volume-queue\"", "location": "features/aws/aws_integration.feature:114"}, {"keyword": "And", "step_type": "given", "name": "message table \"aws_sqs_messages\" exists in \"DEV\" \"POSTGRES\" database", "location": "features/aws/aws_integration.feature:115"}, {"keyword": "When", "step_type": "when", "name": "I receive 50 messages from SQS queue", "location": "features/aws/aws_integration.feature:116"}, {"keyword": "And", "step_type": "when", "name": "I save SQS messages to SQL database", "location": "features/aws/aws_integration.feature:117"}, {"keyword": "Then", "step_type": "then", "name": "SQS should receive 50 messages", "location": "features/aws/aws_integration.feature:118"}, {"keyword": "And", "step_type": "then", "name": "SQS messages should be saved to SQL successfully", "location": "features/aws/aws_integration.feature:119"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario Outline", "name": "Bulk message processing performance -- @1.3 ", "tags": ["performance", "aws", "sqs", "bulk"], "location": "features/aws/aws_integration.feature:125", "steps": [{"keyword": "Given", "step_type": "given", "name": "AWS SQS connection is configured", "location": "features/aws/aws_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "AWS S3 connection is configured", "location": "features/aws/aws_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "SQS queue URL is set to \"https://sqs.us-east-1.amazonaws.com/123456789/test-queue.fifo\"", "location": "features/aws/aws_integration.feature:114"}, {"keyword": "And", "step_type": "given", "name": "message table \"aws_sqs_messages\" exists in \"DEV\" \"POSTGRES\" database", "location": "features/aws/aws_integration.feature:115"}, {"keyword": "When", "step_type": "when", "name": "I receive 20 messages from SQS queue", "location": "features/aws/aws_integration.feature:116"}, {"keyword": "And", "step_type": "when", "name": "I save SQS messages to SQL database", "location": "features/aws/aws_integration.feature:117"}, {"keyword": "Then", "step_type": "then", "name": "SQS should receive 20 messages", "location": "features/aws/aws_integration.feature:118"}, {"keyword": "And", "step_type": "then", "name": "SQS messages should be saved to SQL successfully", "location": "features/aws/aws_integration.feature:119"}], "status": "skipped"}]},

{"keyword": "Feature", "name": "Enhanced Database Comparison and Data Validation", "tags": [], "location": "features/database/data_comparison.feature:1", "status": "failed", "description": ["As a data engineer", "I want to compare data between different databases with advanced features", "So that I can validate data migration and synchronization with comprehensive analysis"], "elements": [{"type": "background", "keyword": "Background", "name": "", "location": "features/database/data_comparison.feature:6", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7"}]}, {"type": "scenario", "keyword": "Scenario", "name": "Enhanced Oracle to PostgreSQL comparison with performance monitoring", "tags": ["database", "oracle", "postgres", "enhanced"], "location": "features/database/data_comparison.feature:10", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0010828971862792969}}, {"keyword": "Given", "step_type": "given", "name": "I connect to Oracle database using \"SAT_ORACLE\" configuration", "location": "features/database/data_comparison.feature:11", "match": {"location": "features/steps/database_steps.py:1417", "arguments": [{"value": "SAT_ORACLE", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.034314870834350586, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 258, in load_db_config_when_needed", "    raise ConfigurationError(f\"Section '{section_name}' not found. Available database sections: {available}\")", "utils.custom_exceptions.ConfigurationError: Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None}", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1424, in connect_to_oracle", "    db_config = load_db_config_when_needed(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 283, in load_db_config_when_needed", "    raise ConfigurationError(f\"Failed to load database configuration for '{section_name}': {str(e)}\")", "utils.custom_exceptions.ConfigurationError: Failed to load database configuration for 'SAT_ORACLE': Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None} | Details: {'config_key': None, 'config_file': None}", "", "Captured stderr:", "/Users/karimmohammed/testautomationframework/features/steps/database_steps.py:1400: ContextMaskWarning: user code is masking context attribute 'config_loader'; see the tutorial for what this means", "  context.config_loader = global_config_loader"]}}, {"keyword": "And", "step_type": "given", "name": "I connect to PostgreSQL database using \"SAT_POSTGRES\" configuration", "location": "features/database/data_comparison.feature:12"}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:13"}, {"keyword": "And", "step_type": "when", "name": "I load source data using table from config section \"comparison_settings\" key \"SRCE_TABLE\" on Oracle", "location": "features/database/data_comparison.feature:14"}, {"keyword": "And", "step_type": "when", "name": "I load target data using table from config section \"comparison_settings\" key \"TRGT_TABLE\" on PostgreSQL", "location": "features/database/data_comparison.feature:15"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:16"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:17"}, {"keyword": "And", "step_type": "when", "name": "I compare DataFrames using primary key from config section \"comparison_settings\"", "location": "features/database/data_comparison.feature:18"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:19"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"90.0\"", "location": "features/database/data_comparison.feature:20"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:21"}, {"keyword": "And", "step_type": "then", "name": "I export all results to Excel file \"enhanced_oracle_to_postgres_comparison.xlsx\"", "location": "features/database/data_comparison.feature:22"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:23"}, {"keyword": "And", "step_type": "then", "name": "I save comparison results as JSON file \"enhanced_comparison_results.json\"", "location": "features/database/data_comparison.feature:24"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Enhanced comparison with omit columns, values, and quality reporting", "tags": ["database", "oracle", "postgres", "enhanced_comparison", "quality_reporting"], "location": "features/database/data_comparison.feature:27", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.002586841583251953}}, {"keyword": "Given", "step_type": "given", "name": "I connect to Oracle database using \"SAT_ORACLE\" configuration", "location": "features/database/data_comparison.feature:28", "match": {"location": "features/steps/database_steps.py:1417", "arguments": [{"value": "SAT_ORACLE", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.016111135482788086, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 258, in load_db_config_when_needed", "    raise ConfigurationError(f\"Section '{section_name}' not found. Available database sections: {available}\")", "utils.custom_exceptions.ConfigurationError: Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None}", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1424, in connect_to_oracle", "    db_config = load_db_config_when_needed(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 283, in load_db_config_when_needed", "    raise ConfigurationError(f\"Failed to load database configuration for '{section_name}': {str(e)}\")", "utils.custom_exceptions.ConfigurationError: Failed to load database configuration for 'SAT_ORACLE': Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None} | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "And", "step_type": "given", "name": "I connect to PostgreSQL database using \"SAT_POSTGRES\" configuration", "location": "features/database/data_comparison.feature:29"}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:30"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT emp_id, name, salary, last_updated, status, created_date FROM employees\" on Oracle as source", "location": "features/database/data_comparison.feature:31"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT emp_id, name, salary, last_updated, status, created_date FROM employees\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:32"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:33"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:34"}, {"keyword": "And", "step_type": "when", "name": "I compare DataFrames using primary key \"emp_id\" omitting columns \"last_updated,created_date\" and values \"N,None,NULL,---,INACTIVE,inactive\"", "location": "features/database/data_comparison.feature:35"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:36"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"95.0\"", "location": "features/database/data_comparison.feature:37"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:38"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:39"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:40"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Enhanced numeric precision handling with performance tracking", "tags": ["database", "oracle", "postgres", "numeric_precision", "enhanced"], "location": "features/database/data_comparison.feature:43", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0012791156768798828}}, {"keyword": "Given", "step_type": "given", "name": "I connect to Oracle database using \"SAT_ORACLE\" configuration", "location": "features/database/data_comparison.feature:44", "match": {"location": "features/steps/database_steps.py:1417", "arguments": [{"value": "SAT_ORACLE", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.013730049133300781, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 258, in load_db_config_when_needed", "    raise ConfigurationError(f\"Section '{section_name}' not found. Available database sections: {available}\")", "utils.custom_exceptions.ConfigurationError: Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None}", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1424, in connect_to_oracle", "    db_config = load_db_config_when_needed(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 283, in load_db_config_when_needed", "    raise ConfigurationError(f\"Failed to load database configuration for '{section_name}': {str(e)}\")", "utils.custom_exceptions.ConfigurationError: Failed to load database configuration for 'SAT_ORACLE': Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None} | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "And", "step_type": "given", "name": "I connect to PostgreSQL database using \"SAT_POSTGRES\" configuration", "location": "features/database/data_comparison.feature:45"}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:46"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT id, amount, quantity, rate FROM transactions\" on Oracle as source", "location": "features/database/data_comparison.feature:47"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT id, amount, quantity, rate FROM transactions\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:48"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:49"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:50"}, {"keyword": "And", "step_type": "when", "name": "I compare DataFrames using primary key \"id\"", "location": "features/database/data_comparison.feature:51"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:52"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:53"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:54"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:55"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Enhanced comparison omitting timestamp columns with quality validation", "tags": ["database", "oracle", "postgres", "omit_columns_only", "enhanced"], "location": "features/database/data_comparison.feature:58", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.001802206039428711}}, {"keyword": "Given", "step_type": "given", "name": "I connect to Oracle database using \"SAT_ORACLE\" configuration", "location": "features/database/data_comparison.feature:59", "match": {"location": "features/steps/database_steps.py:1417", "arguments": [{"value": "SAT_ORACLE", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.008051156997680664, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 258, in load_db_config_when_needed", "    raise ConfigurationError(f\"Section '{section_name}' not found. Available database sections: {available}\")", "utils.custom_exceptions.ConfigurationError: Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None}", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1424, in connect_to_oracle", "    db_config = load_db_config_when_needed(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 283, in load_db_config_when_needed", "    raise ConfigurationError(f\"Failed to load database configuration for '{section_name}': {str(e)}\")", "utils.custom_exceptions.ConfigurationError: Failed to load database configuration for 'SAT_ORACLE': Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None} | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "And", "step_type": "given", "name": "I connect to PostgreSQL database using \"SAT_POSTGRES\" configuration", "location": "features/database/data_comparison.feature:60"}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:61"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT customer_id, name, email, status, created_date, modified_date FROM customers\" on Oracle as source", "location": "features/database/data_comparison.feature:62"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT customer_id, name, email, status, created_date, modified_date FROM customers\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:63"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:64"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:65"}, {"keyword": "Then", "step_type": "then", "name": "source DataFrame should have no duplicate records", "location": "features/database/data_comparison.feature:66"}, {"keyword": "And", "step_type": "then", "name": "target DataFrame should have no duplicate records", "location": "features/database/data_comparison.feature:67"}, {"keyword": "When", "step_type": "when", "name": "I compare DataFrames using primary key \"customer_id\" omitting columns \"created_date,modified_date\"", "location": "features/database/data_comparison.feature:68"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:69"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"85.0\"", "location": "features/database/data_comparison.feature:70"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:71"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:72"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Enhanced comparison treating NULL variants as equal with comprehensive reporting", "tags": ["database", "oracle", "postgres", "omit_values_only", "enhanced"], "location": "features/database/data_comparison.feature:75", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0007398128509521484}}, {"keyword": "Given", "step_type": "given", "name": "I connect to Oracle database using \"SAT_ORACLE\" configuration", "location": "features/database/data_comparison.feature:76", "match": {"location": "features/steps/database_steps.py:1417", "arguments": [{"value": "SAT_ORACLE", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.004337787628173828, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 258, in load_db_config_when_needed", "    raise ConfigurationError(f\"Section '{section_name}' not found. Available database sections: {available}\")", "utils.custom_exceptions.ConfigurationError: Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None}", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1424, in connect_to_oracle", "    db_config = load_db_config_when_needed(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 283, in load_db_config_when_needed", "    raise ConfigurationError(f\"Failed to load database configuration for '{section_name}': {str(e)}\")", "utils.custom_exceptions.ConfigurationError: Failed to load database configuration for 'SAT_ORACLE': Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None} | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "And", "step_type": "given", "name": "I connect to PostgreSQL database using \"SAT_POSTGRES\" configuration", "location": "features/database/data_comparison.feature:77"}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:78"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT product_id, description, category, status FROM products\" on Oracle as source", "location": "features/database/data_comparison.feature:79"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT product_id, description, category, status FROM products\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:80"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:81"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:82"}, {"keyword": "And", "step_type": "when", "name": "I compare DataFrames using primary key \"product_id\" omitting values \"NULL,None,N/A,---,N,NONE,null,NaN\"", "location": "features/database/data_comparison.feature:83"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:84"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:85"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:86"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:87"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Enhanced full audit comparison with all advanced features", "tags": ["database", "oracle", "postgres", "full_audit_comparison", "enhanced"], "location": "features/database/data_comparison.feature:90", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.002063751220703125}}, {"keyword": "Given", "step_type": "given", "name": "I connect to Oracle database using \"SAT_ORACLE\" configuration", "location": "features/database/data_comparison.feature:91", "match": {"location": "features/steps/database_steps.py:1417", "arguments": [{"value": "SAT_ORACLE", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.026185035705566406, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 258, in load_db_config_when_needed", "    raise ConfigurationError(f\"Section '{section_name}' not found. Available database sections: {available}\")", "utils.custom_exceptions.ConfigurationError: Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None}", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1424, in connect_to_oracle", "    db_config = load_db_config_when_needed(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 283, in load_db_config_when_needed", "    raise ConfigurationError(f\"Failed to load database configuration for '{section_name}': {str(e)}\")", "utils.custom_exceptions.ConfigurationError: Failed to load database configuration for 'SAT_ORACLE': Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None} | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "And", "step_type": "given", "name": "I connect to PostgreSQL database using \"SAT_POSTGRES\" configuration", "location": "features/database/data_comparison.feature:92"}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:93"}, {"keyword": "And", "step_type": "when", "name": "I load source data using table from config section \"comparison_settings\" key \"SRCE_TABLE\" on Oracle", "location": "features/database/data_comparison.feature:94"}, {"keyword": "And", "step_type": "when", "name": "I load target data using table from config section \"comparison_settings\" key \"TRGT_TABLE\" on PostgreSQL", "location": "features/database/data_comparison.feature:95"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:96"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:97"}, {"keyword": "Then", "step_type": "then", "name": "source DataFrame should have no duplicate records", "location": "features/database/data_comparison.feature:98"}, {"keyword": "And", "step_type": "then", "name": "target DataFrame should have no duplicate records", "location": "features/database/data_comparison.feature:99"}, {"keyword": "When", "step_type": "when", "name": "I compare DataFrames using primary key from config section \"comparison_settings\" omitting columns \"last_updated_timestamp,created_date,audit_user\" and values \"N,None,NULL,---,INACTIVE,inactive,SYSTEM\"", "location": "features/database/data_comparison.feature:100"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:101"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"92.0\"", "location": "features/database/data_comparison.feature:102"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:103"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:104"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:105"}, {"keyword": "And", "step_type": "then", "name": "I save comparison results as JSON file \"enhanced_full_audit_results.json\"", "location": "features/database/data_comparison.feature:106"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Enhanced Oracle to Oracle comparison with advanced validation", "tags": ["database", "oracle", "direct_query", "enhanced"], "location": "features/database/data_comparison.feature:109", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.006309032440185547}}, {"keyword": "Given", "step_type": "given", "name": "I connect to Oracle database using \"SAT_ORACLE\" configuration", "location": "features/database/data_comparison.feature:110", "match": {"location": "features/steps/database_steps.py:1417", "arguments": [{"value": "SAT_ORACLE", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.0043299198150634766, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 258, in load_db_config_when_needed", "    raise ConfigurationError(f\"Section '{section_name}' not found. Available database sections: {available}\")", "utils.custom_exceptions.ConfigurationError: Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None}", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1424, in connect_to_oracle", "    db_config = load_db_config_when_needed(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 283, in load_db_config_when_needed", "    raise ConfigurationError(f\"Failed to load database configuration for '{section_name}': {str(e)}\")", "utils.custom_exceptions.ConfigurationError: Failed to load database configuration for 'SAT_ORACLE': Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None} | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:111"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT emp_id, first_name, last_name, salary, department FROM employees WHERE dept_id = 10\" on Oracle as source", "location": "features/database/data_comparison.feature:112"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT emp_id, first_name, last_name, salary, department FROM employees_backup WHERE dept_id = 10\" on Oracle as target", "location": "features/database/data_comparison.feature:113"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:114"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:115"}, {"keyword": "And", "step_type": "when", "name": "I compare DataFrames using primary key \"emp_id\"", "location": "features/database/data_comparison.feature:116"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:117"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"98.0\"", "location": "features/database/data_comparison.feature:118"}, {"keyword": "And", "step_type": "then", "name": "there should be no missing records in either DataFrame", "location": "features/database/data_comparison.feature:119"}, {"keyword": "And", "step_type": "then", "name": "all fields should match between source and target DataFrames", "location": "features/database/data_comparison.feature:120"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:121"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:122"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Enhanced PostgreSQL to PostgreSQL comparison with comprehensive data validation", "tags": ["database", "postgres", "postgres", "validation", "enhanced"], "location": "features/database/data_comparison.feature:125", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.002357959747314453}}, {"keyword": "Given", "step_type": "given", "name": "I connect to PostgreSQL database using \"SAT_POSTGRES\" configuration", "location": "features/database/data_comparison.feature:126", "match": {"location": "features/steps/database_steps.py:1450", "arguments": [{"value": "SAT_POSTGRES", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.006205320358276367, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 258, in load_db_config_when_needed", "    raise ConfigurationError(f\"Section '{section_name}' not found. Available database sections: {available}\")", "utils.custom_exceptions.ConfigurationError: Section 'SAT_POSTGRES' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None}", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1457, in connect_to_postgres", "    db_config = load_db_config_when_needed(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 283, in load_db_config_when_needed", "    raise ConfigurationError(f\"Failed to load database configuration for '{section_name}': {str(e)}\")", "utils.custom_exceptions.ConfigurationError: Failed to load database configuration for 'SAT_POSTGRES': Section 'SAT_POSTGRES' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None} | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:127"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT customer_id, customer_name, email, registration_date, status FROM customers\" on PostgreSQL as source", "location": "features/database/data_comparison.feature:128"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT customer_id, customer_name, email, registration_date, status FROM customers_replica\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:129"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:130"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:131"}, {"keyword": "Then", "step_type": "then", "name": "source DataFrame should have no duplicate records", "location": "features/database/data_comparison.feature:132"}, {"keyword": "And", "step_type": "then", "name": "target DataFrame should have no duplicate records", "location": "features/database/data_comparison.feature:133"}, {"keyword": "When", "step_type": "when", "name": "I compare DataFrames using primary key \"customer_id\"", "location": "features/database/data_comparison.feature:134"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:135"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"95.0\"", "location": "features/database/data_comparison.feature:136"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:137"}, {"keyword": "And", "step_type": "then", "name": "I print DataFrame info for source", "location": "features/database/data_comparison.feature:138"}, {"keyword": "And", "step_type": "then", "name": "I print DataFrame info for target", "location": "features/database/data_comparison.feature:139"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:140"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:141"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Enhanced comparison with expected differences and comprehensive validation", "tags": ["database", "oracle", "postgres", "expected_differences", "enhanced"], "location": "features/database/data_comparison.feature:144", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0007190704345703125}}, {"keyword": "Given", "step_type": "given", "name": "I connect to Oracle database using \"SAT_ORACLE\" configuration", "location": "features/database/data_comparison.feature:145", "match": {"location": "features/steps/database_steps.py:1417", "arguments": [{"value": "SAT_ORACLE", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.005079984664916992, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 258, in load_db_config_when_needed", "    raise ConfigurationError(f\"Section '{section_name}' not found. Available database sections: {available}\")", "utils.custom_exceptions.ConfigurationError: Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None}", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1424, in connect_to_oracle", "    db_config = load_db_config_when_needed(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 283, in load_db_config_when_needed", "    raise ConfigurationError(f\"Failed to load database configuration for '{section_name}': {str(e)}\")", "utils.custom_exceptions.ConfigurationError: Failed to load database configuration for 'SAT_ORACLE': Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None} | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "And", "step_type": "given", "name": "I connect to PostgreSQL database using \"SAT_POSTGRES\" configuration", "location": "features/database/data_comparison.feature:146"}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:147"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT product_id, product_name, price, category, status FROM products WHERE status = 'ACTIVE'\" on Oracle as source", "location": "features/database/data_comparison.feature:148"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT product_id, product_name, price, category, status FROM products WHERE status = 'ACTIVE'\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:149"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:150"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:151"}, {"keyword": "And", "step_type": "when", "name": "I compare DataFrames using primary key \"product_id\"", "location": "features/database/data_comparison.feature:152"}, {"keyword": "Then", "step_type": "then", "name": "the source DataFrame should have \"150\" records", "location": "features/database/data_comparison.feature:153"}, {"keyword": "And", "step_type": "then", "name": "the target DataFrame should have \"148\" records", "location": "features/database/data_comparison.feature:154"}, {"keyword": "And", "step_type": "then", "name": "there should be \"2\" records missing in target", "location": "features/database/data_comparison.feature:155"}, {"keyword": "And", "step_type": "then", "name": "there should be \"0\" records missing in source", "location": "features/database/data_comparison.feature:156"}, {"keyword": "And", "step_type": "then", "name": "field \"price\" should have \"5\" delta records", "location": "features/database/data_comparison.feature:157"}, {"keyword": "And", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:158"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:159"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:160"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Enhanced data extraction and export from Oracle with quality validation", "tags": ["database", "oracle", "data_export", "enhanced"], "location": "features/database/data_comparison.feature:163", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.001157999038696289}}, {"keyword": "Given", "step_type": "given", "name": "I connect to Oracle database using \"SAT_ORACLE\" configuration", "location": "features/database/data_comparison.feature:164", "match": {"location": "features/steps/database_steps.py:1417", "arguments": [{"value": "SAT_ORACLE", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.009772062301635742, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 258, in load_db_config_when_needed", "    raise ConfigurationError(f\"Section '{section_name}' not found. Available database sections: {available}\")", "utils.custom_exceptions.ConfigurationError: Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None}", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1424, in connect_to_oracle", "    db_config = load_db_config_when_needed(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 283, in load_db_config_when_needed", "    raise ConfigurationError(f\"Failed to load database configuration for '{section_name}': {str(e)}\")", "utils.custom_exceptions.ConfigurationError: Failed to load database configuration for 'SAT_ORACLE': Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None} | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:165"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT order_id, customer_id, order_date, total_amount, status FROM orders WHERE order_date >= SYSDATE - 30\" on Oracle as source", "location": "features/database/data_comparison.feature:166"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:167"}, {"keyword": "Then", "step_type": "then", "name": "source DataFrame should have no duplicate records", "location": "features/database/data_comparison.feature:168"}, {"keyword": "And", "step_type": "then", "name": "I print DataFrame info for source", "location": "features/database/data_comparison.feature:169"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:170"}, {"keyword": "And", "step_type": "then", "name": "I export source DataFrame to CSV \"enhanced_oracle_orders_export.csv\"", "location": "features/database/data_comparison.feature:171"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Enhanced data extraction and export from PostgreSQL with comprehensive validation", "tags": ["database", "postgres", "data_export", "enhanced"], "location": "features/database/data_comparison.feature:174", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0028171539306640625}}, {"keyword": "Given", "step_type": "given", "name": "I connect to PostgreSQL database using \"SAT_POSTGRES\" configuration", "location": "features/database/data_comparison.feature:175", "match": {"location": "features/steps/database_steps.py:1450", "arguments": [{"value": "SAT_POSTGRES", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.01004791259765625, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 258, in load_db_config_when_needed", "    raise ConfigurationError(f\"Section '{section_name}' not found. Available database sections: {available}\")", "utils.custom_exceptions.ConfigurationError: Section 'SAT_POSTGRES' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None}", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1457, in connect_to_postgres", "    db_config = load_db_config_when_needed(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 283, in load_db_config_when_needed", "    raise ConfigurationError(f\"Failed to load database configuration for '{section_name}': {str(e)}\")", "utils.custom_exceptions.ConfigurationError: Failed to load database configuration for 'SAT_POSTGRES': Section 'SAT_POSTGRES' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None} | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:176"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT user_id, username, email, created_at, status FROM users WHERE created_at >= CURRENT_DATE - INTERVAL '30 days'\" on PostgreSQL as source", "location": "features/database/data_comparison.feature:177"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:178"}, {"keyword": "Then", "step_type": "then", "name": "source DataFrame should have no duplicate records", "location": "features/database/data_comparison.feature:179"}, {"keyword": "And", "step_type": "then", "name": "I print DataFrame info for source", "location": "features/database/data_comparison.feature:180"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:181"}, {"keyword": "And", "step_type": "then", "name": "I export source DataFrame to CSV \"enhanced_postgres_users_export.csv\"", "location": "features/database/data_comparison.feature:182"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Enhanced complete data migration validation with all export formats and quality reporting", "tags": ["database", "oracle", "postgres", "full_comparison", "enhanced"], "location": "features/database/data_comparison.feature:185", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0007119178771972656}}, {"keyword": "Given", "step_type": "given", "name": "I connect to Oracle database using \"SAT_ORACLE\" configuration", "location": "features/database/data_comparison.feature:186", "match": {"location": "features/steps/database_steps.py:1417", "arguments": [{"value": "SAT_ORACLE", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.004700183868408203, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 258, in load_db_config_when_needed", "    raise ConfigurationError(f\"Section '{section_name}' not found. Available database sections: {available}\")", "utils.custom_exceptions.ConfigurationError: Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None}", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1424, in connect_to_oracle", "    db_config = load_db_config_when_needed(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 283, in load_db_config_when_needed", "    raise ConfigurationError(f\"Failed to load database configuration for '{section_name}': {str(e)}\")", "utils.custom_exceptions.ConfigurationError: Failed to load database configuration for 'SAT_ORACLE': Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None} | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "And", "step_type": "given", "name": "I connect to PostgreSQL database using \"SAT_POSTGRES\" configuration", "location": "features/database/data_comparison.feature:187"}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:188"}, {"keyword": "And", "step_type": "when", "name": "I read query from config section \"queries\" key \"migration_source_query\"", "location": "features/database/data_comparison.feature:189"}, {"keyword": "And", "step_type": "when", "name": "I execute query on Oracle and store as source DataFrame", "location": "features/database/data_comparison.feature:190"}, {"keyword": "When", "step_type": "when", "name": "I read query from config section \"queries\" key \"migration_target_query\"", "location": "features/database/data_comparison.feature:191"}, {"keyword": "And", "step_type": "when", "name": "I execute query on PostgreSQL and store as target DataFrame", "location": "features/database/data_comparison.feature:192"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:193"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:194"}, {"keyword": "Then", "step_type": "then", "name": "source DataFrame should have no duplicate records", "location": "features/database/data_comparison.feature:195"}, {"keyword": "And", "step_type": "then", "name": "target DataFrame should have no duplicate records", "location": "features/database/data_comparison.feature:196"}, {"keyword": "When", "step_type": "when", "name": "I compare DataFrames using primary key from config section \"comparison_settings\"", "location": "features/database/data_comparison.feature:197"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:198"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"90.0\"", "location": "features/database/data_comparison.feature:199"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:200"}, {"keyword": "And", "step_type": "then", "name": "I print DataFrame info for source", "location": "features/database/data_comparison.feature:201"}, {"keyword": "And", "step_type": "then", "name": "I print DataFrame info for target", "location": "features/database/data_comparison.feature:202"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:203"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:204"}, {"keyword": "And", "step_type": "then", "name": "I save comparison results as JSON file \"enhanced_migration_results.json\"", "location": "features/database/data_comparison.feature:205"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Enhanced large dataset comparison with memory optimization and performance monitoring", "tags": ["database", "oracle", "postgres", "large_dataset", "enhanced", "performance"], "location": "features/database/data_comparison.feature:208", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0006601810455322266}}, {"keyword": "Given", "step_type": "given", "name": "I connect to Oracle database using \"SAT_ORACLE\" configuration", "location": "features/database/data_comparison.feature:209", "match": {"location": "features/steps/database_steps.py:1417", "arguments": [{"value": "SAT_ORACLE", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.009726762771606445, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 258, in load_db_config_when_needed", "    raise ConfigurationError(f\"Section '{section_name}' not found. Available database sections: {available}\")", "utils.custom_exceptions.ConfigurationError: Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None}", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1424, in connect_to_oracle", "    db_config = load_db_config_when_needed(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 283, in load_db_config_when_needed", "    raise ConfigurationError(f\"Failed to load database configuration for '{section_name}': {str(e)}\")", "utils.custom_exceptions.ConfigurationError: Failed to load database configuration for 'SAT_ORACLE': Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None} | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "And", "step_type": "given", "name": "I connect to PostgreSQL database using \"SAT_POSTGRES\" configuration", "location": "features/database/data_comparison.feature:210"}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:211"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT transaction_id, account_id, transaction_type, amount, transaction_date, status FROM transactions WHERE transaction_date >= SYSDATE - 7\" on Oracle as source", "location": "features/database/data_comparison.feature:212"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT transaction_id, account_id, transaction_type, amount, transaction_date, status FROM transactions WHERE transaction_date >= CURRENT_DATE - INTERVAL '7 days'\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:213"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:214"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:215"}, {"keyword": "Then", "step_type": "then", "name": "source DataFrame should have no duplicate records", "location": "features/database/data_comparison.feature:216"}, {"keyword": "And", "step_type": "then", "name": "target DataFrame should have no duplicate records", "location": "features/database/data_comparison.feature:217"}, {"keyword": "When", "step_type": "when", "name": "I compare DataFrames using primary key \"transaction_id\" omitting columns \"transaction_date\" and values \"NULL,None,---\"", "location": "features/database/data_comparison.feature:218"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:219"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"88.0\"", "location": "features/database/data_comparison.feature:220"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:221"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:222"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:223"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Enhanced comparison of tables within the same Oracle database", "tags": ["database", "oracle", "oracle", "same_db_comparison", "enhanced"], "location": "features/database/data_comparison.feature:226", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0006890296936035156}}, {"keyword": "Given", "step_type": "given", "name": "I connect to Oracle database using \"SAT_ORACLE\" configuration", "location": "features/database/data_comparison.feature:227", "match": {"location": "features/steps/database_steps.py:1417", "arguments": [{"value": "SAT_ORACLE", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.00793313980102539, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 258, in load_db_config_when_needed", "    raise ConfigurationError(f\"Section '{section_name}' not found. Available database sections: {available}\")", "utils.custom_exceptions.ConfigurationError: Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None}", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1424, in connect_to_oracle", "    db_config = load_db_config_when_needed(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 283, in load_db_config_when_needed", "    raise ConfigurationError(f\"Failed to load database configuration for '{section_name}': {str(e)}\")", "utils.custom_exceptions.ConfigurationError: Failed to load database configuration for 'SAT_ORACLE': Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None} | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:228"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT emp_id, first_name, last_name, department, salary, status FROM employees\" on Oracle as source", "location": "features/database/data_comparison.feature:229"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT emp_id, first_name, last_name, department, salary, status FROM employees_archive\" on Oracle as target", "location": "features/database/data_comparison.feature:230"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:231"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:232"}, {"keyword": "And", "step_type": "when", "name": "I compare DataFrames using primary key \"emp_id\" omitting values \"INACTIVE,inactive,NULL,None\"", "location": "features/database/data_comparison.feature:233"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:234"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:235"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:236"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:237"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Enhanced comparison of tables within the same PostgreSQL database", "tags": ["database", "postgres", "postgres", "same_db_comparison", "enhanced"], "location": "features/database/data_comparison.feature:240", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0006871223449707031}}, {"keyword": "Given", "step_type": "given", "name": "I connect to PostgreSQL database using \"SAT_POSTGRES\" configuration", "location": "features/database/data_comparison.feature:241", "match": {"location": "features/steps/database_steps.py:1450", "arguments": [{"value": "SAT_POSTGRES", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.004330873489379883, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 258, in load_db_config_when_needed", "    raise ConfigurationError(f\"Section '{section_name}' not found. Available database sections: {available}\")", "utils.custom_exceptions.ConfigurationError: Section 'SAT_POSTGRES' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None}", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1457, in connect_to_postgres", "    db_config = load_db_config_when_needed(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 283, in load_db_config_when_needed", "    raise ConfigurationError(f\"Failed to load database configuration for '{section_name}': {str(e)}\")", "utils.custom_exceptions.ConfigurationError: Failed to load database configuration for 'SAT_POSTGRES': Section 'SAT_POSTGRES' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None} | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:242"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT product_id, product_name, category, price, stock_quantity, status FROM products\" on PostgreSQL as source", "location": "features/database/data_comparison.feature:243"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT product_id, product_name, category, price, stock_quantity, status FROM products_staging\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:244"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:245"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:246"}, {"keyword": "And", "step_type": "when", "name": "I compare DataFrames using primary key \"product_id\"", "location": "features/database/data_comparison.feature:247"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:248"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"93.0\"", "location": "features/database/data_comparison.feature:249"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:250"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:251"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:252"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Enhanced configuration-driven comparison test with quality validation", "tags": ["database", "oracle", "postgres", "config_driven", "enhanced"], "location": "features/database/data_comparison.feature:255", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0007281303405761719}}, {"keyword": "Given", "step_type": "given", "name": "I connect to Oracle database using \"SAT_ORACLE\" configuration", "location": "features/database/data_comparison.feature:256", "match": {"location": "features/steps/database_steps.py:1417", "arguments": [{"value": "SAT_ORACLE", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.008274078369140625, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 258, in load_db_config_when_needed", "    raise ConfigurationError(f\"Section '{section_name}' not found. Available database sections: {available}\")", "utils.custom_exceptions.ConfigurationError: Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None}", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1424, in connect_to_oracle", "    db_config = load_db_config_when_needed(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 283, in load_db_config_when_needed", "    raise ConfigurationError(f\"Failed to load database configuration for '{section_name}': {str(e)}\")", "utils.custom_exceptions.ConfigurationError: Failed to load database configuration for 'SAT_ORACLE': Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None} | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "And", "step_type": "given", "name": "I connect to PostgreSQL database using \"SAT_POSTGRES\" configuration", "location": "features/database/data_comparison.feature:257"}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:258"}, {"keyword": "And", "step_type": "when", "name": "I load source data using table from config section \"comparison_settings\" key \"SRCE_TABLE\" on Oracle", "location": "features/database/data_comparison.feature:259"}, {"keyword": "And", "step_type": "when", "name": "I load target data using table from config section \"comparison_settings\" key \"TRGT_TABLE\" on PostgreSQL", "location": "features/database/data_comparison.feature:260"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:261"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:262"}, {"keyword": "And", "step_type": "when", "name": "I compare DataFrames using primary key from config section \"comparison_settings\"", "location": "features/database/data_comparison.feature:263"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:264"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"95.0\"", "location": "features/database/data_comparison.feature:265"}, {"keyword": "And", "step_type": "then", "name": "there should be no missing records in either DataFrame", "location": "features/database/data_comparison.feature:266"}, {"keyword": "And", "step_type": "then", "name": "all fields should match between source and target DataFrames", "location": "features/database/data_comparison.feature:267"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:268"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:269"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Enhanced data quality validation and comparison with comprehensive reporting", "tags": ["database", "oracle", "postgres", "data_quality", "enhanced"], "location": "features/database/data_comparison.feature:272", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0006818771362304688}}, {"keyword": "Given", "step_type": "given", "name": "I connect to Oracle database using \"SAT_ORACLE\" configuration", "location": "features/database/data_comparison.feature:273", "match": {"location": "features/steps/database_steps.py:1417", "arguments": [{"value": "SAT_ORACLE", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.006993770599365234, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 258, in load_db_config_when_needed", "    raise ConfigurationError(f\"Section '{section_name}' not found. Available database sections: {available}\")", "utils.custom_exceptions.ConfigurationError: Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None}", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1424, in connect_to_oracle", "    db_config = load_db_config_when_needed(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 283, in load_db_config_when_needed", "    raise ConfigurationError(f\"Failed to load database configuration for '{section_name}': {str(e)}\")", "utils.custom_exceptions.ConfigurationError: Failed to load database configuration for 'SAT_ORACLE': Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None} | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "And", "step_type": "given", "name": "I connect to PostgreSQL database using \"SAT_POSTGRES\" configuration", "location": "features/database/data_comparison.feature:274"}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:275"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT customer_id, customer_name, email, phone, address, status FROM customer_master\" on Oracle as source", "location": "features/database/data_comparison.feature:276"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT customer_id, customer_name, email, phone, address, status FROM customer_master\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:277"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:278"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:279"}, {"keyword": "Then", "step_type": "then", "name": "source DataFrame should have no duplicate records", "location": "features/database/data_comparison.feature:280"}, {"keyword": "And", "step_type": "then", "name": "target DataFrame should have no duplicate records", "location": "features/database/data_comparison.feature:281"}, {"keyword": "When", "step_type": "when", "name": "I compare DataFrames using primary key \"customer_id\" omitting values \"NULL,None,N/A,---\"", "location": "features/database/data_comparison.feature:282"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:283"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"97.0\"", "location": "features/database/data_comparison.feature:284"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:285"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:286"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:287"}, {"keyword": "And", "step_type": "then", "name": "I save comparison results as JSON file \"enhanced_data_quality_results.json\"", "location": "features/database/data_comparison.feature:288"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Enhanced validation of specific field differences and counts with quality metrics", "tags": ["database", "oracle", "postgres", "specific_validation", "enhanced"], "location": "features/database/data_comparison.feature:291", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0006937980651855469}}, {"keyword": "Given", "step_type": "given", "name": "I connect to Oracle database using \"SAT_ORACLE\" configuration", "location": "features/database/data_comparison.feature:292", "match": {"location": "features/steps/database_steps.py:1417", "arguments": [{"value": "SAT_ORACLE", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.004312038421630859, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 258, in load_db_config_when_needed", "    raise ConfigurationError(f\"Section '{section_name}' not found. Available database sections: {available}\")", "utils.custom_exceptions.ConfigurationError: Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None}", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1424, in connect_to_oracle", "    db_config = load_db_config_when_needed(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 283, in load_db_config_when_needed", "    raise ConfigurationError(f\"Failed to load database configuration for '{section_name}': {str(e)}\")", "utils.custom_exceptions.ConfigurationError: Failed to load database configuration for 'SAT_ORACLE': Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None} | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "And", "step_type": "given", "name": "I connect to PostgreSQL database using \"SAT_POSTGRES\" configuration", "location": "features/database/data_comparison.feature:293"}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:294"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT account_id, account_type, balance, status, last_updated FROM accounts\" on Oracle as source", "location": "features/database/data_comparison.feature:295"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT account_id, account_type, balance, status, last_updated FROM accounts\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:296"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:297"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:298"}, {"keyword": "And", "step_type": "when", "name": "I compare DataFrames using primary key \"account_id\" omitting columns \"last_updated\"", "location": "features/database/data_comparison.feature:299"}, {"keyword": "Then", "step_type": "then", "name": "the source DataFrame should have \"1000\" records", "location": "features/database/data_comparison.feature:300"}, {"keyword": "And", "step_type": "then", "name": "the target DataFrame should have \"995\" records", "location": "features/database/data_comparison.feature:301"}, {"keyword": "And", "step_type": "then", "name": "there should be \"5\" records missing in target", "location": "features/database/data_comparison.feature:302"}, {"keyword": "And", "step_type": "then", "name": "there should be \"0\" records missing in source", "location": "features/database/data_comparison.feature:303"}, {"keyword": "And", "step_type": "then", "name": "field \"balance\" should have \"0\" delta records", "location": "features/database/data_comparison.feature:304"}, {"keyword": "And", "step_type": "then", "name": "field \"status\" should have \"2\" delta records", "location": "features/database/data_comparison.feature:305"}, {"keyword": "And", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:306"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:307"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:308"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Enhanced error handling and edge cases with comprehensive validation", "tags": ["database", "oracle", "postgres", "error_handling", "enhanced"], "location": "features/database/data_comparison.feature:311", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.000881195068359375}}, {"keyword": "Given", "step_type": "given", "name": "I connect to Oracle database using \"SAT_ORACLE\" configuration", "location": "features/database/data_comparison.feature:312", "match": {"location": "features/steps/database_steps.py:1417", "arguments": [{"value": "SAT_ORACLE", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.005400180816650391, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 258, in load_db_config_when_needed", "    raise ConfigurationError(f\"Section '{section_name}' not found. Available database sections: {available}\")", "utils.custom_exceptions.ConfigurationError: Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None}", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1424, in connect_to_oracle", "    db_config = load_db_config_when_needed(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 283, in load_db_config_when_needed", "    raise ConfigurationError(f\"Failed to load database configuration for '{section_name}': {str(e)}\")", "utils.custom_exceptions.ConfigurationError: Failed to load database configuration for 'SAT_ORACLE': Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None} | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "And", "step_type": "given", "name": "I connect to PostgreSQL database using \"SAT_POSTGRES\" configuration", "location": "features/database/data_comparison.feature:313"}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:314"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT id, name, description, status FROM test_table WHERE id BETWEEN 1 AND 100\" on Oracle as source", "location": "features/database/data_comparison.feature:315"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT id, name, description, status FROM test_table WHERE id BETWEEN 1 AND 100\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:316"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:317"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:318"}, {"keyword": "And", "step_type": "when", "name": "I compare DataFrames using primary key \"id\"", "location": "features/database/data_comparison.feature:319"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:320"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:321"}, {"keyword": "And", "step_type": "then", "name": "I print DataFrame info for source", "location": "features/database/data_comparison.feature:322"}, {"keyword": "And", "step_type": "then", "name": "I print DataFrame info for target", "location": "features/database/data_comparison.feature:323"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:324"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:325"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Enhanced mix of config queries and direct queries with performance tracking", "tags": ["database", "oracle", "postgres", "mixed_queries", "enhanced"], "location": "features/database/data_comparison.feature:328", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.005290985107421875}}, {"keyword": "Given", "step_type": "given", "name": "I connect to Oracle database using \"SAT_ORACLE\" configuration", "location": "features/database/data_comparison.feature:329", "match": {"location": "features/steps/database_steps.py:1417", "arguments": [{"value": "SAT_ORACLE", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.22738981246948242, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 258, in load_db_config_when_needed", "    raise ConfigurationError(f\"Section '{section_name}' not found. Available database sections: {available}\")", "utils.custom_exceptions.ConfigurationError: Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None}", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1424, in connect_to_oracle", "    db_config = load_db_config_when_needed(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 283, in load_db_config_when_needed", "    raise ConfigurationError(f\"Failed to load database configuration for '{section_name}': {str(e)}\")", "utils.custom_exceptions.ConfigurationError: Failed to load database configuration for 'SAT_ORACLE': Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None} | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "And", "step_type": "given", "name": "I connect to PostgreSQL database using \"SAT_POSTGRES\" configuration", "location": "features/database/data_comparison.feature:330"}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:331"}, {"keyword": "And", "step_type": "when", "name": "I read query from config section \"queries\" key \"complex_source_query\"", "location": "features/database/data_comparison.feature:332"}, {"keyword": "And", "step_type": "when", "name": "I execute query on Oracle and store as source DataFrame", "location": "features/database/data_comparison.feature:333"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT report_id, report_name, created_by, created_date, status FROM reports\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:334"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:335"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:336"}, {"keyword": "And", "step_type": "when", "name": "I compare DataFrames using primary key \"report_id\" omitting columns \"created_date\"", "location": "features/database/data_comparison.feature:337"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:338"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:339"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:340"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:341"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Enhanced CLOB and XML data handling with quality validation", "tags": ["database", "oracle", "postgres", "clob_xml_handling", "enhanced"], "location": "features/database/data_comparison.feature:344", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0012516975402832031}}, {"keyword": "Given", "step_type": "given", "name": "I connect to Oracle database using \"SAT_ORACLE\" configuration", "location": "features/database/data_comparison.feature:345", "match": {"location": "features/steps/database_steps.py:1417", "arguments": [{"value": "SAT_ORACLE", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.008033037185668945, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 258, in load_db_config_when_needed", "    raise ConfigurationError(f\"Section '{section_name}' not found. Available database sections: {available}\")", "utils.custom_exceptions.ConfigurationError: Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None}", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1424, in connect_to_oracle", "    db_config = load_db_config_when_needed(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 283, in load_db_config_when_needed", "    raise ConfigurationError(f\"Failed to load database configuration for '{section_name}': {str(e)}\")", "utils.custom_exceptions.ConfigurationError: Failed to load database configuration for 'SAT_ORACLE': Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None} | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "And", "step_type": "given", "name": "I connect to PostgreSQL database using \"SAT_POSTGRES\" configuration", "location": "features/database/data_comparison.feature:346"}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:347"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT doc_id, title, xml_content, clob_data, status FROM documents WHERE doc_type = 'XML'\" on Oracle as source", "location": "features/database/data_comparison.feature:348"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT doc_id, title, xml_content, clob_data, status FROM documents WHERE doc_type = 'XML'\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:349"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:350"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:351"}, {"keyword": "And", "step_type": "when", "name": "I compare DataFrames using primary key \"doc_id\" omitting values \"NULL,None,---\"", "location": "features/database/data_comparison.feature:352"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:353"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:354"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:355"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:356"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Enhanced development environment comparison with quality metrics", "tags": ["database", "oracle", "dev_environment", "enhanced"], "location": "features/database/data_comparison.feature:360", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0021381378173828125}}, {"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:361", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0017552375793457031}}, {"keyword": "And", "step_type": "given", "name": "I connect to Oracle database using \"DEV_ORACLE\" configuration", "location": "features/database/data_comparison.feature:362", "match": {"location": "features/steps/database_steps.py:1417", "arguments": [{"value": "DEV_ORACLE", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.02139425277709961, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 258, in load_db_config_when_needed", "    raise ConfigurationError(f\"Section '{section_name}' not found. Available database sections: {available}\")", "utils.custom_exceptions.ConfigurationError: Section 'DEV_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None}", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1424, in connect_to_oracle", "    db_config = load_db_config_when_needed(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 283, in load_db_config_when_needed", "    raise ConfigurationError(f\"Failed to load database configuration for '{section_name}': {str(e)}\")", "utils.custom_exceptions.ConfigurationError: Failed to load database configuration for 'DEV_ORACLE': Section 'DEV_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None} | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:363"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT test_id, test_name, test_result, execution_date FROM dev_tests\" on Oracle as source", "location": "features/database/data_comparison.feature:364"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:365"}, {"keyword": "Then", "step_type": "then", "name": "source DataFrame should have no duplicate records", "location": "features/database/data_comparison.feature:366"}, {"keyword": "And", "step_type": "then", "name": "I print DataFrame info for source", "location": "features/database/data_comparison.feature:367"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:368"}, {"keyword": "And", "step_type": "then", "name": "I export source DataFrame to CSV \"enhanced_dev_test_data.csv\"", "location": "features/database/data_comparison.feature:369"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Enhanced QA environment comparison with comprehensive validation", "tags": ["database", "postgres", "qa_environment", "enhanced"], "location": "features/database/data_comparison.feature:372", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.010206937789916992}}, {"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:373", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.000888824462890625}}, {"keyword": "And", "step_type": "given", "name": "I connect to PostgreSQL database using \"QA_POSTGRES\" configuration", "location": "features/database/data_comparison.feature:374", "match": {"location": "features/steps/database_steps.py:1450", "arguments": [{"value": "QA_POSTGRES", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.009193897247314453, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 258, in load_db_config_when_needed", "    raise ConfigurationError(f\"Section '{section_name}' not found. Available database sections: {available}\")", "utils.custom_exceptions.ConfigurationError: Section 'QA_POSTGRES' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None}", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1457, in connect_to_postgres", "    db_config = load_db_config_when_needed(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 283, in load_db_config_when_needed", "    raise ConfigurationError(f\"Failed to load database configuration for '{section_name}': {str(e)}\")", "utils.custom_exceptions.ConfigurationError: Failed to load database configuration for 'QA_POSTGRES': Section 'QA_POSTGRES' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None} | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:375"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT qa_id, test_case, result, executed_by, execution_date FROM qa_results\" on PostgreSQL as source", "location": "features/database/data_comparison.feature:376"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:377"}, {"keyword": "Then", "step_type": "then", "name": "source DataFrame should have no duplicate records", "location": "features/database/data_comparison.feature:378"}, {"keyword": "And", "step_type": "then", "name": "I print DataFrame info for source", "location": "features/database/data_comparison.feature:379"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:380"}, {"keyword": "And", "step_type": "then", "name": "I export source DataFrame to CSV \"enhanced_qa_test_results.csv\"", "location": "features/database/data_comparison.feature:381"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Advanced data quality analysis with performance benchmarking", "tags": ["database", "oracle", "postgres", "advanced_quality", "performance"], "location": "features/database/data_comparison.feature:385", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0009162425994873047}}, {"keyword": "Given", "step_type": "given", "name": "I connect to Oracle database using \"SAT_ORACLE\" configuration", "location": "features/database/data_comparison.feature:386", "match": {"location": "features/steps/database_steps.py:1417", "arguments": [{"value": "SAT_ORACLE", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.01026296615600586, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 258, in load_db_config_when_needed", "    raise ConfigurationError(f\"Section '{section_name}' not found. Available database sections: {available}\")", "utils.custom_exceptions.ConfigurationError: Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None}", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1424, in connect_to_oracle", "    db_config = load_db_config_when_needed(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 283, in load_db_config_when_needed", "    raise ConfigurationError(f\"Failed to load database configuration for '{section_name}': {str(e)}\")", "utils.custom_exceptions.ConfigurationError: Failed to load database configuration for 'SAT_ORACLE': Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None} | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "And", "step_type": "given", "name": "I connect to PostgreSQL database using \"SAT_POSTGRES\" configuration", "location": "features/database/data_comparison.feature:387"}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:388"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT transaction_id, customer_id, amount, currency, transaction_date, status, created_by FROM financial_transactions\" on Oracle as source", "location": "features/database/data_comparison.feature:389"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT transaction_id, customer_id, amount, currency, transaction_date, status, created_by FROM financial_transactions\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:390"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:391"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:392"}, {"keyword": "Then", "step_type": "then", "name": "source DataFrame should have no duplicate records", "location": "features/database/data_comparison.feature:393"}, {"keyword": "And", "step_type": "then", "name": "target DataFrame should have no duplicate records", "location": "features/database/data_comparison.feature:394"}, {"keyword": "When", "step_type": "when", "name": "I compare DataFrames using primary key \"transaction_id\" omitting columns \"created_by,transaction_date\" and values \"NULL,None,---,PENDING,pending\"", "location": "features/database/data_comparison.feature:395"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:396"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"96.0\"", "location": "features/database/data_comparison.feature:397"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:398"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:399"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:400"}, {"keyword": "And", "step_type": "then", "name": "I save comparison results as JSON file \"advanced_quality_analysis.json\"", "location": "features/database/data_comparison.feature:401"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Large-scale comparison with memory optimization and chunked processing", "tags": ["database", "oracle", "postgres", "memory_optimization", "large_scale"], "location": "features/database/data_comparison.feature:404", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.001276254653930664}}, {"keyword": "Given", "step_type": "given", "name": "I connect to Oracle database using \"SAT_ORACLE\" configuration", "location": "features/database/data_comparison.feature:405", "match": {"location": "features/steps/database_steps.py:1417", "arguments": [{"value": "SAT_ORACLE", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.01277780532836914, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 258, in load_db_config_when_needed", "    raise ConfigurationError(f\"Section '{section_name}' not found. Available database sections: {available}\")", "utils.custom_exceptions.ConfigurationError: Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None}", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1424, in connect_to_oracle", "    db_config = load_db_config_when_needed(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 283, in load_db_config_when_needed", "    raise ConfigurationError(f\"Failed to load database configuration for '{section_name}': {str(e)}\")", "utils.custom_exceptions.ConfigurationError: Failed to load database configuration for 'SAT_ORACLE': Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None} | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "And", "step_type": "given", "name": "I connect to PostgreSQL database using \"SAT_POSTGRES\" configuration", "location": "features/database/data_comparison.feature:406"}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:407"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT * FROM (SELECT order_id, customer_id, product_id, quantity, price, order_date FROM order_details WHERE order_date >= SYSDATE - 90) WHERE ROWNUM <= 100000\" on Oracle as source", "location": "features/database/data_comparison.feature:408"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT order_id, customer_id, product_id, quantity, price, order_date FROM order_details WHERE order_date >= CURRENT_DATE - INTERVAL '90 days' LIMIT 100000\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:409"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:410"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:411"}, {"keyword": "And", "step_type": "when", "name": "I compare DataFrames using primary key \"order_id\" omitting columns \"order_date\"", "location": "features/database/data_comparison.feature:412"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:413"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"85.0\"", "location": "features/database/data_comparison.feature:414"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:415"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:416"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:417"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Comprehensive audit trail comparison for compliance reporting", "tags": ["database", "oracle", "postgres", "comprehensive_audit", "compliance"], "location": "features/database/data_comparison.feature:420", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0010700225830078125}}, {"keyword": "Given", "step_type": "given", "name": "I connect to Oracle database using \"SAT_ORACLE\" configuration", "location": "features/database/data_comparison.feature:421", "match": {"location": "features/steps/database_steps.py:1417", "arguments": [{"value": "SAT_ORACLE", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.008513689041137695, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 258, in load_db_config_when_needed", "    raise ConfigurationError(f\"Section '{section_name}' not found. Available database sections: {available}\")", "utils.custom_exceptions.ConfigurationError: Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None}", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1424, in connect_to_oracle", "    db_config = load_db_config_when_needed(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 283, in load_db_config_when_needed", "    raise ConfigurationError(f\"Failed to load database configuration for '{section_name}': {str(e)}\")", "utils.custom_exceptions.ConfigurationError: Failed to load database configuration for 'SAT_ORACLE': Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None} | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "And", "step_type": "given", "name": "I connect to PostgreSQL database using \"SAT_POSTGRES\" configuration", "location": "features/database/data_comparison.feature:422"}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:423"}, {"keyword": "And", "step_type": "when", "name": "I load source data using table from config section \"audit_settings\" key \"AUDIT_SOURCE_TABLE\" on Oracle", "location": "features/database/data_comparison.feature:424"}, {"keyword": "And", "step_type": "when", "name": "I load target data using table from config section \"audit_settings\" key \"AUDIT_TARGET_TABLE\" on PostgreSQL", "location": "features/database/data_comparison.feature:425"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:426"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:427"}, {"keyword": "And", "step_type": "when", "name": "I compare DataFrames using primary key from config section \"audit_settings\" omitting columns \"audit_timestamp,audit_user,last_modified\" and values \"SYSTEM,AUTO,NULL,None,---\"", "location": "features/database/data_comparison.feature:428"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:429"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"99.0\"", "location": "features/database/data_comparison.feature:430"}, {"keyword": "And", "step_type": "then", "name": "there should be no missing records in either DataFrame", "location": "features/database/data_comparison.feature:431"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:432"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:433"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:434"}, {"keyword": "And", "step_type": "then", "name": "I save comparison results as JSON file \"compliance_audit_report.json\"", "location": "features/database/data_comparison.feature:435"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Real-time data validation with continuous monitoring capabilities", "tags": ["database", "oracle", "postgres", "real_time_validation", "monitoring"], "location": "features/database/data_comparison.feature:438", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0013289451599121094}}, {"keyword": "Given", "step_type": "given", "name": "I connect to Oracle database using \"SAT_ORACLE\" configuration", "location": "features/database/data_comparison.feature:439", "match": {"location": "features/steps/database_steps.py:1417", "arguments": [{"value": "SAT_ORACLE", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.007691144943237305, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 258, in load_db_config_when_needed", "    raise ConfigurationError(f\"Section '{section_name}' not found. Available database sections: {available}\")", "utils.custom_exceptions.ConfigurationError: Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None}", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1424, in connect_to_oracle", "    db_config = load_db_config_when_needed(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/utils/config_helper.py\", line 283, in load_db_config_when_needed", "    raise ConfigurationError(f\"Failed to load database configuration for '{section_name}': {str(e)}\")", "utils.custom_exceptions.ConfigurationError: Failed to load database configuration for 'SAT_ORACLE': Section 'SAT_ORACLE' not found. Available database sections: ['S101_ORACLE', 'S102_ORACLE', 'S103_ORACLE', 'P101_POSTGRES', 'P102_POSTGRES', 'P103_POSTGRES', 'S101_MONGODB', 'S102_MONGODB', 'P101_MONGODB'] | Details: {'config_key': None, 'config_file': None} | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "And", "step_type": "given", "name": "I connect to PostgreSQL database using \"SAT_POSTGRES\" configuration", "location": "features/database/data_comparison.feature:440"}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:441"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT sync_id, table_name, record_count, checksum, sync_timestamp FROM sync_status WHERE sync_timestamp >= SYSDATE - 1/24\" on Oracle as source", "location": "features/database/data_comparison.feature:442"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT sync_id, table_name, record_count, checksum, sync_timestamp FROM sync_status WHERE sync_timestamp >= CURRENT_TIMESTAMP - INTERVAL '1 hour'\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:443"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:444"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:445"}, {"keyword": "And", "step_type": "when", "name": "I compare DataFrames using primary key \"sync_id\" omitting columns \"sync_timestamp\"", "location": "features/database/data_comparison.feature:446"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:447"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"98.0\"", "location": "features/database/data_comparison.feature:448"}, {"keyword": "And", "step_type": "then", "name": "there should be no missing records in either DataFrame", "location": "features/database/data_comparison.feature:449"}, {"keyword": "And", "step_type": "then", "name": "all fields should match between source and target DataFrames", "location": "features/database/data_comparison.feature:450"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:451"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:452"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:453"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Enhanced basic comparison with performance monitoring", "tags": ["database", "enhanced_basic_comparison", "performance"], "location": "features/database/data_comparison.feature:456", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0011150836944580078}}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:457", "match": {"location": "features/steps/database_steps.py:2546", "arguments": []}, "result": {"status": "passed", "duration": 0.0006039142608642578}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT emp_id, name, salary, department, created_date FROM employees\" on Oracle as source", "location": "features/database/data_comparison.feature:458", "match": {"location": "features/steps/database_steps.py:1630", "arguments": [{"value": "SELECT emp_id, name, salary, department, created_date FROM employees", "name": "query"}]}, "result": {"status": "failed", "duration": 0.0006589889526367188, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1635, in execute_direct_oracle_query_as_source", "    raise ValueError(\"Oracle connection not established\")", "ValueError: Oracle connection not established"]}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT emp_id, name, salary, department, created_date FROM employees\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:459"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:460"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:461"}, {"keyword": "And", "step_type": "when", "name": "I compare DataFrames using primary key \"emp_id\"", "location": "features/database/data_comparison.feature:462"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:463"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:464"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:465"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:466"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Enhanced comparison omitting audit and timestamp columns with quality focus", "tags": ["database", "enhanced_omit_columns", "quality_focus"], "location": "features/database/data_comparison.feature:469", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0010807514190673828}}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:470", "match": {"location": "features/steps/database_steps.py:2546", "arguments": []}, "result": {"status": "passed", "duration": 0.0005490779876708984}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT emp_id, name, salary, department, created_date, modified_date, created_by, modified_by FROM employees\" on Oracle as source", "location": "features/database/data_comparison.feature:471", "match": {"location": "features/steps/database_steps.py:1630", "arguments": [{"value": "SELECT emp_id, name, salary, department, created_date, modified_date, created_by, modified_by FROM employees", "name": "query"}]}, "result": {"status": "failed", "duration": 0.0007290840148925781, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1635, in execute_direct_oracle_query_as_source", "    raise ValueError(\"Oracle connection not established\")", "ValueError: Oracle connection not established"]}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT emp_id, name, salary, department, created_date, modified_date, created_by, modified_by FROM employees\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:472"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:473"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:474"}, {"keyword": "Then", "step_type": "then", "name": "source DataFrame should have no duplicate records", "location": "features/database/data_comparison.feature:475"}, {"keyword": "And", "step_type": "then", "name": "target DataFrame should have no duplicate records", "location": "features/database/data_comparison.feature:476"}, {"keyword": "When", "step_type": "when", "name": "I compare DataFrames using primary key \"emp_id\" omitting columns \"created_date,modified_date,created_by,modified_by\"", "location": "features/database/data_comparison.feature:477"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:478"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"95.0\"", "location": "features/database/data_comparison.feature:479"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:480"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:481"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:482"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Enhanced NULL and empty value handling with comprehensive validation", "tags": ["database", "enhanced_omit_values", "null_handling"], "location": "features/database/data_comparison.feature:485", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0010418891906738281}}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:486", "match": {"location": "features/steps/database_steps.py:2546", "arguments": []}, "result": {"status": "passed", "duration": 0.0005121231079101562}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT product_id, name, description, status, category FROM products\" on Oracle as source", "location": "features/database/data_comparison.feature:487", "match": {"location": "features/steps/database_steps.py:1630", "arguments": [{"value": "SELECT product_id, name, description, status, category FROM products", "name": "query"}]}, "result": {"status": "failed", "duration": 0.0006489753723144531, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1635, in execute_direct_oracle_query_as_source", "    raise ValueError(\"Oracle connection not established\")", "ValueError: Oracle connection not established"]}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT product_id, name, description, status, category FROM products\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:488"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:489"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:490"}, {"keyword": "And", "step_type": "when", "name": "I compare DataFrames using primary key \"product_id\" omitting values \"NaN,---,None,NULL,null,N/A,na,NA,empty,EMPTY\"", "location": "features/database/data_comparison.feature:491"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:492"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"90.0\"", "location": "features/database/data_comparison.feature:493"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:494"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:495"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:496"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Production-ready comprehensive comparison with multiple omit strategies", "tags": ["database", "enhanced_comprehensive_omit", "production_ready"], "location": "features/database/data_comparison.feature:499", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0010728836059570312}}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:500", "match": {"location": "features/steps/database_steps.py:2546", "arguments": []}, "result": {"status": "passed", "duration": 0.0005388259887695312}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT customer_id, name, email, phone, status, created_date, last_login, notes, internal_notes FROM customers\" on Oracle as source", "location": "features/database/data_comparison.feature:501", "match": {"location": "features/steps/database_steps.py:1630", "arguments": [{"value": "SELECT customer_id, name, email, phone, status, created_date, last_login, notes, internal_notes FROM customers", "name": "query"}]}, "result": {"status": "failed", "duration": 0.0008368492126464844, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1635, in execute_direct_oracle_query_as_source", "    raise ValueError(\"Oracle connection not established\")", "ValueError: Oracle connection not established"]}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT customer_id, name, email, phone, status, created_date, last_login, notes, internal_notes FROM customers\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:502"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:503"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:504"}, {"keyword": "Then", "step_type": "then", "name": "source DataFrame should have no duplicate records", "location": "features/database/data_comparison.feature:505"}, {"keyword": "And", "step_type": "then", "name": "target DataFrame should have no duplicate records", "location": "features/database/data_comparison.feature:506"}, {"keyword": "When", "step_type": "when", "name": "I compare DataFrames using primary key \"customer_id\" omitting columns \"created_date,last_login,internal_notes\" and values \"NaN,---,None,NULL,N/A,INACTIVE,inactive,PENDING,pending\"", "location": "features/database/data_comparison.feature:507"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:508"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"93.0\"", "location": "features/database/data_comparison.feature:509"}, {"keyword": "And", "step_type": "then", "name": "there should be no missing records in either DataFrame", "location": "features/database/data_comparison.feature:510"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:511"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:512"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:513"}, {"keyword": "And", "step_type": "then", "name": "I save comparison results as JSON file \"production_comprehensive_results.json\"", "location": "features/database/data_comparison.feature:514"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Enterprise audit comparison with compliance-focused omissions", "tags": ["database", "enhanced_audit_comparison", "compliance"], "location": "features/database/data_comparison.feature:517", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.001194000244140625}}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:518", "match": {"location": "features/steps/database_steps.py:2546", "arguments": []}, "result": {"status": "passed", "duration": 0.0005519390106201172}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT order_id, customer_id, amount, status, created_by, created_date, modified_by, modified_date, audit_trail FROM orders\" on Oracle as source", "location": "features/database/data_comparison.feature:519", "match": {"location": "features/steps/database_steps.py:1630", "arguments": [{"value": "SELECT order_id, customer_id, amount, status, created_by, created_date, modified_by, modified_date, audit_trail FROM orders", "name": "query"}]}, "result": {"status": "failed", "duration": 0.0006570816040039062, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1635, in execute_direct_oracle_query_as_source", "    raise ValueError(\"Oracle connection not established\")", "ValueError: Oracle connection not established"]}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT order_id, customer_id, amount, status, created_by, created_date, modified_by, modified_date, audit_trail FROM orders\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:520"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:521"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:522"}, {"keyword": "And", "step_type": "when", "name": "I compare DataFrames using primary key \"order_id\" omitting columns \"created_by,created_date,modified_by,modified_date,audit_trail\" and values \"SYSTEM,AUTO,BATCH,---,NULL,None\"", "location": "features/database/data_comparison.feature:523"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:524"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"97.0\"", "location": "features/database/data_comparison.feature:525"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:526"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:527"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:528"}, {"keyword": "And", "step_type": "then", "name": "I save comparison results as JSON file \"enterprise_audit_compliance.json\"", "location": "features/database/data_comparison.feature:529"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Financial data comparison with precision handling and accuracy validation", "tags": ["database", "enhanced_financial_precision", "accuracy_critical"], "location": "features/database/data_comparison.feature:532", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.001155853271484375}}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:533", "match": {"location": "features/steps/database_steps.py:2546", "arguments": []}, "result": {"status": "passed", "duration": 0.0005640983581542969}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT account_id, balance, interest_rate, status, currency, last_calculated FROM accounts\" on Oracle as source", "location": "features/database/data_comparison.feature:534", "match": {"location": "features/steps/database_steps.py:1630", "arguments": [{"value": "SELECT account_id, balance, interest_rate, status, currency, last_calculated FROM accounts", "name": "query"}]}, "result": {"status": "failed", "duration": 0.0007851123809814453, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1635, in execute_direct_oracle_query_as_source", "    raise ValueError(\"Oracle connection not established\")", "ValueError: Oracle connection not established"]}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT account_id, balance, interest_rate, status, currency, last_calculated FROM accounts\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:535"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:536"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:537"}, {"keyword": "And", "step_type": "when", "name": "I compare DataFrames using primary key \"account_id\" omitting columns \"last_calculated\" and values \"0.0,0,---,inactive,INACTIVE,CLOSED,closed\"", "location": "features/database/data_comparison.feature:538"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:539"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"99.0\"", "location": "features/database/data_comparison.feature:540"}, {"keyword": "And", "step_type": "then", "name": "field \"balance\" should have \"0\" delta records", "location": "features/database/data_comparison.feature:541"}, {"keyword": "And", "step_type": "then", "name": "field \"interest_rate\" should have \"0\" delta records", "location": "features/database/data_comparison.feature:542"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:543"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:544"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:545"}, {"keyword": "And", "step_type": "then", "name": "I save comparison results as JSON file \"financial_precision_validation.json\"", "location": "features/database/data_comparison.feature:546"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Context-based omit parameters with basic comparison steps", "tags": ["database", "context_based_omit", "new_functionality"], "location": "features/database/data_comparison.feature:549", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0010349750518798828}}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:550", "match": {"location": "features/steps/database_steps.py:2546", "arguments": []}, "result": {"status": "passed", "duration": 0.0005812644958496094}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT emp_id, name, salary, department, created_date, modified_date, status FROM employees\" on Oracle as source", "location": "features/database/data_comparison.feature:551", "match": {"location": "features/steps/database_steps.py:1630", "arguments": [{"value": "SELECT emp_id, name, salary, department, created_date, modified_date, status FROM employees", "name": "query"}]}, "result": {"status": "failed", "duration": 0.0007767677307128906, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1635, in execute_direct_oracle_query_as_source", "    raise ValueError(\"Oracle connection not established\")", "ValueError: Oracle connection not established"]}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT emp_id, name, salary, department, created_date, modified_date, status FROM employees\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:552"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:553"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:554"}, {"keyword": "Given", "step_type": "given", "name": "I set omit columns to \"created_date,modified_date\"", "location": "features/database/data_comparison.feature:555"}, {"keyword": "And", "step_type": "given", "name": "I set omit values to \"INACTIVE,inactive,NULL,None\"", "location": "features/database/data_comparison.feature:556"}, {"keyword": "When", "step_type": "when", "name": "I compare DataFrames using primary key \"emp_id\"", "location": "features/database/data_comparison.feature:557"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:558"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"95.0\"", "location": "features/database/data_comparison.feature:559"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:560"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:561"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:562"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Comprehensive DataFrame comparison with both omit columns and values", "tags": ["database", "comprehensive_omit", "advanced_functionality"], "location": "features/database/data_comparison.feature:565", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0012781620025634766}}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:566", "match": {"location": "features/steps/database_steps.py:2546", "arguments": []}, "result": {"status": "passed", "duration": 0.0005869865417480469}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT product_id, name, description, price, status, created_date, updated_date, notes FROM products\" on Oracle as source", "location": "features/database/data_comparison.feature:567", "match": {"location": "features/steps/database_steps.py:1630", "arguments": [{"value": "SELECT product_id, name, description, price, status, created_date, updated_date, notes FROM products", "name": "query"}]}, "result": {"status": "failed", "duration": 0.0006647109985351562, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1635, in execute_direct_oracle_query_as_source", "    raise ValueError(\"Oracle connection not established\")", "ValueError: Oracle connection not established"]}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT product_id, name, description, price, status, created_date, updated_date, notes FROM products\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:568"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:569"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:570"}, {"keyword": "When", "step_type": "when", "name": "I perform comprehensive DataFrame comparison using primary key \"product_id\" with omitted columns \"created_date,updated_date,notes\" and omitted values \"DISCONTINUED,discontinued,NULL,None,N/A,---\"", "location": "features/database/data_comparison.feature:571"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:572"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"92.0\"", "location": "features/database/data_comparison.feature:573"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:574"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:575"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:576"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Optional omit columns with flexible parameter handling", "tags": ["database", "optional_omit_columns", "flexible_usage"], "location": "features/database/data_comparison.feature:579", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0018489360809326172}}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:580", "match": {"location": "features/steps/database_steps.py:2546", "arguments": []}, "result": {"status": "passed", "duration": 0.0003802776336669922}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT customer_id, name, email, phone, address, created_date, status FROM customers\" on Oracle as source", "location": "features/database/data_comparison.feature:581", "match": {"location": "features/steps/database_steps.py:1630", "arguments": [{"value": "SELECT customer_id, name, email, phone, address, created_date, status FROM customers", "name": "query"}]}, "result": {"status": "failed", "duration": 0.0004100799560546875, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1635, in execute_direct_oracle_query_as_source", "    raise ValueError(\"Oracle connection not established\")", "ValueError: Oracle connection not established"]}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT customer_id, name, email, phone, address, created_date, status FROM customers\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:582"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:583"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:584"}, {"keyword": "When", "step_type": "when", "name": "I compare DataFrames using primary key \"customer_id\" with optional omit columns \"created_date\"", "location": "features/database/data_comparison.feature:585"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:586"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"90.0\"", "location": "features/database/data_comparison.feature:587"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:588"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:589"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Optional omit values with NULL handling flexibility", "tags": ["database", "optional_omit_values", "null_flexibility"], "location": "features/database/data_comparison.feature:592", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.001020193099975586}}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:593", "match": {"location": "features/steps/database_steps.py:2546", "arguments": []}, "result": {"status": "passed", "duration": 0.0005919933319091797}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT order_id, customer_id, amount, status, notes FROM orders\" on Oracle as source", "location": "features/database/data_comparison.feature:594", "match": {"location": "features/steps/database_steps.py:1630", "arguments": [{"value": "SELECT order_id, customer_id, amount, status, notes FROM orders", "name": "query"}]}, "result": {"status": "failed", "duration": 0.0009169578552246094, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1635, in execute_direct_oracle_query_as_source", "    raise ValueError(\"Oracle connection not established\")", "ValueError: Oracle connection not established"]}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT order_id, customer_id, amount, status, notes FROM orders\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:595"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:596"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:597"}, {"keyword": "When", "step_type": "when", "name": "I compare DataFrames using primary key \"order_id\" with optional omit values \"CANCELLED,cancelled,NULL,None,---\"", "location": "features/database/data_comparison.feature:598"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:599"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"88.0\"", "location": "features/database/data_comparison.feature:600"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:601"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:602"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Context parameter management with clear functionality", "tags": ["database", "context_management", "parameter_control"], "location": "features/database/data_comparison.feature:605", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0006728172302246094}}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:606", "match": {"location": "features/steps/database_steps.py:2546", "arguments": []}, "result": {"status": "passed", "duration": 0.00030994415283203125}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT transaction_id, account_id, amount, type, status, created_date FROM transactions\" on Oracle as source", "location": "features/database/data_comparison.feature:607", "match": {"location": "features/steps/database_steps.py:1630", "arguments": [{"value": "SELECT transaction_id, account_id, amount, type, status, created_date FROM transactions", "name": "query"}]}, "result": {"status": "failed", "duration": 0.0003859996795654297, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1635, in execute_direct_oracle_query_as_source", "    raise ValueError(\"Oracle connection not established\")", "ValueError: Oracle connection not established"]}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT transaction_id, account_id, amount, type, status, created_date FROM transactions\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:608"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:609"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:610"}, {"keyword": "Given", "step_type": "given", "name": "I set omit columns to \"created_date\"", "location": "features/database/data_comparison.feature:611"}, {"keyword": "And", "step_type": "given", "name": "I set omit values to \"PENDING,pending,FAILED,failed\"", "location": "features/database/data_comparison.feature:612"}, {"keyword": "When", "step_type": "when", "name": "I compare DataFrames using primary key \"transaction_id\"", "location": "features/database/data_comparison.feature:613"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:614"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"93.0\"", "location": "features/database/data_comparison.feature:615"}, {"keyword": "Given", "step_type": "given", "name": "I clear omit parameters", "location": "features/database/data_comparison.feature:616"}, {"keyword": "When", "step_type": "when", "name": "I compare DataFrames using primary key \"transaction_id\"", "location": "features/database/data_comparison.feature:617"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:618"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:619"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:620"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Numeric precision handling with int/float normalization", "tags": ["database", "numeric_precision", "type_normalization"], "location": "features/database/data_comparison.feature:623", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0009560585021972656}}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:624", "match": {"location": "features/steps/database_steps.py:2546", "arguments": []}, "result": {"status": "passed", "duration": 0.0005118846893310547}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT account_id, balance, credit_limit, interest_rate FROM accounts WHERE account_type = 'SAVINGS'\" on Oracle as source", "location": "features/database/data_comparison.feature:625", "match": {"location": "features/steps/database_steps.py:1630", "arguments": [{"value": "SELECT account_id, balance, credit_limit, interest_rate FROM accounts WHERE account_type = 'SAVINGS'", "name": "query"}]}, "result": {"status": "failed", "duration": 0.0006110668182373047, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1635, in execute_direct_oracle_query_as_source", "    raise ValueError(\"Oracle connection not established\")", "ValueError: Oracle connection not established"]}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT account_id, balance, credit_limit, interest_rate FROM accounts WHERE account_type = 'SAVINGS'\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:626"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:627"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:628"}, {"keyword": "When", "step_type": "when", "name": "I compare DataFrames using primary key \"account_id\"", "location": "features/database/data_comparison.feature:629"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:630"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"98.0\"", "location": "features/database/data_comparison.feature:631"}, {"keyword": "And", "step_type": "then", "name": "field \"balance\" should have \"0\" delta records", "location": "features/database/data_comparison.feature:632"}, {"keyword": "And", "step_type": "then", "name": "field \"credit_limit\" should have \"0\" delta records", "location": "features/database/data_comparison.feature:633"}, {"keyword": "And", "step_type": "then", "name": "field \"interest_rate\" should have \"0\" delta records", "location": "features/database/data_comparison.feature:634"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:635"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:636"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:637"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Production workflow with mixed omit strategies and context switching", "tags": ["database", "mixed_omit_strategies", "production_workflow"], "location": "features/database/data_comparison.feature:640", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0015408992767333984}}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:641", "match": {"location": "features/steps/database_steps.py:2546", "arguments": []}, "result": {"status": "passed", "duration": 0.0006339550018310547}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT user_id, username, email, status, last_login, created_date, profile_data FROM users\" on Oracle as source", "location": "features/database/data_comparison.feature:642", "match": {"location": "features/steps/database_steps.py:1630", "arguments": [{"value": "SELECT user_id, username, email, status, last_login, created_date, profile_data FROM users", "name": "query"}]}, "result": {"status": "failed", "duration": 0.0005857944488525391, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1635, in execute_direct_oracle_query_as_source", "    raise ValueError(\"Oracle connection not established\")", "ValueError: Oracle connection not established"]}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT user_id, username, email, status, last_login, created_date, profile_data FROM users\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:643"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:644"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:645"}, {"keyword": "Given", "step_type": "given", "name": "I set omit columns to \"last_login,created_date\"", "location": "features/database/data_comparison.feature:647"}, {"keyword": "When", "step_type": "when", "name": "I compare DataFrames using primary key \"user_id\"", "location": "features/database/data_comparison.feature:648"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:649"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"94.0\"", "location": "features/database/data_comparison.feature:650"}, {"keyword": "Given", "step_type": "given", "name": "I clear omit parameters", "location": "features/database/data_comparison.feature:652"}, {"keyword": "When", "step_type": "when", "name": "I compare DataFrames using primary key \"user_id\" with optional omit values \"SUSPENDED,suspended,INACTIVE,inactive\"", "location": "features/database/data_comparison.feature:653"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:654"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"92.0\"", "location": "features/database/data_comparison.feature:655"}, {"keyword": "When", "step_type": "when", "name": "I perform comprehensive DataFrame comparison using primary key \"user_id\" with omitted columns \"profile_data\" and omitted values \"NULL,None,---\"", "location": "features/database/data_comparison.feature:657"}, {"keyword": "Then", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:658"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"96.0\"", "location": "features/database/data_comparison.feature:659"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:660"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:661"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:662"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Perfect match verification with enhanced delta analysis", "tags": ["database", "perfect_match_verification", "new_step_definitions"], "location": "features/database/data_comparison.feature:665", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0006759166717529297}}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:666", "match": {"location": "features/steps/database_steps.py:2546", "arguments": []}, "result": {"status": "passed", "duration": 0.00030493736267089844}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT id, name, amount FROM perfect_match_test WHERE id <= 10\" on Oracle as source", "location": "features/database/data_comparison.feature:667", "match": {"location": "features/steps/database_steps.py:1630", "arguments": [{"value": "SELECT id, name, amount FROM perfect_match_test WHERE id <= 10", "name": "query"}]}, "result": {"status": "failed", "duration": 0.00039505958557128906, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1635, in execute_direct_oracle_query_as_source", "    raise ValueError(\"Oracle connection not established\")", "ValueError: Oracle connection not established"]}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT id, name, amount FROM perfect_match_test WHERE id <= 10\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:668"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:669"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:670"}, {"keyword": "When", "step_type": "when", "name": "I compare DataFrames using primary key \"id\"", "location": "features/database/data_comparison.feature:671"}, {"keyword": "Then", "step_type": "then", "name": "the comparison should show a perfect match", "location": "features/database/data_comparison.feature:672"}, {"keyword": "And", "step_type": "then", "name": "field match percentage should be 100.0%", "location": "features/database/data_comparison.feature:673"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:674"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:675"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:676"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Field differences count verification with precise delta analysis", "tags": ["database", "field_differences_count", "delta_verification"], "location": "features/database/data_comparison.feature:679", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0006837844848632812}}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:680", "match": {"location": "features/steps/database_steps.py:2546", "arguments": []}, "result": {"status": "passed", "duration": 0.00042176246643066406}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT emp_id, name, salary, status FROM employees_test WHERE emp_id <= 100\" on Oracle as source", "location": "features/database/data_comparison.feature:681", "match": {"location": "features/steps/database_steps.py:1630", "arguments": [{"value": "SELECT emp_id, name, salary, status FROM employees_test WHERE emp_id <= 100", "name": "query"}]}, "result": {"status": "failed", "duration": 0.00041604042053222656, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1635, in execute_direct_oracle_query_as_source", "    raise ValueError(\"Oracle connection not established\")", "ValueError: Oracle connection not established"]}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT emp_id, name, salary, status FROM employees_test_modified WHERE emp_id <= 100\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:682"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:683"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:684"}, {"keyword": "When", "step_type": "when", "name": "I compare DataFrames using primary key \"emp_id\"", "location": "features/database/data_comparison.feature:685"}, {"keyword": "Then", "step_type": "then", "name": "the comparison should show 5 field differences", "location": "features/database/data_comparison.feature:686"}, {"keyword": "And", "step_type": "then", "name": "field match percentage should be 75.0%", "location": "features/database/data_comparison.feature:687"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:688"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:689"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Comprehensive delta analysis with multiple verification steps", "tags": ["database", "enhanced_delta_analysis", "comprehensive_verification"], "location": "features/database/data_comparison.feature:692", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0007121562957763672}}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:693", "match": {"location": "features/steps/database_steps.py:2546", "arguments": []}, "result": {"status": "passed", "duration": 0.0003437995910644531}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT product_id, name, price, category, status FROM products_comparison WHERE product_id <= 50\" on Oracle as source", "location": "features/database/data_comparison.feature:694", "match": {"location": "features/steps/database_steps.py:1630", "arguments": [{"value": "SELECT product_id, name, price, category, status FROM products_comparison WHERE product_id <= 50", "name": "query"}]}, "result": {"status": "failed", "duration": 0.0006268024444580078, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1635, in execute_direct_oracle_query_as_source", "    raise ValueError(\"Oracle connection not established\")", "ValueError: Oracle connection not established"]}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT product_id, name, price, category, status FROM products_comparison WHERE product_id <= 50\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:695"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:696"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:697"}, {"keyword": "Given", "step_type": "given", "name": "I set omit values to \"DISCONTINUED,discontinued,INACTIVE,inactive\"", "location": "features/database/data_comparison.feature:698"}, {"keyword": "When", "step_type": "when", "name": "I compare DataFrames using primary key \"product_id\"", "location": "features/database/data_comparison.feature:699"}, {"keyword": "Then", "step_type": "then", "name": "the comparison should show 0 field differences", "location": "features/database/data_comparison.feature:700"}, {"keyword": "And", "step_type": "then", "name": "the comparison should show a perfect match", "location": "features/database/data_comparison.feature:701"}, {"keyword": "And", "step_type": "then", "name": "field match percentage should be 100.0%", "location": "features/database/data_comparison.feature:702"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:703"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:704"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:705"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Partial match analysis with detailed field statistics", "tags": ["database", "partial_match_analysis", "field_statistics"], "location": "features/database/data_comparison.feature:708", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0006289482116699219}}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:709", "match": {"location": "features/steps/database_steps.py:2546", "arguments": []}, "result": {"status": "passed", "duration": 0.00028634071350097656}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT account_id, balance, status, last_updated, created_date FROM accounts_analysis\" on Oracle as source", "location": "features/database/data_comparison.feature:710", "match": {"location": "features/steps/database_steps.py:1630", "arguments": [{"value": "SELECT account_id, balance, status, last_updated, created_date FROM accounts_analysis", "name": "query"}]}, "result": {"status": "failed", "duration": 0.00039458274841308594, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1635, in execute_direct_oracle_query_as_source", "    raise ValueError(\"Oracle connection not established\")", "ValueError: Oracle connection not established"]}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT account_id, balance, status, last_updated, created_date FROM accounts_analysis_target\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:711"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:712"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:713"}, {"keyword": "Given", "step_type": "given", "name": "I set omit columns to \"last_updated,created_date\"", "location": "features/database/data_comparison.feature:714"}, {"keyword": "When", "step_type": "when", "name": "I compare DataFrames using primary key \"account_id\"", "location": "features/database/data_comparison.feature:715"}, {"keyword": "Then", "step_type": "then", "name": "the comparison should show 3 field differences", "location": "features/database/data_comparison.feature:716"}, {"keyword": "And", "step_type": "then", "name": "field match percentage should be 66.67%", "location": "features/database/data_comparison.feature:717"}, {"keyword": "And", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:718"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"85.0\"", "location": "features/database/data_comparison.feature:719"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:720"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:721"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Perfect match verification with omit parameters demonstrating enhanced analysis", "tags": ["database", "perfect_match_with_omit", "advanced_verification"], "location": "features/database/data_comparison.feature:724", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0006668567657470703}}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:725", "match": {"location": "features/steps/database_steps.py:2546", "arguments": []}, "result": {"status": "passed", "duration": 0.0006809234619140625}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT customer_id, name, email, phone, status, created_date, notes FROM customers_perfect_match\" on Oracle as source", "location": "features/database/data_comparison.feature:726", "match": {"location": "features/steps/database_steps.py:1630", "arguments": [{"value": "SELECT customer_id, name, email, phone, status, created_date, notes FROM customers_perfect_match", "name": "query"}]}, "result": {"status": "failed", "duration": 0.0004951953887939453, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1635, in execute_direct_oracle_query_as_source", "    raise ValueError(\"Oracle connection not established\")", "ValueError: Oracle connection not established"]}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT customer_id, name, email, phone, status, created_date, notes FROM customers_perfect_match\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:727"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:728"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:729"}, {"keyword": "When", "step_type": "when", "name": "I perform comprehensive DataFrame comparison using primary key \"customer_id\" with omitted columns \"created_date,notes\" and omitted values \"NULL,None,---,INACTIVE,inactive\"", "location": "features/database/data_comparison.feature:730"}, {"keyword": "Then", "step_type": "then", "name": "the comparison should show a perfect match", "location": "features/database/data_comparison.feature:731"}, {"keyword": "And", "step_type": "then", "name": "field match percentage should be 100.0%", "location": "features/database/data_comparison.feature:732"}, {"keyword": "And", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:733"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"99.0%\"", "location": "features/database/data_comparison.feature:734"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:735"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:736"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:737"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Delta analysis with edge cases and boundary conditions", "tags": ["database", "delta_analysis_edge_cases", "boundary_testing"], "location": "features/database/data_comparison.feature:740", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0007150173187255859}}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:741", "match": {"location": "features/steps/database_steps.py:2546", "arguments": []}, "result": {"status": "passed", "duration": 0.0003361701965332031}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT test_id, numeric_field, text_field, boolean_field FROM delta_edge_cases\" on Oracle as source", "location": "features/database/data_comparison.feature:742", "match": {"location": "features/steps/database_steps.py:1630", "arguments": [{"value": "SELECT test_id, numeric_field, text_field, boolean_field FROM delta_edge_cases", "name": "query"}]}, "result": {"status": "failed", "duration": 0.00043010711669921875, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1635, in execute_direct_oracle_query_as_source", "    raise ValueError(\"Oracle connection not established\")", "ValueError: Oracle connection not established"]}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT test_id, numeric_field, text_field, boolean_field FROM delta_edge_cases_modified\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:743"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:744"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:745"}, {"keyword": "When", "step_type": "when", "name": "I compare DataFrames using primary key \"test_id\"", "location": "features/database/data_comparison.feature:746"}, {"keyword": "Then", "step_type": "then", "name": "the comparison should show 2 field differences", "location": "features/database/data_comparison.feature:747"}, {"keyword": "And", "step_type": "then", "name": "field match percentage should be 50.0%", "location": "features/database/data_comparison.feature:748"}, {"keyword": "And", "step_type": "then", "name": "field \"numeric_field\" should have \"0\" delta records", "location": "features/database/data_comparison.feature:749"}, {"keyword": "And", "step_type": "then", "name": "field \"text_field\" should have \"1\" delta records", "location": "features/database/data_comparison.feature:750"}, {"keyword": "And", "step_type": "then", "name": "field \"boolean_field\" should have \"1\" delta records", "location": "features/database/data_comparison.feature:751"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:752"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:753"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Zero differences validation ensuring perfect match detection works correctly", "tags": ["database", "zero_differences_validation", "perfect_match_edge_case"], "location": "features/database/data_comparison.feature:756", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/data_comparison.feature:7", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0009150505065917969}}, {"keyword": "When", "step_type": "when", "name": "I enable progress monitoring", "location": "features/database/data_comparison.feature:757", "match": {"location": "features/steps/database_steps.py:2546", "arguments": []}, "result": {"status": "passed", "duration": 0.00035500526428222656}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT order_id, customer_id, amount, status FROM orders_identical WHERE order_date >= CURRENT_DATE - 7\" on Oracle as source", "location": "features/database/data_comparison.feature:758", "match": {"location": "features/steps/database_steps.py:1630", "arguments": [{"value": "SELECT order_id, customer_id, amount, status FROM orders_identical WHERE order_date >= CURRENT_DATE - 7", "name": "query"}]}, "result": {"status": "failed", "duration": 0.0004360675811767578, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1635, in execute_direct_oracle_query_as_source", "    raise ValueError(\"Oracle connection not established\")", "ValueError: Oracle connection not established"]}}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT order_id, customer_id, amount, status FROM orders_identical WHERE order_date >= CURRENT_DATE - 7\" on PostgreSQL as target", "location": "features/database/data_comparison.feature:759"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for source DataFrame", "location": "features/database/data_comparison.feature:760"}, {"keyword": "And", "step_type": "when", "name": "I validate data quality for target DataFrame", "location": "features/database/data_comparison.feature:761"}, {"keyword": "When", "step_type": "when", "name": "I compare DataFrames using primary key \"order_id\"", "location": "features/database/data_comparison.feature:762"}, {"keyword": "Then", "step_type": "then", "name": "the comparison should show 0 field differences", "location": "features/database/data_comparison.feature:763"}, {"keyword": "And", "step_type": "then", "name": "the comparison should show a perfect match", "location": "features/database/data_comparison.feature:764"}, {"keyword": "And", "step_type": "then", "name": "field match percentage should be 100.0%", "location": "features/database/data_comparison.feature:765"}, {"keyword": "And", "step_type": "then", "name": "there should be no missing records in either DataFrame", "location": "features/database/data_comparison.feature:766"}, {"keyword": "And", "step_type": "then", "name": "all fields should match between source and target DataFrames", "location": "features/database/data_comparison.feature:767"}, {"keyword": "And", "step_type": "then", "name": "I generate data quality report", "location": "features/database/data_comparison.feature:768"}, {"keyword": "And", "step_type": "then", "name": "data quality score should be above \"100.0\"", "location": "features/database/data_comparison.feature:769"}, {"keyword": "And", "step_type": "then", "name": "I print the comparison summary", "location": "features/database/data_comparison.feature:770"}, {"keyword": "And", "step_type": "then", "name": "I print performance metrics", "location": "features/database/data_comparison.feature:771"}, {"keyword": "And", "step_type": "then", "name": "I export all comparison results with timestamp", "location": "features/database/data_comparison.feature:772"}], "status": "failed"}]},

{"keyword": "Feature", "name": "Specific Database Sections Demo", "tags": [], "location": "features/database/specific_sections_demo.feature:1", "status": "failed", "description": ["Using specific Oracle and PostgreSQL section names without environments"], "elements": [{"type": "background", "keyword": "Background", "name": "", "location": "features/database/specific_sections_demo.feature:4", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/specific_sections_demo.feature:5"}]}, {"type": "scenario", "keyword": "Scenario", "name": "Connect to S101 Oracle database directly", "tags": ["database", "oracle", "S101"], "location": "features/database/specific_sections_demo.feature:8", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/specific_sections_demo.feature:5", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0011322498321533203}}, {"keyword": "When", "step_type": "when", "name": "I connect to Oracle database using \"S101_ORACLE\" configuration", "location": "features/database/specific_sections_demo.feature:9", "result": {"status": "undefined", "duration": 0}}, {"keyword": "Then", "step_type": "then", "name": "Oracle connection should be established successfully", "location": "features/database/specific_sections_demo.feature:10"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Connect to S102 Oracle database directly", "tags": ["database", "oracle", "S102"], "location": "features/database/specific_sections_demo.feature:13", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/specific_sections_demo.feature:5", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.001956939697265625}}, {"keyword": "When", "step_type": "when", "name": "I connect to Oracle database using \"S102_ORACLE\" configuration", "location": "features/database/specific_sections_demo.feature:14", "result": {"status": "undefined", "duration": 0}}, {"keyword": "Then", "step_type": "then", "name": "Oracle connection should be established successfully", "location": "features/database/specific_sections_demo.feature:15"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Connect to P101 PostgreSQL database directly", "tags": ["database", "postgres", "P101"], "location": "features/database/specific_sections_demo.feature:18", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/specific_sections_demo.feature:5", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.002089977264404297}}, {"keyword": "When", "step_type": "when", "name": "I connect to PostgreSQL database using \"P101_POSTGRES\" configuration", "location": "features/database/specific_sections_demo.feature:19", "result": {"status": "undefined", "duration": 0}}, {"keyword": "Then", "step_type": "then", "name": "PostgreSQL connection should be established successfully", "location": "features/database/specific_sections_demo.feature:20"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Connect to P102 PostgreSQL database directly", "tags": ["database", "postgres", "P102"], "location": "features/database/specific_sections_demo.feature:23", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/specific_sections_demo.feature:5", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0007550716400146484}}, {"keyword": "When", "step_type": "when", "name": "I connect to PostgreSQL database using \"P102_POSTGRES\" configuration", "location": "features/database/specific_sections_demo.feature:24", "result": {"status": "undefined", "duration": 0}}, {"keyword": "Then", "step_type": "then", "name": "PostgreSQL connection should be established successfully", "location": "features/database/specific_sections_demo.feature:25"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Compare data between S101 Oracle and P101 PostgreSQL", "tags": ["database", "comparison", "cross_system"], "location": "features/database/specific_sections_demo.feature:28", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/specific_sections_demo.feature:5", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0016040802001953125}}, {"keyword": "Given", "step_type": "given", "name": "I connect to Oracle database using \"S101_ORACLE\" configuration", "location": "features/database/specific_sections_demo.feature:29", "match": {"location": "features/steps/database_steps.py:1417", "arguments": [{"value": "S101_ORACLE", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.016468048095703125, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 262, in get_oracle_connection", "    pool = self.connection_pool_manager.get_oracle_pool(db_config)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 89, in get_oracle_pool", "    self.oracle_pools[pool_key] = cx_Oracle.SessionPool(", "cx_Oracle.DatabaseError: DPI-1047: Cannot locate a 64-bit Oracle Client library: \"dlopen(libclntsh.dylib, 0x0001): tried: 'libclntsh.dylib' (no such file), '/usr/local/lib/libclntsh.dylib' (no such file), '/usr/lib/libclntsh.dylib' (no such file), '/Users/karimmohammed/testautomationframework/libclntsh.dylib' (no such file)\". See https://cx-oracle.readthedocs.io/en/latest/user_guide/installation.html for help", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1428, in connect_to_oracle", "    oracle_engine = db_comparison_manager.get_oracle_connection(db_section)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 279, in get_oracle_connection", "    raise ConfigurationError(f\"Oracle connection failed: {error_obj.message}\")", "utils.custom_exceptions.ConfigurationError: Oracle connection failed: DPI-1047: Cannot locate a 64-bit Oracle Client library: \"dlopen(libclntsh.dylib, 0x0001): tried: 'libclntsh.dylib' (no such file), '/usr/local/lib/libclntsh.dylib' (no such file), '/usr/lib/libclntsh.dylib' (no such file), '/Users/karimmohammed/testautomationframework/libclntsh.dylib' (no such file)\". See https://cx-oracle.readthedocs.io/en/latest/user_guide/installation.html for help | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "And", "step_type": "given", "name": "I connect to PostgreSQL database using \"P101_POSTGRES\" configuration", "location": "features/database/specific_sections_demo.feature:30"}, {"keyword": "When", "step_type": "when", "name": "I read query from config section \"QUERIES\" key \"customer_report\"", "location": "features/database/specific_sections_demo.feature:31"}, {"keyword": "And", "step_type": "when", "name": "I execute query on Oracle and store as source DataFrame", "location": "features/database/specific_sections_demo.feature:32"}, {"keyword": "And", "step_type": "when", "name": "I execute query on PostgreSQL and store as target DataFrame", "location": "features/database/specific_sections_demo.feature:33"}, {"keyword": "Then", "step_type": "then", "name": "I perform DataFrame comparison with primary key \"id\"", "location": "features/database/specific_sections_demo.feature:34"}, {"keyword": "And", "step_type": "then", "name": "DataFrames should match within 0% tolerance", "location": "features/database/specific_sections_demo.feature:35"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Compare data between two Oracle systems S101 and S102", "tags": ["database", "comparison", "oracle_to_oracle"], "location": "features/database/specific_sections_demo.feature:38", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/specific_sections_demo.feature:5", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0013301372528076172}}, {"keyword": "Given", "step_type": "given", "name": "I connect to Oracle database using \"S101_ORACLE\" configuration as source", "location": "features/database/specific_sections_demo.feature:39", "match": {"location": "features/steps/database_steps.py:2561", "arguments": [{"value": "S101_ORACLE", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.007880210876464844, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 262, in get_oracle_connection", "    pool = self.connection_pool_manager.get_oracle_pool(db_config)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 89, in get_oracle_pool", "    self.oracle_pools[pool_key] = cx_Oracle.SessionPool(", "cx_Oracle.DatabaseError: DPI-1047: Cannot locate a 64-bit Oracle Client library: \"dlopen(libclntsh.dylib, 0x0001): tried: 'libclntsh.dylib' (no such file), '/usr/local/lib/libclntsh.dylib' (no such file), '/usr/lib/libclntsh.dylib' (no such file), '/Users/karimmohammed/testautomationframework/libclntsh.dylib' (no such file)\". See https://cx-oracle.readthedocs.io/en/latest/user_guide/installation.html for help", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 2564, in connect_to_oracle_as_source", "    connect_to_oracle(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1428, in connect_to_oracle", "    oracle_engine = db_comparison_manager.get_oracle_connection(db_section)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 279, in get_oracle_connection", "    raise ConfigurationError(f\"Oracle connection failed: {error_obj.message}\")", "utils.custom_exceptions.ConfigurationError: Oracle connection failed: DPI-1047: Cannot locate a 64-bit Oracle Client library: \"dlopen(libclntsh.dylib, 0x0001): tried: 'libclntsh.dylib' (no such file), '/usr/local/lib/libclntsh.dylib' (no such file), '/usr/lib/libclntsh.dylib' (no such file), '/Users/karimmohammed/testautomationframework/libclntsh.dylib' (no such file)\". See https://cx-oracle.readthedocs.io/en/latest/user_guide/installation.html for help | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "And", "step_type": "given", "name": "I connect to Oracle database using \"S102_ORACLE\" configuration as target", "location": "features/database/specific_sections_demo.feature:40"}, {"keyword": "When", "step_type": "when", "name": "I read query from config section \"QUERIES\" key \"sales_summary\"", "location": "features/database/specific_sections_demo.feature:41"}, {"keyword": "And", "step_type": "when", "name": "I execute query on source database and store as source DataFrame", "location": "features/database/specific_sections_demo.feature:42"}, {"keyword": "And", "step_type": "when", "name": "I execute query on target database and store as target DataFrame", "location": "features/database/specific_sections_demo.feature:43"}, {"keyword": "Then", "step_type": "then", "name": "I perform DataFrame comparison with primary key \"product_id\"", "location": "features/database/specific_sections_demo.feature:44"}, {"keyword": "And", "step_type": "then", "name": "DataFrames should match within 5% tolerance", "location": "features/database/specific_sections_demo.feature:45"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Compare data between two PostgreSQL systems P101 and P102", "tags": ["database", "comparison", "postgres_to_postgres"], "location": "features/database/specific_sections_demo.feature:48", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/specific_sections_demo.feature:5", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0006530284881591797}}, {"keyword": "Given", "step_type": "given", "name": "I connect to PostgreSQL database using \"P101_POSTGRES\" configuration as source", "location": "features/database/specific_sections_demo.feature:49", "match": {"location": "features/steps/database_steps.py:2587", "arguments": [{"value": "P101_POSTGRES", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.18989801406860352, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/engine/base.py\", line 143, in __init__", "    self._dbapi_connection = engine.raw_connection()", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/engine/base.py\", line 3301, in raw_connection", "    return self.pool.connect()", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/base.py\", line 447, in connect", "    return _ConnectionFairy._checkout(self)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/base.py\", line 1264, in _checkout", "    fairy = _ConnectionRecord.checkout(pool)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/base.py\", line 711, in checkout", "    rec = pool._do_get()", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/impl.py\", line 178, in _do_get", "    self._dec_overflow()", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/util/langhelpers.py\", line 224, in __exit__", "    raise exc_value.with_traceback(exc_tb)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/impl.py\", line 175, in _do_get", "    return self._create_connection()", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/base.py\", line 388, in _create_connection", "    return _ConnectionRecord(self)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/base.py\", line 673, in __init__", "    self.__connect()", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/base.py\", line 900, in __connect", "    pool.logger.debug(\"Error on connect(): %s\", e)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/util/langhelpers.py\", line 224, in __exit__", "    raise exc_value.with_traceback(exc_tb)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/base.py\", line 895, in __connect", "    self.dbapi_connection = connection = pool._invoke_creator(self)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/engine/create.py\", line 661, in connect", "    return dialect.connect(*cargs, **cparams)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/engine/default.py\", line 629, in connect", "    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/psycopg2/__init__.py\", line 122, in connect", "    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)", "psycopg2.OperationalError: could not translate host name \"p101-postgres-server.company.com\" to address: nodename nor servname provided, or not known", "", "", "The above exception was the direct cause of the following exception:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 299, in get_postgres_connection", "    with self.postgres_engine.connect() as conn: # type: ignore", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/engine/base.py\", line 3277, in connect", "    return self._connection_cls(self)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/engine/base.py\", line 145, in __init__", "    Connection._handle_dbapi_exception_noconnection(", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/engine/base.py\", line 2440, in _handle_dbapi_exception_noconnection", "    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/engine/base.py\", line 143, in __init__", "    self._dbapi_connection = engine.raw_connection()", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/engine/base.py\", line 3301, in raw_connection", "    return self.pool.connect()", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/base.py\", line 447, in connect", "    return _ConnectionFairy._checkout(self)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/base.py\", line 1264, in _checkout", "    fairy = _ConnectionRecord.checkout(pool)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/base.py\", line 711, in checkout", "    rec = pool._do_get()", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/impl.py\", line 178, in _do_get", "    self._dec_overflow()", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/util/langhelpers.py\", line 224, in __exit__", "    raise exc_value.with_traceback(exc_tb)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/impl.py\", line 175, in _do_get", "    return self._create_connection()", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/base.py\", line 388, in _create_connection", "    return _ConnectionRecord(self)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/base.py\", line 673, in __init__", "    self.__connect()", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/base.py\", line 900, in __connect", "    pool.logger.debug(\"Error on connect(): %s\", e)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/util/langhelpers.py\", line 224, in __exit__", "    raise exc_value.with_traceback(exc_tb)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/base.py\", line 895, in __connect", "    self.dbapi_connection = connection = pool._invoke_creator(self)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/engine/create.py\", line 661, in connect", "    return dialect.connect(*cargs, **cparams)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/engine/default.py\", line 629, in connect", "    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/psycopg2/__init__.py\", line 122, in connect", "    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)", "sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not translate host name \"p101-postgres-server.company.com\" to address: nodename nor servname provided, or not known", "", "(Background on this error at: https://sqlalche.me/e/20/e3q8)", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 2590, in connect_to_postgres_as_source", "    connect_to_postgres(context, db_section)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1461, in connect_to_postgres", "    postgres_engine = db_comparison_manager.get_postgres_connection(db_section)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 308, in get_postgres_connection", "    raise ConfigurationError(f\"PostgreSQL connection failed: {str(e)}\")", "utils.custom_exceptions.ConfigurationError: PostgreSQL connection failed: (psycopg2.OperationalError) could not translate host name \"p101-postgres-server.company.com\" to address: nodename nor servname provided, or not known", "", "(Background on this error at: https://sqlalche.me/e/20/e3q8) | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "And", "step_type": "given", "name": "I connect to PostgreSQL database using \"P102_POSTGRES\" configuration as target", "location": "features/database/specific_sections_demo.feature:50"}, {"keyword": "When", "step_type": "when", "name": "I read query from config section \"QUERIES\" key \"inventory_check\"", "location": "features/database/specific_sections_demo.feature:51"}, {"keyword": "And", "step_type": "when", "name": "I execute query on source database and store as source DataFrame", "location": "features/database/specific_sections_demo.feature:52"}, {"keyword": "And", "step_type": "when", "name": "I execute query on target database and store as target DataFrame", "location": "features/database/specific_sections_demo.feature:53"}, {"keyword": "Then", "step_type": "then", "name": "I perform DataFrame comparison with primary key \"id\"", "location": "features/database/specific_sections_demo.feature:54"}, {"keyword": "And", "step_type": "then", "name": "DataFrames should match exactly", "location": "features/database/specific_sections_demo.feature:55"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Load data from S101 Oracle using table configuration", "tags": ["database", "table_based", "S101"], "location": "features/database/specific_sections_demo.feature:58", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/specific_sections_demo.feature:5", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.001111745834350586}}, {"keyword": "Given", "step_type": "given", "name": "I connect to Oracle database using \"S101_ORACLE\" configuration", "location": "features/database/specific_sections_demo.feature:59", "match": {"location": "features/steps/database_steps.py:1417", "arguments": [{"value": "S101_ORACLE", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.014322757720947266, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 262, in get_oracle_connection", "    pool = self.connection_pool_manager.get_oracle_pool(db_config)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 89, in get_oracle_pool", "    self.oracle_pools[pool_key] = cx_Oracle.SessionPool(", "cx_Oracle.DatabaseError: DPI-1047: Cannot locate a 64-bit Oracle Client library: \"dlopen(libclntsh.dylib, 0x0001): tried: 'libclntsh.dylib' (no such file), '/usr/local/lib/libclntsh.dylib' (no such file), '/usr/lib/libclntsh.dylib' (no such file), '/Users/karimmohammed/testautomationframework/libclntsh.dylib' (no such file)\". See https://cx-oracle.readthedocs.io/en/latest/user_guide/installation.html for help", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1428, in connect_to_oracle", "    oracle_engine = db_comparison_manager.get_oracle_connection(db_section)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 279, in get_oracle_connection", "    raise ConfigurationError(f\"Oracle connection failed: {error_obj.message}\")", "utils.custom_exceptions.ConfigurationError: Oracle connection failed: DPI-1047: Cannot locate a 64-bit Oracle Client library: \"dlopen(libclntsh.dylib, 0x0001): tried: 'libclntsh.dylib' (no such file), '/usr/local/lib/libclntsh.dylib' (no such file), '/usr/lib/libclntsh.dylib' (no such file), '/Users/karimmohammed/testautomationframework/libclntsh.dylib' (no such file)\". See https://cx-oracle.readthedocs.io/en/latest/user_guide/installation.html for help | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "When", "step_type": "when", "name": "I load source data using table from config section \"S101_TABLES\" key \"customer_table\" on Oracle", "location": "features/database/specific_sections_demo.feature:60"}, {"keyword": "Then", "step_type": "then", "name": "source DataFrame should contain data", "location": "features/database/specific_sections_demo.feature:61"}, {"keyword": "And", "step_type": "then", "name": "source DataFrame should have more than 0 records", "location": "features/database/specific_sections_demo.feature:62"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Load data from P101 PostgreSQL using table configuration", "tags": ["database", "table_based", "P101"], "location": "features/database/specific_sections_demo.feature:65", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/specific_sections_demo.feature:5", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0011327266693115234}}, {"keyword": "Given", "step_type": "given", "name": "I connect to PostgreSQL database using \"P101_POSTGRES\" configuration", "location": "features/database/specific_sections_demo.feature:66", "match": {"location": "features/steps/database_steps.py:1450", "arguments": [{"value": "P101_POSTGRES", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.08893394470214844, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/engine/base.py\", line 143, in __init__", "    self._dbapi_connection = engine.raw_connection()", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/engine/base.py\", line 3301, in raw_connection", "    return self.pool.connect()", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/base.py\", line 447, in connect", "    return _ConnectionFairy._checkout(self)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/base.py\", line 1264, in _checkout", "    fairy = _ConnectionRecord.checkout(pool)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/base.py\", line 711, in checkout", "    rec = pool._do_get()", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/impl.py\", line 178, in _do_get", "    self._dec_overflow()", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/util/langhelpers.py\", line 224, in __exit__", "    raise exc_value.with_traceback(exc_tb)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/impl.py\", line 175, in _do_get", "    return self._create_connection()", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/base.py\", line 388, in _create_connection", "    return _ConnectionRecord(self)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/base.py\", line 673, in __init__", "    self.__connect()", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/base.py\", line 900, in __connect", "    pool.logger.debug(\"Error on connect(): %s\", e)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/util/langhelpers.py\", line 224, in __exit__", "    raise exc_value.with_traceback(exc_tb)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/base.py\", line 895, in __connect", "    self.dbapi_connection = connection = pool._invoke_creator(self)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/engine/create.py\", line 661, in connect", "    return dialect.connect(*cargs, **cparams)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/engine/default.py\", line 629, in connect", "    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/psycopg2/__init__.py\", line 122, in connect", "    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)", "psycopg2.OperationalError: could not translate host name \"p101-postgres-server.company.com\" to address: nodename nor servname provided, or not known", "", "", "The above exception was the direct cause of the following exception:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 299, in get_postgres_connection", "    with self.postgres_engine.connect() as conn: # type: ignore", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/engine/base.py\", line 3277, in connect", "    return self._connection_cls(self)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/engine/base.py\", line 145, in __init__", "    Connection._handle_dbapi_exception_noconnection(", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/engine/base.py\", line 2440, in _handle_dbapi_exception_noconnection", "    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/engine/base.py\", line 143, in __init__", "    self._dbapi_connection = engine.raw_connection()", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/engine/base.py\", line 3301, in raw_connection", "    return self.pool.connect()", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/base.py\", line 447, in connect", "    return _ConnectionFairy._checkout(self)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/base.py\", line 1264, in _checkout", "    fairy = _ConnectionRecord.checkout(pool)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/base.py\", line 711, in checkout", "    rec = pool._do_get()", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/impl.py\", line 178, in _do_get", "    self._dec_overflow()", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/util/langhelpers.py\", line 224, in __exit__", "    raise exc_value.with_traceback(exc_tb)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/impl.py\", line 175, in _do_get", "    return self._create_connection()", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/base.py\", line 388, in _create_connection", "    return _ConnectionRecord(self)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/base.py\", line 673, in __init__", "    self.__connect()", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/base.py\", line 900, in __connect", "    pool.logger.debug(\"Error on connect(): %s\", e)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/util/langhelpers.py\", line 224, in __exit__", "    raise exc_value.with_traceback(exc_tb)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/pool/base.py\", line 895, in __connect", "    self.dbapi_connection = connection = pool._invoke_creator(self)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/engine/create.py\", line 661, in connect", "    return dialect.connect(*cargs, **cparams)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/sqlalchemy/engine/default.py\", line 629, in connect", "    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/psycopg2/__init__.py\", line 122, in connect", "    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)", "sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not translate host name \"p101-postgres-server.company.com\" to address: nodename nor servname provided, or not known", "", "(Background on this error at: https://sqlalche.me/e/20/e3q8)", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1461, in connect_to_postgres", "    postgres_engine = db_comparison_manager.get_postgres_connection(db_section)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 308, in get_postgres_connection", "    raise ConfigurationError(f\"PostgreSQL connection failed: {str(e)}\")", "utils.custom_exceptions.ConfigurationError: PostgreSQL connection failed: (psycopg2.OperationalError) could not translate host name \"p101-postgres-server.company.com\" to address: nodename nor servname provided, or not known", "", "(Background on this error at: https://sqlalche.me/e/20/e3q8) | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "When", "step_type": "when", "name": "I load target data using table from config section \"P101_TABLES\" key \"customer_table\" on PostgreSQL", "location": "features/database/specific_sections_demo.feature:67"}, {"keyword": "Then", "step_type": "then", "name": "target DataFrame should contain data", "location": "features/database/specific_sections_demo.feature:68"}, {"keyword": "And", "step_type": "then", "name": "target DataFrame should have more than 0 records", "location": "features/database/specific_sections_demo.feature:69"}], "status": "failed"}, {"type": "scenario", "keyword": "Scenario", "name": "Multi-system comprehensive test across all databases", "tags": ["database", "multi_system", "comprehensive"], "location": "features/database/specific_sections_demo.feature:72", "steps": [{"keyword": "Given", "step_type": "given", "name": "I load configuration from \"config.ini\"", "location": "features/database/specific_sections_demo.feature:5", "match": {"location": "features/steps/database_steps.py:1392", "arguments": [{"value": "config.ini", "name": "config_file"}]}, "result": {"status": "passed", "duration": 0.0006639957427978516}}, {"keyword": "Given", "step_type": "given", "name": "I connect to Oracle database using \"S101_ORACLE\" configuration", "location": "features/database/specific_sections_demo.feature:73", "match": {"location": "features/steps/database_steps.py:1417", "arguments": [{"value": "S101_ORACLE", "name": "db_section"}]}, "result": {"status": "failed", "duration": 0.02442002296447754, "error_message": ["Traceback (most recent call last):", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 262, in get_oracle_connection", "    pool = self.connection_pool_manager.get_oracle_pool(db_config)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 89, in get_oracle_pool", "    self.oracle_pools[pool_key] = cx_Oracle.SessionPool(", "cx_Oracle.DatabaseError: DPI-1047: Cannot locate a 64-bit Oracle Client library: \"dlopen(libclntsh.dylib, 0x0001): tried: 'libclntsh.dylib' (no such file), '/usr/local/lib/libclntsh.dylib' (no such file), '/usr/lib/libclntsh.dylib' (no such file), '/Users/karimmohammed/testautomationframework/libclntsh.dylib' (no such file)\". See https://cx-oracle.readthedocs.io/en/latest/user_guide/installation.html for help", "", "During handling of the above exception, another exception occurred:", "", "Traceback (most recent call last):", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/model.py\", line 1329, in run", "    match.run(runner.context)", "  File \"/Users/karimmohammed/Library/Python/3.9/lib/python/site-packages/behave/matchers.py\", line 98, in run", "    self.func(context, *args, **kwargs)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 1428, in connect_to_oracle", "    oracle_engine = db_comparison_manager.get_oracle_connection(db_section)", "  File \"/Users/karimmohammed/testautomationframework/features/steps/database_steps.py\", line 279, in get_oracle_connection", "    raise ConfigurationError(f\"Oracle connection failed: {error_obj.message}\")", "utils.custom_exceptions.ConfigurationError: Oracle connection failed: DPI-1047: Cannot locate a 64-bit Oracle Client library: \"dlopen(libclntsh.dylib, 0x0001): tried: 'libclntsh.dylib' (no such file), '/usr/local/lib/libclntsh.dylib' (no such file), '/usr/lib/libclntsh.dylib' (no such file), '/Users/karimmohammed/testautomationframework/libclntsh.dylib' (no such file)\". See https://cx-oracle.readthedocs.io/en/latest/user_guide/installation.html for help | Details: {'config_key': None, 'config_file': None}"]}}, {"keyword": "And", "step_type": "given", "name": "I connect to Oracle database using \"S102_ORACLE\" configuration as secondary", "location": "features/database/specific_sections_demo.feature:74"}, {"keyword": "And", "step_type": "given", "name": "I connect to PostgreSQL database using \"P101_POSTGRES\" configuration", "location": "features/database/specific_sections_demo.feature:75"}, {"keyword": "And", "step_type": "given", "name": "I connect to PostgreSQL database using \"P102_POSTGRES\" configuration as secondary", "location": "features/database/specific_sections_demo.feature:76"}, {"keyword": "When", "step_type": "when", "name": "I execute direct query \"SELECT COUNT(*) as record_count FROM dual\" on Oracle as source", "location": "features/database/specific_sections_demo.feature:77"}, {"keyword": "And", "step_type": "when", "name": "I execute direct query \"SELECT COUNT(*) as record_count FROM information_schema.tables\" on PostgreSQL as target", "location": "features/database/specific_sections_demo.feature:78"}, {"keyword": "Then", "step_type": "then", "name": "source DataFrame should contain data", "location": "features/database/specific_sections_demo.feature:79"}, {"keyword": "And", "step_type": "then", "name": "target DataFrame should contain data", "location": "features/database/specific_sections_demo.feature:80"}, {"keyword": "And", "step_type": "then", "name": "both databases should be accessible", "location": "features/database/specific_sections_demo.feature:81"}], "status": "failed"}]},

{"keyword": "Feature", "name": "Kafka Message Queue Integration", "tags": [], "location": "features/kafka/kafka_integration.feature:1", "status": "skipped", "description": ["As a test automation engineer", "I want to test Kafka message publishing and consuming", "So that I can validate message queue functionality"], "elements": [{"type": "background", "keyword": "Background", "name": "", "location": "features/kafka/kafka_integration.feature:6", "steps": [{"keyword": "Given", "step_type": "given", "name": "I have access to Kafka broker", "location": "features/kafka/kafka_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I have configured Kafka connection parameters", "location": "features/kafka/kafka_integration.feature:8"}]}, {"type": "scenario", "keyword": "Scenario", "name": "Post single message to Kafka topic", "tags": ["kafka", "smoke"], "location": "features/kafka/kafka_integration.feature:11", "steps": [{"keyword": "Given", "step_type": "given", "name": "I have access to Kafka broker", "location": "features/kafka/kafka_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I have configured Kafka connection parameters", "location": "features/kafka/kafka_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "I have a message file \"data/input/single_message.json\"", "location": "features/kafka/kafka_integration.feature:12"}, {"keyword": "When", "step_type": "when", "name": "I publish the message to Kafka topic \"test-topic\"", "location": "features/kafka/kafka_integration.feature:13"}, {"keyword": "Then", "step_type": "then", "name": "the message should be successfully published", "location": "features/kafka/kafka_integration.feature:14"}, {"keyword": "And", "step_type": "then", "name": "I should receive a confirmation with message offset", "location": "features/kafka/kafka_integration.feature:15"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Post multiple messages to Kafka topic from file", "tags": ["kafka", "smoke"], "location": "features/kafka/kafka_integration.feature:18", "steps": [{"keyword": "Given", "step_type": "given", "name": "I have access to Kafka broker", "location": "features/kafka/kafka_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I have configured Kafka connection parameters", "location": "features/kafka/kafka_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "I have a message file \"data/input/multiple_messages.json\"", "location": "features/kafka/kafka_integration.feature:19"}, {"keyword": "When", "step_type": "when", "name": "I publish all messages from file to Kafka topic \"test-topic-batch\"", "location": "features/kafka/kafka_integration.feature:20"}, {"keyword": "Then", "step_type": "then", "name": "all messages should be successfully published", "location": "features/kafka/kafka_integration.feature:21"}, {"keyword": "And", "step_type": "then", "name": "I should receive confirmations for all messages", "location": "features/kafka/kafka_integration.feature:22"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Read messages from Kafka topic and write to file", "tags": ["kafka", "consumer"], "location": "features/kafka/kafka_integration.feature:25", "steps": [{"keyword": "Given", "step_type": "given", "name": "I have access to Kafka broker", "location": "features/kafka/kafka_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I have configured Kafka connection parameters", "location": "features/kafka/kafka_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "Kafka topic \"test-topic\" has messages available", "location": "features/kafka/kafka_integration.feature:26"}, {"keyword": "When", "step_type": "when", "name": "I consume messages from Kafka topic \"test-topic\"", "location": "features/kafka/kafka_integration.feature:27"}, {"keyword": "And", "step_type": "when", "name": "I write consumed messages to file \"output/consumed_messages.txt\"", "location": "features/kafka/kafka_integration.feature:28"}, {"keyword": "Then", "step_type": "then", "name": "the output file should contain the consumed messages", "location": "features/kafka/kafka_integration.feature:29"}, {"keyword": "And", "step_type": "then", "name": "each message should be on a separate line", "location": "features/kafka/kafka_integration.feature:30"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Complete message roundtrip test", "tags": ["kafka", "roundtrip"], "location": "features/kafka/kafka_integration.feature:33", "steps": [{"keyword": "Given", "step_type": "given", "name": "I have access to Kafka broker", "location": "features/kafka/kafka_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I have configured Kafka connection parameters", "location": "features/kafka/kafka_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "I have a message file \"data/input/roundtrip_messages.json\"", "location": "features/kafka/kafka_integration.feature:34"}, {"keyword": "When", "step_type": "when", "name": "I publish all messages from file to Kafka topic \"roundtrip-topic\"", "location": "features/kafka/kafka_integration.feature:35"}, {"keyword": "And", "step_type": "when", "name": "I consume messages from Kafka topic \"roundtrip-topic\"", "location": "features/kafka/kafka_integration.feature:36"}, {"keyword": "And", "step_type": "when", "name": "I write consumed messages to file \"output/roundtrip_output.txt\"", "location": "features/kafka/kafka_integration.feature:37"}, {"keyword": "Then", "step_type": "then", "name": "the output file should contain all published messages", "location": "features/kafka/kafka_integration.feature:38"}, {"keyword": "And", "step_type": "then", "name": "the message content should match the original input", "location": "features/kafka/kafka_integration.feature:39"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Read messages with timeout", "tags": ["kafka", "consumer", "timeout"], "location": "features/kafka/kafka_integration.feature:42", "steps": [{"keyword": "Given", "step_type": "given", "name": "I have access to Kafka broker", "location": "features/kafka/kafka_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I have configured Kafka connection parameters", "location": "features/kafka/kafka_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "Kafka topic \"empty-topic\" has no messages", "location": "features/kafka/kafka_integration.feature:43"}, {"keyword": "When", "step_type": "when", "name": "I consume messages from Kafka topic \"empty-topic\" with timeout 5 seconds", "location": "features/kafka/kafka_integration.feature:44"}, {"keyword": "Then", "step_type": "then", "name": "I should receive no messages within the timeout period", "location": "features/kafka/kafka_integration.feature:45"}, {"keyword": "And", "step_type": "then", "name": "the consumer should handle the timeout gracefully", "location": "features/kafka/kafka_integration.feature:46"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Handle invalid topic publishing", "tags": ["kafka", "producer", "error"], "location": "features/kafka/kafka_integration.feature:49", "steps": [{"keyword": "Given", "step_type": "given", "name": "I have access to Kafka broker", "location": "features/kafka/kafka_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I have configured Kafka connection parameters", "location": "features/kafka/kafka_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "I have a message file \"data/input/single_message.json\"", "location": "features/kafka/kafka_integration.feature:50"}, {"keyword": "When", "step_type": "when", "name": "I attempt to publish the message to invalid Kafka topic \"invalid.topic.name\"", "location": "features/kafka/kafka_integration.feature:51"}, {"keyword": "Then", "step_type": "then", "name": "the publishing should fail with appropriate error", "location": "features/kafka/kafka_integration.feature:52"}, {"keyword": "And", "step_type": "then", "name": "the error should be logged properly", "location": "features/kafka/kafka_integration.feature:53"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Handle invalid topic consumption", "tags": ["kafka", "consumer", "error"], "location": "features/kafka/kafka_integration.feature:56", "steps": [{"keyword": "Given", "step_type": "given", "name": "I have access to Kafka broker", "location": "features/kafka/kafka_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I have configured Kafka connection parameters", "location": "features/kafka/kafka_integration.feature:8"}, {"keyword": "When", "step_type": "when", "name": "I attempt to consume messages from invalid Kafka topic \"invalid.topic.name\"", "location": "features/kafka/kafka_integration.feature:57"}, {"keyword": "Then", "step_type": "then", "name": "the consumption should fail with appropriate error", "location": "features/kafka/kafka_integration.feature:58"}, {"keyword": "And", "step_type": "then", "name": "the error should be logged properly", "location": "features/kafka/kafka_integration.feature:59"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Validate Kafka connection configuration", "tags": ["kafka", "configuration"], "location": "features/kafka/kafka_integration.feature:62", "steps": [{"keyword": "Given", "step_type": "given", "name": "I have access to Kafka broker", "location": "features/kafka/kafka_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I have configured Kafka connection parameters", "location": "features/kafka/kafka_integration.feature:8"}, {"keyword": "When", "step_type": "when", "name": "I validate Kafka broker connectivity", "location": "features/kafka/kafka_integration.feature:63"}, {"keyword": "Then", "step_type": "then", "name": "the connection should be successful", "location": "features/kafka/kafka_integration.feature:64"}, {"keyword": "And", "step_type": "then", "name": "I should be able to list available topics", "location": "features/kafka/kafka_integration.feature:65"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Publish large batch of messages", "tags": ["kafka", "performance"], "location": "features/kafka/kafka_integration.feature:68", "steps": [{"keyword": "Given", "step_type": "given", "name": "I have access to Kafka broker", "location": "features/kafka/kafka_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I have configured Kafka connection parameters", "location": "features/kafka/kafka_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "I have a message file \"data/input/large_batch_messages.json\" with 1000 messages", "location": "features/kafka/kafka_integration.feature:69"}, {"keyword": "When", "step_type": "when", "name": "I publish all messages from file to Kafka topic \"performance-topic\"", "location": "features/kafka/kafka_integration.feature:70"}, {"keyword": "Then", "step_type": "then", "name": "all messages should be published within 30 seconds", "location": "features/kafka/kafka_integration.feature:71"}, {"keyword": "And", "step_type": "then", "name": "I should track publishing performance metrics", "location": "features/kafka/kafka_integration.feature:72"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Handle different message formats", "tags": ["kafka", "serialization"], "location": "features/kafka/kafka_integration.feature:75", "steps": [{"keyword": "Given", "step_type": "given", "name": "I have access to Kafka broker", "location": "features/kafka/kafka_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I have configured Kafka connection parameters", "location": "features/kafka/kafka_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "I have message files with different formats", "location": "features/kafka/kafka_integration.feature:76", "table": {"headings": ["file_path", "format"], "rows": [["data/input/json_messages.json", "json"], ["data/input/text_messages.txt", "text"], ["data/input/xml_messages.xml", "xml"]]}}, {"keyword": "When", "step_type": "when", "name": "I publish messages from each file to Kafka topic \"format-topic\"", "location": "features/kafka/kafka_integration.feature:81"}, {"keyword": "Then", "step_type": "then", "name": "all messages should be published successfully", "location": "features/kafka/kafka_integration.feature:82"}, {"keyword": "And", "step_type": "then", "name": "the message format should be preserved", "location": "features/kafka/kafka_integration.feature:83"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Publish messages to specific partition", "tags": ["kafka", "partition"], "location": "features/kafka/kafka_integration.feature:86", "steps": [{"keyword": "Given", "step_type": "given", "name": "I have access to Kafka broker", "location": "features/kafka/kafka_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I have configured Kafka connection parameters", "location": "features/kafka/kafka_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "I have a message file \"data/input/partitioned_messages.json\"", "location": "features/kafka/kafka_integration.feature:87"}, {"keyword": "When", "step_type": "when", "name": "I publish messages to Kafka topic \"partitioned-topic\" partition 2", "location": "features/kafka/kafka_integration.feature:88"}, {"keyword": "Then", "step_type": "then", "name": "the messages should be published to the specified partition", "location": "features/kafka/kafka_integration.feature:89"}, {"keyword": "And", "step_type": "then", "name": "I should verify the partition assignment", "location": "features/kafka/kafka_integration.feature:90"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Consume messages from specific offset", "tags": ["kafka", "offset"], "location": "features/kafka/kafka_integration.feature:93", "steps": [{"keyword": "Given", "step_type": "given", "name": "I have access to Kafka broker", "location": "features/kafka/kafka_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I have configured Kafka connection parameters", "location": "features/kafka/kafka_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "Kafka topic \"offset-topic\" has messages at various offsets", "location": "features/kafka/kafka_integration.feature:94"}, {"keyword": "When", "step_type": "when", "name": "I consume messages from Kafka topic \"offset-topic\" starting from offset 10", "location": "features/kafka/kafka_integration.feature:95"}, {"keyword": "Then", "step_type": "then", "name": "I should receive messages from the specified offset onwards", "location": "features/kafka/kafka_integration.feature:96"}, {"keyword": "And", "step_type": "then", "name": "earlier messages should be skipped", "location": "features/kafka/kafka_integration.feature:97"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Publish and consume messages with headers", "tags": ["kafka", "headers"], "location": "features/kafka/kafka_integration.feature:100", "steps": [{"keyword": "Given", "step_type": "given", "name": "I have access to Kafka broker", "location": "features/kafka/kafka_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I have configured Kafka connection parameters", "location": "features/kafka/kafka_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "I have a message file \"data/input/messages_with_headers.json\"", "location": "features/kafka/kafka_integration.feature:101"}, {"keyword": "When", "step_type": "when", "name": "I publish messages with custom headers to Kafka topic \"headers-topic\"", "location": "features/kafka/kafka_integration.feature:102"}, {"keyword": "And", "step_type": "when", "name": "I consume messages from Kafka topic \"headers-topic\"", "location": "features/kafka/kafka_integration.feature:103"}, {"keyword": "Then", "step_type": "then", "name": "the consumed messages should include the custom headers", "location": "features/kafka/kafka_integration.feature:104"}, {"keyword": "And", "step_type": "then", "name": "header values should match the original headers", "location": "features/kafka/kafka_integration.feature:105"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Clean up test topics and messages", "tags": ["kafka", "cleanup"], "location": "features/kafka/kafka_integration.feature:108", "steps": [{"keyword": "Given", "step_type": "given", "name": "I have access to Kafka broker", "location": "features/kafka/kafka_integration.feature:7"}, {"keyword": "And", "step_type": "given", "name": "I have configured Kafka connection parameters", "location": "features/kafka/kafka_integration.feature:8"}, {"keyword": "Given", "step_type": "given", "name": "I have created test topics during testing", "location": "features/kafka/kafka_integration.feature:109"}, {"keyword": "When", "step_type": "when", "name": "I perform cleanup of test topics", "location": "features/kafka/kafka_integration.feature:110"}, {"keyword": "Then", "step_type": "then", "name": "all test topics should be removed", "location": "features/kafka/kafka_integration.feature:111"}, {"keyword": "And", "step_type": "then", "name": "test message files should be cleaned up", "location": "features/kafka/kafka_integration.feature:112"}], "status": "skipped"}]},

{"keyword": "Feature", "name": "Message Queue Posting", "tags": [], "location": "features/mq/message_queue.feature:2", "status": "skipped", "description": ["As a system developer,", "I want to verify that my application can reliably post messages to a message queue,", "so that I can ensure the data transfer layer is working correctly."], "elements": [{"type": "scenario", "keyword": "Scenario", "name": "Post a single custom message", "tags": [], "location": "features/mq/message_queue.feature:7", "steps": [{"keyword": "Given", "step_type": "given", "name": "MQ connection is configured", "location": "features/mq/message_queue.feature:8"}, {"keyword": "When", "step_type": "when", "name": "I post custom message \"Hello, this is a test message.\"", "location": "features/mq/message_queue.feature:9"}, {"keyword": "Then", "step_type": "then", "name": "message should be posted successfully", "location": "features/mq/message_queue.feature:10"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Post a file as a single message", "tags": [], "location": "features/mq/message_queue.feature:12", "steps": [{"keyword": "Given", "step_type": "given", "name": "MQ connection is configured", "location": "features/mq/message_queue.feature:13"}, {"keyword": "When", "step_type": "when", "name": "I post message from \"test_data.txt\" as single message", "location": "features/mq/message_queue.feature:14"}, {"keyword": "Then", "step_type": "then", "name": "message should be posted successfully", "location": "features/mq/message_queue.feature:15"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Post a file line by line and verify all lines are posted", "tags": [], "location": "features/mq/message_queue.feature:17", "steps": [{"keyword": "Given", "step_type": "given", "name": "MQ connection is configured", "location": "features/mq/message_queue.feature:18"}, {"keyword": "When", "step_type": "when", "name": "I post message from \"test_data.txt\" line by line", "location": "features/mq/message_queue.feature:19"}, {"keyword": "Then", "step_type": "then", "name": "all lines should be posted successfully", "location": "features/mq/message_queue.feature:20"}, {"keyword": "And", "step_type": "then", "name": "success count should match file line count", "location": "features/mq/message_queue.feature:21"}], "status": "skipped"}, {"type": "scenario", "keyword": "Scenario", "name": "Post a file and verify a specific success rate", "tags": [], "location": "features/mq/message_queue.feature:23", "steps": [{"keyword": "Given", "step_type": "given", "name": "MQ connection is configured", "location": "features/mq/message_queue.feature:24"}, {"keyword": "When", "step_type": "when", "name": "I post message from \"mixed_results.txt\" line by line", "location": "features/mq/message_queue.feature:25"}, {"keyword": "Then", "step_type": "then", "name": "MQ posting should have 80% success rate", "location": "features/mq/message_queue.feature:26"}], "status": "skipped"}]}
]
