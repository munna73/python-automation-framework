#!/usr/bin/env python3
import os
import re
import sys
import importlib
from pathlib import Path
from typing import Set

def is_standard_library_module(package_name: str) -> bool:
    """
    Checks if a package is part of the Python standard library.
    This is a more reliable method than a static list.
    """
    if package_name in sys.builtin_module_names:
        return True
    try:
        spec = importlib.util.find_spec(package_name)
        if spec and spec.origin:
            # Check if the module's path is inside the standard library path
            return Path(sys.prefix) in Path(spec.origin).parents
    except Exception:
        pass
    return False

def generate_requirements(project_root: str = '.', output_file: str = 'requirements.txt'):
    """
    Scans a project directory for Python files, extracts external package imports,
    and writes them to a requirements.txt file.

    Args:
        project_root: The root directory to start scanning from.
        output_file: The name of the file to write the dependencies to.
    """
    # List of your project's local packages to ignore.
    # This list should include all top-level directories containing Python code.
    local_packages = {
        'api', 'aws', 'db', 'features', 'mq', 'scripts', 'tests', 'utils'
    }
    
    external_packages: Set[str] = set()
    # This regex captures the first word after 'import' or 'from'
    import_pattern = re.compile(r'^(?:import|from)\s+(\w+)')

    print(f"Scanning project root: {Path(project_root).resolve()}...")

    for root, dirs, files in os.walk(project_root):
        # Exclude common virtual environment and build directories
        dirs[:] = [d for d in dirs if d not in ['.venv', 'env', '__pycache__', 'path']]
        
        for file in files:
            if file.endswith('.py'):
                file_path = os.path.join(root, file)
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        for line in f:
                            match = import_pattern.match(line.strip())
                            if match:
                                package_name = match.group(1)
                                
                                # Ignore local packages and standard library modules
                                if package_name not in local_packages and \
                                   not is_standard_library_module(package_name):
                                    external_packages.add(package_name)
                except Exception as e:
                    print(f"Error processing {file_path}: {e}")

    # Sort the packages alphabetically for a clean requirements file
    sorted_packages = sorted(list(external_packages))

    print(f"Found {len(sorted_packages)} external packages.")
    
    # Write the packages to the output file
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write("# This file was automatically generated by generate_requirements.py\n\n")
            for package in sorted_packages:
                f.write(f"{package}\n")
        print(f"Successfully wrote dependencies to {output_file}")
    except Exception as e:
        print(f"Error writing to {output_file}: {e}")


if __name__ == '__main__':
    # You can run this script from the command line in your project's root directory.
    # It will automatically generate a requirements.txt file in the same location.
    generate_requirements()